webpackHotUpdate_N_E("pages/midi",{

/***/ "./apps/shared/midi/LUMIKeys.ts":
/*!**************************************!*\
  !*** ./apps/shared/midi/LUMIKeys.ts ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var webmidi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webmidi */ \"./node_modules/webmidi/webmidi.min.js\");\n/* harmony import */ var webmidi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webmidi__WEBPACK_IMPORTED_MODULE_0__);\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n // This approach was informed by:\n// https://github.com/benob/LUMI-lights/blob/master/SYSEX.txt\n// https://github.com/WeAreROLI/roli_blocks_basics/blob/main/blocks/roli_BlockConfigId.h\n// Note: You can drag *.littlefoot programs into the ROLI Dashboard to customize the program running on the LUMI Keys.\n\nvar LUMIKeys;\n\n(function (_LUMIKeys) {\n  // https://github.com/juce-framework/JUCE/blob/master/modules/juce_blocks_basics/protocol/juce_BitPackingUtilities.h\n  // static const uint8 roliSysexHeader[] = { 0xf0, 0x00, 0x21, 0x10, 0x77 };\n  var ROLI_MANUFACTURER_ID = [0x00, 0x21, 0x10];\n  var inputs = [];\n  var outputs = [];\n  var logOutput = null; // The DEVICE_ID might be different!\n  // We should allow the user of this page to customize the device ID.\n  // Maybe 0x37 was the kickstarter version of LUMI? How do we query the device ID?\n  // 0x00    => Works 100% for ronyeh's LUMI.\n  // 0x07    => Works 100% for ronyeh's LUMI.\n  // 0x37    => Works for benob's LUMI, but NOT for ronyeh's LUMI.\n  //\n  // This might have something to do with topology.\n  // See: https://github.com/juce-framework/JUCE/blob/master/modules/juce_blocks_basics/protocol/juce_BitPackingUtilities.h#L34\n  //\n  // When LUMI Keys responds with a SysEx, the deviceID (or topology ID?) is 47.\n  //\n  // let deviceID = 0x07;\n\n  var deviceID = 0x00;\n\n  function setDeviceID(devID) {\n    deviceID = devID;\n  }\n\n  function isLUMIKeys(io) {\n    return io.manufacturer.toUpperCase().startsWith(\"ROLI\") && io.name.toUpperCase().startsWith(\"LUMI\");\n  }\n\n  function messageMatches(msgData, msgString) {\n    return getDataAsHexString(msgData) === msgString;\n  } // Return MIDI data as an uppercase string of hex numbers, space delimited.\n  // We do not include the prefix 0x.\n  // Example:\n  //     \"F0 00 21 10 77 47 00 00 00 00 00 04 00 00 2C F7\"\n\n\n  function getDataAsHexString(msgData) {\n    if (!msgData || msgData.length === 0) {\n      return \"\";\n    }\n\n    var hexStrings = [];\n\n    var _iterator = _createForOfIteratorHelper(msgData),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _byte = _step.value;\n        hexStrings.push(_byte.toString(16).padStart(2, \"0\").toUpperCase());\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return hexStrings.join(\" \");\n  }\n\n  function logMessageAsHex(msgData) {\n    logOutput(getDataAsHexString(msgData));\n  }\n\n  function logMessageAsUTF8(msgData) {\n    var dataString = new TextDecoder(\"utf-8\").decode(msgData);\n    logOutput(dataString);\n  }\n\n  function connect() {\n    var _iterator2 = _createForOfIteratorHelper(webmidi__WEBPACK_IMPORTED_MODULE_0___default.a.inputs),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var i = _step2.value;\n\n        if (isLUMIKeys(i)) {\n          inputs.push(i);\n          i.addListener(\"midimessage\", \"all\", function (e) {\n            logMessageAsHex(e.data); // logMessageAsUTF8(e.data);\n\n            if (messageMatches(e.data, \"F0 00 21 10 77 47 00 00 00 00 00 04 00 00 2C F7\")) {\n              logOutput(\"POWER BUTTON PRESSED\");\n            }\n\n            if (messageMatches(e.data, \"F0 00 21 10 77 47 00 00 00 00 00 04 04 00 38 F7\")) {\n              logOutput(\"OCTAVE DOWN PRESSED\");\n            }\n\n            if (messageMatches(e.data, \"F0 00 21 10 77 47 00 00 00 00 00 04 08 00 44 F7\")) {\n              logOutput(\"OCTAVE UP PRESSED\");\n            }\n          });\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var _iterator3 = _createForOfIteratorHelper(webmidi__WEBPACK_IMPORTED_MODULE_0___default.a.outputs),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var o = _step3.value;\n\n        if (isLUMIKeys(o)) {\n          logOutput(\"Found LUMI Keys with output port ID: \" + o.id);\n          outputs.push(o);\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  _LUMIKeys.connect = connect;\n\n  function sendSysExToAllDevices(sysexCMD) {\n    var _iterator4 = _createForOfIteratorHelper(outputs),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var output = _step4.value;\n        output.sendSysex(ROLI_MANUFACTURER_ID, sysexCMD);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  } // Convert to hex for console.log()\n  // console.log(num.toString(16));\n\n\n  function sendCommandToAllDevices(command) {\n    var header = [0x77, deviceID];\n    var commandWithHeader = header.concat(command);\n    var checksum = createChecksum(command);\n    var commandWithHeaderAndCheckSum = commandWithHeader.concat(checksum);\n    console.log(\"sendCommandToAllDevices: [ \".concat(header, \" | \").concat(command, \" | \").concat(checksum, \" ]\"));\n    console.log(\"                         [ \".concat(header.map, \" | \").concat(command, \" | \").concat(checksum, \" ]\"));\n    sendSysExToAllDevices(commandWithHeaderAndCheckSum);\n  }\n\n  function convertArrayOfDecimalNumberstoArrayOfHexStrings(decimalNums) {\n    decimalNums.map(function (num) {\n      return \"0x\" + num.toString(16).toUpperCase().padStart(2, \"0\");\n    });\n  }\n\n  function createChecksum(values) {\n    var sum = values.length;\n\n    for (var i = 0; i < values.length; i++) {\n      sum = sum * 3 + values[i] & 0xff;\n    }\n\n    return sum & 0x7f;\n  }\n\n  function getClickHandler_SetScaleRoot(rootNote) {\n    return function () {\n      var command = [0x10, 0x30];\n\n      switch (rootNote) {\n        case \"C\":\n        default:\n          command.push.apply(command, [0x03, 0x00]);\n          break;\n\n        case \"C#/Db\":\n          command.push.apply(command, [0x23, 0x00]);\n          break;\n\n        case \"D\":\n          command.push.apply(command, [0x43, 0x00]);\n          break;\n\n        case \"D#/Eb\":\n          command.push.apply(command, [0x63, 0x00]);\n          break;\n\n        case \"E\":\n          command.push.apply(command, [0x03, 0x01]);\n          break;\n\n        case \"F\":\n          command.push.apply(command, [0x23, 0x01]);\n          break;\n\n        case \"F#/Gb\":\n          command.push.apply(command, [0x43, 0x01]);\n          break;\n\n        case \"G\":\n          command.push.apply(command, [0x63, 0x01]);\n          break;\n\n        case \"G#/Ab\":\n          command.push.apply(command, [0x03, 0x02]);\n          break;\n\n        case \"A\":\n          command.push.apply(command, [0x23, 0x02]);\n          break;\n\n        case \"A#/Bb\":\n          command.push.apply(command, [0x43, 0x02]);\n          break;\n\n        case \"B\":\n          command.push.apply(command, [0x63, 0x02]);\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetScaleRoot = getClickHandler_SetScaleRoot;\n\n  function getClickHandler_SetBrightness(brightnessValue) {\n    return function () {\n      console.log(\"Set Brightness Level to \" + brightnessValue + \"%\");\n      var command = [0x10, 0x40];\n\n      switch (brightnessValue) {\n        case 0:\n          command.push.apply(command, [0x04, 0x00]);\n          break;\n\n        case 1:\n          command.push.apply(command, [0x24, 0x00]);\n          break;\n\n        case 10:\n          command.push.apply(command, [0x44, 0x02]);\n          break;\n\n        case 20:\n          command.push.apply(command, [0x04, 0x05]);\n          break;\n\n        case 25:\n          command.push.apply(command, [0x24, 0x06]);\n          break;\n\n        case 50:\n          command.push.apply(command, [0x44, 0x0c]);\n          break;\n\n        case 75:\n          command.push.apply(command, [0x64, 0x12]);\n          break;\n\n        case 100:\n        default:\n          command.push.apply(command, [0x04, 0x19]);\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetBrightness = getClickHandler_SetBrightness;\n\n  function getClickHandler_ResetToFactorySettings() {\n    return function () {\n      logOutput(\"Factory Reset!\"); // ROLI Dashboard sends the following:\n      // F0 00 21 10 77 07 11 14 F7\n      // F0 00 21 10 49 F7\n      // F0 00 21 10 78 3F F7\n      // F0 00 21 10 78 3F F7\n\n      sendCommandToAllDevices([0x11]); // See: https://github.com/juce-framework/JUCE/blob/master/modules/juce_blocks_basics/protocol/juce_BlocksProtocolDefinitions.h\n      // constexpr uint8 resetMaster[6] = { 0xf0, 0x00, 0x21, 0x10, 0x49, 0xf7 };\n\n      sendSysExToAllDevices([0x49]); // Who knows what this does?\n\n      sendSysExToAllDevices([0x78, 0x3f]);\n      sendSysExToAllDevices([0x78, 0x3f]);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_ResetToFactorySettings = getClickHandler_ResetToFactorySettings;\n\n  function getClickHandler_SwitchToMode(modeNumber) {\n    return function () {\n      logOutput(\"Switch to Mode \" + modeNumber);\n      var command = [0x10, 0x40];\n\n      switch (modeNumber) {\n        case 1:\n        default:\n          command.push(0x02); // Activate Mode 1\n\n          break;\n\n        case 2:\n          command.push(0x22); // Activate Mode 2\n\n          break;\n\n        case 3:\n          command.push(0x42); // Activate Mode 3\n\n          break;\n\n        case 4:\n          command.push(0x62); // Activate Mode 4\n\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SwitchToMode = getClickHandler_SwitchToMode;\n\n  function getClickHandler_SetColorMode(modeNumber, modeType) {\n    return function () {\n      logOutput(\"Set color of mode: \" + modeNumber + \" to \" + modeType);\n      var command = [0x10];\n\n      switch (modeType) {\n        case \"pro\":\n          switch (modeNumber) {\n            case 1:\n            default:\n              command.push.apply(command, [0x40, 0x0c, 0x00]); // Mode 1 => pro\n\n              break;\n\n            case 2:\n              command.push.apply(command, [0x30, 0x0d, 0x00]); // Mode 2 => pro\n\n              break;\n\n            case 3:\n              command.push.apply(command, [0x20, 0x0e, 0x00]); // Mode 3 => pro\n\n              break;\n\n            case 4:\n              command.push.apply(command, [0x10, 0x0f, 0x00]); // Mode 4 => pro\n\n              break;\n          }\n\n          break;\n\n        case \"user\":\n          switch (modeNumber) {\n            case 1:\n            default:\n              command.push.apply(command, [0x40, 0x2c, 0x00]); // Mode 1\n\n              break;\n\n            case 2:\n              command.push.apply(command, [0x30, 0x2d, 0x00]); // Mode 2\n\n              break;\n\n            case 3:\n              command.push.apply(command, [0x20, 0x2e, 0x00]); // Mode 3\n\n              break;\n\n            case 4:\n              command.push.apply(command, [0x10, 0x2f, 0x00]); // Mode 4\n\n              break;\n          }\n\n          break;\n\n        case \"piano\":\n          switch (modeNumber) {\n            case 1:\n            default:\n              command.push.apply(command, [0x40, 0x4c, 0x00]); // Mode 1\n\n              break;\n\n            case 2:\n              command.push.apply(command, [0x30, 0x4d, 0x00]); // Mode 2\n\n              break;\n\n            case 3:\n              command.push.apply(command, [0x20, 0x4e, 0x00]); // Mode 3\n\n              break;\n\n            case 4:\n              command.push.apply(command, [0x10, 0x4f, 0x00]); // Mode 4\n\n              break;\n          }\n\n          break;\n\n        case \"stage\":\n          switch (modeNumber) {\n            case 1:\n            default:\n              command.push.apply(command, [0x40, 0x6c, 0x00]); // Mode 1\n\n              break;\n\n            case 2:\n              command.push.apply(command, [0x30, 0x6d, 0x00]); // Mode 2\n\n              break;\n\n            case 3:\n              command.push.apply(command, [0x20, 0x6e, 0x00]); // Mode 3\n\n              break;\n\n            case 4:\n              command.push.apply(command, [0x10, 0x6f, 0x00]); // Mode 4\n\n              break;\n          }\n\n          break;\n\n        case \"rainbow\":\n        default:\n          switch (modeNumber) {\n            case 1:\n            default:\n              command.push.apply(command, [0x40, 0x0c, 0x01]); // Mode 1\n\n              break;\n\n            case 2:\n              command.push.apply(command, [0x30, 0x0d, 0x01]); // Mode 2\n\n              break;\n\n            case 3:\n              command.push.apply(command, [0x20, 0x0e, 0x01]); // Mode 3\n\n              break;\n\n            case 4:\n              command.push.apply(command, [0x10, 0x0f, 0x01]); // Mode 4\n\n              break;\n          }\n\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetColorMode = getClickHandler_SetColorMode;\n\n  function getClickHandler_SetScaleType(rootNote) {\n    return function () {\n      var command = [0x10, 0x60];\n\n      switch (rootNote) {\n        case \"chromatic\":\n          command.push.apply(command, [0x42, 0x04]); // chromatic\n\n          break;\n\n        case \"major\":\n        default:\n          command.push.apply(command, [0x02, 0x00]); // major\n\n          break;\n\n        case \"minor\":\n          command.push.apply(command, [0x22, 0x00]); // minor\n\n          break;\n\n        case \"neutral-pentatonic\":\n          command.push.apply(command, [0x62, 0x00]); // neutral pentatonic\n\n          break;\n\n        case \"major-pentatonic\":\n          command.push.apply(command, [0x02, 0x01]); // major pentatonic\n\n          break;\n\n        case \"minor-pentatonic\":\n          command.push.apply(command, [0x22, 0x01]); // minor pentatonic\n\n          break;\n\n        case \"blues\":\n          command.push.apply(command, [0x42, 0x01]); // blues\n\n          break;\n\n        case \"harmonic-minor\":\n          command.push.apply(command, [0x42, 0x00]); // harmonic minor\n\n          break;\n\n        case \"dorian\":\n          command.push.apply(command, [0x62, 0x01]); // dorian\n\n          break;\n\n        case \"phrygian\":\n          command.push.apply(command, [0x02, 0x02]); // phrygian\n\n          break;\n\n        case \"lydian\":\n          command.push.apply(command, [0x22, 0x02]); // lydian\n\n          break;\n\n        case \"mixolydian\":\n          command.push.apply(command, [0x42, 0x02]); // mixolydian\n\n          break;\n\n        case \"locrian\":\n          command.push.apply(command, [0x62, 0x02]); // locrian\n\n          break;\n\n        case \"whole-tone\":\n          command.push.apply(command, [0x02, 0x03]); // whole tone\n\n          break;\n\n        case \"arabic-a\":\n          command.push.apply(command, [0x22, 0x02]); // arabic (a)\n\n          break;\n\n        case \"arabic-b\":\n          command.push.apply(command, [0x42, 0x03]); // arabic (b)\n\n          break;\n\n        case \"japanese\":\n          command.push.apply(command, [0x62, 0x03]); // japanese\n\n          break;\n\n        case \"ryukyu\":\n          command.push.apply(command, [0x02, 0x04]); // ryukyu\n\n          break;\n\n        case \"8-tone-spanish\":\n          command.push.apply(command, [0x22, 0x04]); // 8-tone spanish\n\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetScaleType = getClickHandler_SetScaleType;\n\n  function getClickHandler_GetSerialNumber() {\n    return function () {\n      sendSysExToAllDevices([0x78, 0x3f]);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_GetSerialNumber = getClickHandler_GetSerialNumber;\n\n  function getClickHandler_Highlight(noteName) {\n    return function () {\n      console.log(\"Highlight \" + noteName);\n\n      var _iterator5 = _createForOfIteratorHelper(outputs),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var output = _step5.value;\n          output.playNote(noteName, \"all\", {\n            duration: 1200\n            /* ms */\n\n          });\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    };\n  }\n\n  _LUMIKeys.getClickHandler_Highlight = getClickHandler_Highlight;\n\n  function getClickHandler_SetColorGlobalKey(color, red, green, blue) {\n    return function () {\n      setColorGlobalKey(color, red, green, blue);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetColorGlobalKey = getClickHandler_SetColorGlobalKey;\n\n  function setColorGlobalKey(color, red, green, blue) {\n    var command = [0x10, 0x20];\n\n    switch (color) {\n      case \"rgb\":\n        var v1 = (blue & 0x3) << 5 | 0x4;\n        var v2 = blue >> 2 & 0x3f | green & 1;\n        var v3 = green >> 1;\n        var v4 = red & 0x7f;\n        var v5 = red >> 7 | 0x7e;\n        command.push.apply(command, [v1, v2, v3, v4, v5]);\n        break;\n\n      case \"blue\":\n        command.push.apply(command, [0x64, 0x3f, 0x00, 0x00, 0x7e]); // blue\n\n        break;\n\n      case \"green\":\n        command.push.apply(command, [0x04, 0x40, 0x7f, 0x00, 0x7e]); // green\n\n        break;\n\n      case \"red\":\n        command.push.apply(command, [0x04, 0x00, 0x00, 0x7f, 0x7f]); // red\n\n        break;\n\n      case \"yellow\":\n        command.push.apply(command, [0x04, 0x40, 0x7f, 0x7f, 0x7f]); // yellow\n\n        break;\n\n      case \"magenta\":\n        command.push.apply(command, [0x64, 0x3f, 0x00, 0x7f, 0x7f]); // magenta\n\n        break;\n\n      case \"cyan\":\n        command.push.apply(command, [0x64, 0x7f, 0x7f, 0x00, 0x7e]); // cyan\n\n        break;\n\n      case \"black\":\n        command.push.apply(command, [0x04, 0x00, 0x00, 0x00, 0x7e]); // black\n\n        break;\n\n      case \"white\":\n      default:\n        command.push.apply(command, [0x64, 0x7f, 0x7f, 0x7f, 0x7f]); // white\n\n        break;\n    }\n\n    command.push(0x03);\n    sendCommandToAllDevices(command);\n  }\n\n  _LUMIKeys.setColorGlobalKey = setColorGlobalKey;\n\n  function getClickHandler_SetColorRootKey(color, red, green, blue) {\n    return function () {\n      setColorRootKey(color, red, green, blue);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetColorRootKey = getClickHandler_SetColorRootKey;\n\n  function setColorRootKey(color, red, green, blue) {\n    var command = [0x10, 0x30];\n\n    switch (color) {\n      case \"rgb\":\n        var v1 = (blue & 0x3) << 5 | 0x4;\n        var v2 = blue >> 2 & 0x3f | green & 1;\n        var v3 = green >> 1;\n        var v4 = red & 0x7f;\n        var v5 = red >> 7 | 0x7e;\n        command.push.apply(command, [v1, v2, v3, v4, v5]);\n        break;\n\n      case \"blue\":\n        command.push.apply(command, [0x64, 0x3f, 0x00, 0x00, 0x7e]); // blue\n\n        break;\n\n      case \"green\":\n        command.push.apply(command, [0x04, 0x40, 0x7f, 0x00, 0x7e]); // green\n\n        break;\n\n      case \"red\":\n        command.push.apply(command, [0x04, 0x00, 0x00, 0x7f, 0x7f]); // red\n\n        break;\n\n      case \"yellow\":\n        command.push.apply(command, [0x04, 0x40, 0x7f, 0x7f, 0x7f]); // yellow\n\n        break;\n\n      case \"magenta\":\n        command.push.apply(command, [0x64, 0x3f, 0x00, 0x7f, 0x7f]); // magenta\n\n        break;\n\n      case \"cyan\":\n        command.push.apply(command, [0x64, 0x7f, 0x7f, 0x00, 0x7e]); // cyan\n\n        break;\n\n      case \"black\":\n        command.push.apply(command, [0x04, 0x00, 0x00, 0x00, 0x7e]); // black\n\n        break;\n\n      case \"white\":\n      default:\n        command.push.apply(command, [0x64, 0x7f, 0x7f, 0x7f, 0x7f]); // white\n\n        break;\n    }\n\n    command.push(0x03);\n    sendCommandToAllDevices(command);\n  }\n\n  _LUMIKeys.setColorRootKey = setColorRootKey;\n\n  function getClickHandler_SetOctave(octaveNumber) {\n    return function () {\n      console.log(\"Set Octave Offset to \" + octaveNumber);\n      var command = [0x10, 0x40];\n\n      switch (octaveNumber) {\n        case 0:\n        default:\n          command.push.apply(command, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case 1:\n          command.push.apply(command, [0x20, 0x00, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case 2:\n          command.push.apply(command, [0x40, 0x00, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case 3:\n          command.push.apply(command, [0x60, 0x00, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case 4:\n          command.push.apply(command, [0x00, 0x01, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case 5:\n          command.push.apply(command, [0x20, 0x01, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case -1:\n          command.push.apply(command, [0x60, 0x7f, 0x7f, 0x7f, 0x7f, 0x03]);\n          break;\n\n        case -2:\n          command.push.apply(command, [0x40, 0x7f, 0x7f, 0x7f, 0x7f, 0x03]);\n          break;\n\n        case -3:\n          command.push.apply(command, [0x20, 0x7f, 0x7f, 0x7f, 0x7f, 0x03]);\n          break;\n\n        case -4:\n          command.push.apply(command, [0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x03]);\n          break;\n      }\n\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetOctave = getClickHandler_SetOctave;\n\n  function getClickHandler_PitchBend(modeNumber, enableFlag) {\n    return function () {\n      console.log(\"Set Pitch Bend for Mode \" + modeNumber + \" to \" + enableFlag);\n      var command = [0x10];\n\n      switch (modeNumber) {\n        case 1:\n        default:\n          if (enableFlag) {\n            command.push.apply(command, [0x60, 0x2c]); // Mode 1 Pitch Bend ON\n          } else {\n            command.push.apply(command, [0x60, 0x0c]); // Mode 1 Pitch Bend OFF\n          }\n\n          break;\n\n        case 2:\n          if (enableFlag) {\n            command.push.apply(command, [0x50, 0x2d]); // Mode 1 Pitch Bend ON\n          } else {\n            command.push.apply(command, [0x50, 0x0d]); // Mode 1 Pitch Bend OFF\n          }\n\n          break;\n\n        case 3:\n          if (enableFlag) {\n            command.push.apply(command, [0x40, 0x2e]); // Mode 1 Pitch Bend ON\n          } else {\n            command.push.apply(command, [0x40, 0x0e]); // Mode 1 Pitch Bend OFF\n          }\n\n          break;\n\n        case 4:\n          if (enableFlag) {\n            command.push.apply(command, [0x30, 0x2f]); // Mode 1 Pitch Bend ON\n          } else {\n            command.push.apply(command, [0x30, 0x0f]); // Mode 1 Pitch Bend OFF\n          }\n\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_PitchBend = getClickHandler_PitchBend;\n\n  function getClickHandler_PingDevice() {\n    return function () {\n      var command = [0x01, 0x03, 0x00];\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_PingDevice = getClickHandler_PingDevice;\n\n  function runCommand_001() {\n    setTimeout(function () {\n      // Highlight G ... D\n      // The below works ONLY WHEN ROLI STUDIO IS THE FRONT APP ON MACOS.\n      // Thus, we add a 5 second delay after clicking this button so we have time to switch apps! :-}\n      sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x70, 0x09, 0x00, 0x00, 0x00, 0x7e, 0x7f, 0x7f, 0x0f, 0x00]);\n      sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x60, 0x0a, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n      sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x70, 0x09, 0x00, 0x00, 0x00, 0x7e, 0x7f, 0x7f, 0x0f, 0x00]);\n      sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x60, 0x0a, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n    }, 5000);\n    /*\n        setTimeout(() => {\n            // Highlight C E G ... F\n            // The below works ONLY WHEN ROLI STUDIO IS THE FRONT APP ON MACOS.\n            // Thus, we add a 5 second delay after clicking this button so we have time to switch apps! :-}\n            sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x7e, 0x7f, 0x7f, 0x0f, 0x00]);\n            sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x40, 0x09, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n            sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x70, 0x09, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n            sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x10, 0x0b, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n            sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x7e, 0x7f, 0x7f, 0x0f, 0x00]);\n            sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x40, 0x09, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n            sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x70, 0x09, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n            sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x10, 0x0b, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n        }, 5000);\n        */\n  }\n\n  _LUMIKeys.runCommand_001 = runCommand_001;\n\n  function runCommand_002() {\n    console.log(\"runCommand_002\"); // const command = [0x77, 0x00, 0x01, 0x01, 0x00, 0x5d];\n    // ?? LUMI responds with: f000 2110 7747 0000 0000 1010 2000 0066 2521 221c 5a61 6b60 5c5a 6525 651b 6a03 4c61 4121 4c6b 4c2b 0c60 6121 0000 74f7\n\n    var command = [0x77, 0x07, 0x10, 0x02, 0x44]; // ?? LUMI responds with 7 messages!!!\n\n    /*\n        ROLI 97 bytes\tF0 00 21 10 77 47 00 00 00 00 00 13 31 48 40 00 00 00 00 00 00 00 00 00 02 00 00 00 00 43 06 40…\n        ROLI 95 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 50 00 00 00 00 00 00 00 00 00 08 00 00 00 00 18 24 01 10 00…\n        ROLI 95 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 1E 00 00 00 00 00 00 00 00 00 08 00 00 00 00 18 04 62 1F 00…\n        ROLI 95 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 44 00 00 70 7F 3F 00 00 00 00 7C 7F 7F 7F 3F 18 34 64 3F 00…\n        ROLI 95 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 48 05 00 00 00 00 00 00 00 00 20 00 00 00 00 18 64 2C 00 00…\n        ROLI 95 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 5C 05 00 00 00 00 00 00 00 00 08 00 00 00 00 18 24 4E 00 00…\n        ROLI 46 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 76 05 00 00 00 00 00 00 00 00 08 00 00 00 00 18 44 0F 00 00 00 00 00 00 00 00 40 00  00 00 00 00 5B F7\n    */\n\n    sendSysExToAllDevices(command);\n  }\n\n  _LUMIKeys.runCommand_002 = runCommand_002;\n\n  function attachLogOutput(logHandler) {\n    logOutput = logHandler;\n  }\n\n  _LUMIKeys.attachLogOutput = attachLogOutput;\n\n  function startFakeDevice() {// Send out SysEx messages to fake out ROLI Connect / Dashboard / Studio???\n    // #TODO: Is this possible????\n    // THIS PROBABLY WON'T WORK WITHOUT A NATIVE MACOS APP THAT PRETENDS TO BE A LUMI KEYS.\n    // sendSysExToAllDevices([ ... ]);\n    // setInterval(() => {\n    //     sendSysExToAllDevices([0x77, 0x47, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x6d]); // Acknowledge the PING\n    // }, 400);\n  }\n\n  _LUMIKeys.startFakeDevice = startFakeDevice;\n})(LUMIKeys || (LUMIKeys = {}));\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (LUMIKeys);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./apps/shared/midi/LUMIKeys.ts\n");

/***/ })

})