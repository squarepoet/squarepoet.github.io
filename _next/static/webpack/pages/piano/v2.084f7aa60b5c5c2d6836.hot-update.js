webpackHotUpdate_N_E("pages/piano/v2",{

/***/ "./apps/author/piano/v2/App.ts":
/*!*************************************!*\
  !*** ./apps/author/piano/v2/App.ts ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var apps_author_piano_shared_SharpsAndFlatsManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! apps/author/piano/shared/SharpsAndFlatsManager */ \"./apps/author/piano/shared/SharpsAndFlatsManager.ts\");\n/* harmony import */ var apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! apps/author/piano/v2/Highlight */ \"./apps/author/piano/v2/Highlight.ts\");\n/* harmony import */ var apps_author_piano_v2_Music__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! apps/author/piano/v2/Music */ \"./apps/author/piano/v2/Music.ts\");\n/* harmony import */ var apps_shared_Constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! apps/shared/Constants */ \"./apps/shared/Constants.ts\");\n/* harmony import */ var apps_shared_midi_MIDIFileIO__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! apps/shared/midi/MIDIFileIO */ \"./apps/shared/midi/MIDIFileIO.ts\");\n/* harmony import */ var apps_shared_midi_MIDIUtils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! apps/shared/midi/MIDIUtils */ \"./apps/shared/midi/MIDIUtils.ts\");\n/* harmony import */ var apps_shared_redux_Actions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! apps/shared/redux/Actions */ \"./apps/shared/redux/Actions.ts\");\n/* harmony import */ var apps_shared_sound_Instrument__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! apps/shared/sound/Instrument */ \"./apps/shared/sound/Instrument.ts\");\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash.throttle */ \"./node_modules/lodash.throttle/index.js\");\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_11__);\n\n\n\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\nvar MIDIEvents = __webpack_require__(/*! midievents */ \"./node_modules/midievents/src/MIDIEvents.js\");\n\nvar Keys = apps_shared_Constants__WEBPACK_IMPORTED_MODULE_6__[\"default\"].StoreKeys;\nvar TIME_THRESHOLD_FOR_GROUPING_NEARBY_NOTES = 0; // Adjust this for parsing MIDI recordings of piano performances by humans (i.e., imprecise timing).\n// Dispatch events and send data to the global store.\n\nvar dispatch = null; /////////////////////////////////////////////////////////////////////////////////\n// declare types that are defined in 3rd party libraries\n// TODO\n/////////////////////////////////////////////////////////////////////////////////\n\nvar TIME_BETWEEN_NOTEGROUPS = 250;\nvar octaveOffset = 0; // piano key numbers % 12\n\nvar blackKeys = [2, -1, 5, 7, -1, 10, 0]; // -1 is for the spaces where there are no black keys\n\nvar whiteKeys = [1, 3, 4, 6, 8, 9, 11];\nvar noteLabels = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"];\nvar sharpOrFlatModifier = 0;\nvar piano = null;\nvar Keyboard;\n\n(function (_Keyboard) {\n  var labels = _Keyboard.labels = [\"z\", \"x\", // G A B\n  \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", // C D E F G A B\n  \"/\", \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", // C D E F G A B\n  \"j\", \"k\", \"l\", \";\", \"q\", \"w\", \"e\", // C D E F G A B\n  \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", // C D E F G A B\n  \"[\", \"]\", \"\\\\\", \"1\", \"2\", \"3\", \"4\", // C D E F G A B\n  \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"-\", // C D E F G A B\n  \"=\" // C\n  ];\n  // TODO: Extract \"z\" and \"keyCodeToPianoKeyNumber\" give it a better name!\n  // #TODO: #XKWIALDZA FIGURE THIS OUT\n  // The goal is to match the Apple GarageBand Musical Typing key mapping.\n  // Type A and K should invoke the piano key \"C\".\n  // Z should be one octave lower than A. Comma should be the same as A.\n  // Q should be the same as K. I should be one octave higher than K.\n  // Allowing for a customizable offset means that when we change key signatures, we can change the offset by a couple of semitones.\n  // Anyways... figure this out yo!\n  var z = -2;\n  var keyCodeToPianoKeyNumber = _Keyboard.keyCodeToPianoKeyNumber = {\n    90: 13 + z,\n    // z => A\n    88: 15 + z,\n    // x => B\n    //\n    67: 16 + z,\n    // c => C2\n    86: 18 + z,\n    // v => D\n    66: 20 + z,\n    // b => E\n    78: 21 + z,\n    // n => F\n    77: 23 + z,\n    // m => G\n    188: 25 + z,\n    // , => A\n    190: 27 + z,\n    // . => B\n    //\n    191: 28 + z,\n    // / => C3\n    65: 30 + z,\n    // a => D\n    83: 32 + z,\n    // s => E\n    68: 33 + z,\n    // d => F\n    70: 35 + z,\n    // f => G\n    71: 37 + z,\n    // g => A\n    72: 39 + z,\n    // h => B\n    //\n    74: 40 + z,\n    // j => C4 (Middle C)\n    75: 42 + z,\n    // k => D\n    76: 44 + z,\n    // l => E\n    186: 45 + z,\n    // ; => F in Chrome\n    59: 45 + z,\n    // ; => F in Firefox\n    222: 47 + z,\n    // ' => G\n    81: 47 + z,\n    // q => G\n    87: 49 + z,\n    // w => A\n    69: 51 + z,\n    // e => B\n    //\n    82: 52 + z,\n    // r => C5\n    84: 54 + z,\n    // t => D\n    89: 56 + z,\n    // y => E\n    85: 57 + z,\n    // u => F\n    73: 59 + z,\n    // i => G\n    79: 61 + z,\n    // o => A\n    80: 63 + z,\n    // p => B\n    //\n    219: 64 + z,\n    // [ => C6\n    221: 66 + z,\n    // ] => D\n    220: 68 + z,\n    // \\ => E\n    49: 69 + z,\n    // 1 => F\n    50: 71 + z,\n    // 2 => G\n    51: 73 + z,\n    // 3 => A\n    52: 75 + z,\n    // 4 => B\n    //\n    53: 76 + z,\n    // 5 => C7\n    54: 78 + z,\n    // 6 => D\n    55: 80 + z,\n    // 7 => E\n    56: 81 + z,\n    // 8 => F\n    57: 83 + z,\n    // 9 => G\n    48: 85 + z,\n    // 0 => A\n    189: 87 + z,\n    // - => B\n    //\n    187: 88 + z // = => C8\n\n  };\n})(Keyboard || (Keyboard = {})); // #TODO Use the webmidi module instead!\n// #MIDIAWEIIZAI\n\n\nvar MIDIPianoInput;\n\n(function (_MIDIPianoInput) {\n  var numNotesPressed = 0;\n\n  function setup() {\n    if (navigator[\"requestMIDIAccess\"]) {\n      navigator[\"requestMIDIAccess\"]({\n        sysex: false\n      }).then(onMIDISuccess, onMIDIFailure);\n    } else {\n      alert(\"No MIDI support in your browser.\");\n    }\n  }\n\n  _MIDIPianoInput.setup = setup;\n\n  function onMIDISuccess(midiAccess) {\n    var midi = midiAccess;\n    var inputs = midi.inputs.values();\n\n    for (var input = inputs.next(); input && !input.done; input = inputs.next()) {\n      input.value.onmidimessage = onMIDIMessage;\n    }\n  }\n\n  function onMIDIFailure(error) {\n    console.log(\"No access to MIDI devices or your browser doesn't support WebMIDI API.\" + error);\n  }\n\n  function onMIDIMessage(message) {\n    var data = message.data; // this gives us our [command/channel, note, velocity] data.\n\n    var cmd = data[0] >> 4;\n    var channel = data[0] & 0xf; // Rightmost 4 bits.\n\n    var type = data[0] & 0xf0; // 4 bits in the second right-most position.\n\n    var note = data[1];\n    var velocity = data[2];\n    var pianoKey = note - 20;\n\n    switch (type) {\n      case 144:\n        // note on\n        console.log(\"piano key down: \" + pianoKey + \" velocity: \" + velocity);\n        App.playOneNote(pianoKey, false); // the second parameter (set to false) will bypass any sharp/flat modifiers.\n\n        numNotesPressed++;\n\n        if (numNotesPressed > 1) {\n          Song.mergeLastTwoGroups();\n        }\n\n        break;\n\n      case 128:\n        // note off\n        // console.log(\"piano key up: \" + pianoKey);\n        numNotesPressed--;\n        break;\n\n      case 224:\n        // pitch wheel\n        console.log(\"pitch wheel\"); // data[1] and data[2] indicate the amount of pitch bend.\n\n        break;\n\n      default:\n        // ignore for now\n        // console.log('MIDI data', data);\n        // console.log(`cmd: ${cmd}  channel: ${channel}  type: ${type}  note: ${note}  velocity: ${velocity}`);\n        break;\n    }\n  }\n})(MIDIPianoInput || (MIDIPianoInput = {})); //////////////////////////////////////////////////////////////////////\n// resets the key offset\n\n\nfunction resetOffset() {\n  console.log(\"Reset Offsets\");\n  octaveOffset = 0;\n  UI.drawPiano();\n}\n\nfunction resetEverything() {\n  console.log(\"Reset Everything!\");\n  octaveOffset = 0;\n  UI.Tracks.setup(1);\n  saveAndShowData();\n  Playback.stop();\n}\n\nfunction saveAndShowData() {\n  LocalStorage.saveCheckBoxes();\n  LocalStorage.saveTracks();\n  UI.showNoteGroupsForTracks();\n  UI.drawPiano();\n} ////////////////////////////////////////////////////////////\n\n\nvar LocalStorage;\n\n(function (_LocalStorage) {\n  function load() {\n    loadTracks();\n    loadVersionToggle();\n  }\n\n  _LocalStorage.load = load;\n\n  function loadVersionToggle() {\n    if (!localStorage.getItem(\"song_version\")) {\n      localStorage.setItem(\"song_version\", \"1\");\n    }\n\n    var songVersion = parseInt(localStorage.getItem(\"song_version\"));\n\n    if (songVersion < apps_shared_Constants__WEBPACK_IMPORTED_MODULE_6__[\"default\"].MIN_SONG_VERSION || songVersion > apps_shared_Constants__WEBPACK_IMPORTED_MODULE_6__[\"default\"].MAX_SONG_VERSION) {\n      songVersion = 1;\n    }\n\n    var payload = {};\n    payload[Keys.SONG_VERSION] = songVersion;\n    dispatch({\n      type: apps_shared_redux_Actions__WEBPACK_IMPORTED_MODULE_9__[\"default\"].Toggle.onSongVersionFormatChanged,\n      payload: payload\n    });\n  }\n\n  function loadTracks() {\n    try {\n      var savedTracks = JSON.parse(localStorage.getItem(\"tracks\")); // can throw a SyntaxError\n\n      var numTracks = savedTracks.length;\n      UI.Tracks.setup(numTracks);\n\n      for (var t = 0; t < numTracks; t++) {\n        var savedTrack = savedTracks[t];\n\n        var _iterator = _createForOfIteratorHelper(savedTrack),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var noteGroupString = _step.value;\n            var noteGroup = new apps_author_piano_v2_Music__WEBPACK_IMPORTED_MODULE_5__[\"NoteGroup\"](noteGroupString);\n            Song.addNoteGroupToTrack(noteGroup, t);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    } catch (e) {\n      UI.Tracks.setup(1);\n    }\n  }\n\n  function loadCheckboxes() {\n    try {\n      var savedCheckboxState = JSON.parse(localStorage.getItem(\"checkboxes\")); // can throw a SyntaxError\n\n      if (Array.isArray(savedCheckboxState) && savedCheckboxState.length === Song.getNumTracks()) {\n        UI.Tracks.setCheckedStateForAllTracks(savedCheckboxState);\n      } else {\n        throw \"OOPS\";\n      }\n    } catch (e) {\n      UI.Tracks.checkAllNonEmptyTracks();\n      LocalStorage.saveCheckBoxes();\n    }\n  }\n\n  function saveCheckBoxes() {\n    localStorage.setItem(\"checkboxes\", JSON.stringify(UI.Tracks.getCheckedStateForAllTracks()));\n  }\n\n  _LocalStorage.saveCheckBoxes = saveCheckBoxes;\n\n  function saveTracks() {\n    var tracksJSON = Song.getTracksAsJSON();\n    localStorage.setItem(\"tracks\", tracksJSON);\n  }\n\n  _LocalStorage.saveTracks = saveTracks;\n\n  function saveVersionToggle(songVersion) {\n    localStorage.setItem(\"song_version\", songVersion + \"\");\n  }\n\n  _LocalStorage.saveVersionToggle = saveVersionToggle;\n})(LocalStorage || (LocalStorage = {})); /////////////////////////////////////////////////////////////////////////////////\n\n\nvar FakeWorkerClock = /*#__PURE__*/function () {\n  function FakeWorkerClock() {\n    Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, FakeWorkerClock);\n\n    Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"isRunning\", false);\n\n    Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"interval\", null);\n\n    Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"delay\", 10);\n\n    Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"onmessage\", void 0);\n  }\n\n  Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(FakeWorkerClock, [{\n    key: \"postMessage\",\n    value: function postMessage(msg) {\n      var self = this;\n      console.log(self);\n\n      switch (msg) {\n        case \"start\":\n          console.log(\"Piano Clock Worker Started\");\n\n          if (!self.isRunning) {\n            self.isRunning = true;\n            self.interval = setInterval(function () {\n              if (self.onmessage) {\n                self.onmessage(\"tick\");\n              }\n            }, self.delay);\n          }\n\n          break;\n\n        case \"stop\":\n        default:\n          console.log(\"Piano Clock Worker Stopped\");\n          clearInterval(self.interval);\n          self.isRunning = false;\n          break;\n      }\n    }\n  }]);\n\n  return FakeWorkerClock;\n}(); ///////////////////////////////////////////////////////////////////////////\n\n\nvar Playback;\n\n(function (_Playback) {\n  // All times are in milliseconds.\n  var currSongTime = 0; // What time is our playhead pointing to?\n\n  var baseSongTime = 0; // What time did our playhead point to when we started or resumed the song?\n\n  var clockStartTime = 0;\n  var clock = new FakeWorkerClock(); // let clock = new Worker(\"./clock.worker.js\", { type: \"module\" });\n\n  var clockIsTicking = false;\n\n  clock.onmessage = function (e) {\n    playNextEvents(performance.now());\n  };\n\n  var currNoteGroupNumber = 0;\n  var isPaused = false;\n  var nextEventPlayTime = 0;\n\n  function isPlaying() {\n    return clockIsTicking;\n  }\n\n  _Playback.isPlaying = isPlaying;\n\n  function play() {\n    console.log(\"PLAY\");\n\n    if (isPaused) {\n      baseSongTime = currSongTime;\n    } else {\n      if (isPlaying()) {\n        stop();\n      } // Start the MIDI playback.\n\n\n      var _noteGroupsToPlay = Song.getNoteGroupsFromTracks();\n\n      if (_noteGroupsToPlay.length === 0) {\n        Playback.stop();\n        return; // DONE!\n      }\n\n      currNoteGroupNumber = 0;\n      currSongTime = 0;\n      baseSongTime = 0;\n      determinePlayTimeForNextEvent();\n    }\n\n    isPaused = false;\n    clockStartTime = performance.now();\n    clock.postMessage(\"start\");\n    clockIsTicking = true;\n  }\n\n  _Playback.play = play;\n\n  function pause() {\n    stopTheClock();\n    isPaused = true; // Next time, continue from where we left off.\n  }\n\n  _Playback.pause = pause;\n\n  function togglePlayPause() {\n    if (isPlaying()) {\n      pause();\n    } else {\n      play();\n    }\n  }\n\n  _Playback.togglePlayPause = togglePlayPause;\n\n  function stop() {\n    stopTheClock();\n    currNoteGroupNumber = 0;\n  }\n\n  _Playback.stop = stop;\n\n  function stopTheClock() {\n    if (isPlaying()) {\n      clock.postMessage(\"stop\");\n      clockIsTicking = false;\n    }\n  } // Will be called every ~16.67ms if your display runs at 60 FPS.\n\n\n  function playNextEvents(currTime) {\n    var noteGroupsToPlay = Song.getNoteGroupsFromTracks(); // Have we reached the end of the song?\n\n    if (currNoteGroupNumber >= noteGroupsToPlay.length) {\n      Playback.stop();\n      return; // DONE!\n    }\n\n    currSongTime = currTime - clockStartTime + baseSongTime;\n\n    while (currSongTime >= nextEventPlayTime) {\n      // Inspect the next event\n      var _noteGroup = noteGroupsToPlay[currNoteGroupNumber];\n      apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].setTrackAndNoteGroup(_noteGroup.trackNumber, _noteGroup.noteNumber);\n      playCurrentNoteGroup();\n      currNoteGroupNumber++; // advance\n      // Have we reached the end of the song?\n\n      if (currNoteGroupNumber >= noteGroupsToPlay.length) {\n        Playback.stop();\n        return; // DONE!\n      } else {\n        determinePlayTimeForNextEvent();\n      }\n    }\n  }\n\n  function determinePlayTimeForNextEvent() {\n    var noteGroupsToPlay = Song.getNoteGroupsFromTracks();\n    nextEventPlayTime = noteGroupsToPlay[currNoteGroupNumber].playTimeMillis;\n\n    if (nextEventPlayTime === -1) {\n      nextEventPlayTime = currSongTime + TIME_BETWEEN_NOTEGROUPS; // If the playTime isn't specified, we play the next note every 200ms!\n    }\n  } /////////////////////////////////////////////////////////////////////////////////\n  // Manual Playback of the song or individual tracks.\n\n\n  function validateCurrNoteGroupNumber() {\n    var noteGroupsToPlay = Song.getNoteGroupsFromTracks();\n\n    if (currNoteGroupNumber >= noteGroupsToPlay.length) {\n      currNoteGroupNumber = noteGroupsToPlay.length - 1;\n    } else if (currNoteGroupNumber < 0) {\n      currNoteGroupNumber = 0;\n    }\n  }\n\n  var playNoteAndGoBackwardInTheSong = _Playback.playNoteAndGoBackwardInTheSong = lodash_throttle__WEBPACK_IMPORTED_MODULE_11___default()(function () {\n    playNoteAndAdvanceInDirection(-1);\n  }, 150\n  /* ms */\n  );\n  var playNoteAndGoForwardInTheSong = _Playback.playNoteAndGoForwardInTheSong = lodash_throttle__WEBPACK_IMPORTED_MODULE_11___default()(function () {\n    playNoteAndAdvanceInDirection(+1);\n  }, 150\n  /* ms */\n  );\n\n  function playNoteAndAdvanceInDirection(direction) {\n    var noteGroupsToPlay = Song.getNoteGroupsFromTracks();\n\n    if (noteGroupsToPlay.length === 0) {\n      return;\n    }\n\n    validateCurrNoteGroupNumber();\n    var noteGroup = noteGroupsToPlay[currNoteGroupNumber];\n    apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].setTrackAndNoteGroup(noteGroup.trackNumber, noteGroup.noteNumber);\n    playCurrentNoteGroup();\n    currNoteGroupNumber += direction;\n    validateCurrNoteGroupNumber();\n  }\n\n  function playCurrentNoteGroup() {\n    var t = apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getCurrentTrackNumber();\n    var n = apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getCurrentNoteGroupNumber();\n    var noteGroup = Song.getNoteGroupFromTrack(n, t);\n\n    if (!noteGroup) {\n      return;\n    }\n\n    var _iterator2 = _createForOfIteratorHelper(noteGroup.notes),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var note = _step2.value;\n        App.playPianoNote(apps_shared_midi_MIDIUtils__WEBPACK_IMPORTED_MODULE_8__[\"default\"].m2p(note.midiNote), note.velocity);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var payload = {};\n    payload[Keys.PLAYED_NOTEGROUP_ID] = Song.getNoteGroupID(t, n);\n    dispatch({\n      type: apps_shared_redux_Actions__WEBPACK_IMPORTED_MODULE_9__[\"default\"].Song.onPlayNoteGroup,\n      payload: payload\n    });\n  }\n\n  var playAndGoBackwardOnCurrentTrack = _Playback.playAndGoBackwardOnCurrentTrack = lodash_throttle__WEBPACK_IMPORTED_MODULE_11___default()(function () {\n    playCurrentNoteGroup();\n    apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].prevNoteGroup();\n  }, 150\n  /* ms */\n  );\n  var playAndGoForwardOnCurrentTrack = _Playback.playAndGoForwardOnCurrentTrack = lodash_throttle__WEBPACK_IMPORTED_MODULE_11___default()(function () {\n    playCurrentNoteGroup();\n    apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].nextNoteGroup();\n  }, 150\n  /* ms */\n  );\n})(Playback || (Playback = {}));\n\nvar UI;\n\n(function (_UI) {\n  function setupCopyHandler() {\n    document.querySelector(\"html\").addEventListener(\"copy\", function (e) {\n      e.preventDefault();\n      console.log(\"COPY\");\n\n      if (e.clipboardData) {\n        var text = UI.Tracks.getTextFileFromTracks();\n        e.clipboardData.setData(\"text/plain\", text);\n      }\n    });\n    document.querySelector(\"html\").addEventListener(\"cut\", function (e) {\n      e.preventDefault();\n      console.log(\"CUT\");\n\n      if (e.clipboardData) {\n        var text = UI.Tracks.getTextFileFromTracks();\n        e.clipboardData.setData(\"text/plain\", text);\n      }\n\n      resetEverything(); // Set the text fields to empty strings.\n    });\n  }\n\n  _UI.setupCopyHandler = setupCopyHandler;\n\n  function showNoteGroupsForTracks() {\n    UI.Tracks.checkAllNonEmptyTracks();\n    apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].update();\n    var payload = {};\n    payload[Keys.UPDATED_TRACKS_LIST] = Song.getRecentlyUpdatedTrackNumbersAsArray();\n    dispatch({\n      type: apps_shared_redux_Actions__WEBPACK_IMPORTED_MODULE_9__[\"default\"].Song.onTracksUpdated,\n      payload: payload\n    });\n    Song.resetRecentlyUpdatedTrackNumbers();\n  }\n\n  _UI.showNoteGroupsForTracks = showNoteGroupsForTracks;\n\n  function scrollNoteGroupIntoView(trackNumber, noteGroupNumber) {\n    var noteGroupID = Song.getNoteGroupID(trackNumber, noteGroupNumber); // Scroll the divs all the way to the right to make sure the most recent NoteGroups are visible.\n\n    var element = document.querySelector(\"#\".concat(noteGroupID));\n\n    if (element) {\n      element.scrollIntoView();\n    }\n  }\n\n  _UI.scrollNoteGroupIntoView = scrollNoteGroupIntoView;\n\n  function onKeyDown(e) {\n    if (!piano) {\n      console.log(\"UI.onKeyDown: Piano has not been initialized.\");\n      return;\n    }\n\n    var keyCode = e.keyCode;\n    var metaKeyIsDown = e.metaKey; // e.metaKey => CMD (91 is LEFT CMD & 93 is RIGHT CMD)\n\n    var ctrlKeyIsDown = e.ctrlKey;\n    var shiftKeyIsDown = e.shiftKey;\n\n    if (metaKeyIsDown) {\n      if (keyCode == 37 || keyCode == 39) {// DO NOTHING. Fall through so that we can do CMD + LEFT ARROW and CMD + RIGHT ARROW.\n      } else {\n        // Ignore when we have the CMD pressed down, so that we can use the browser's hotkeys.\n        return;\n      }\n    } // CTRL => FLAT and SHIFT => SHARP\n\n\n    sharpOrFlatModifier = 0;\n\n    if (ctrlKeyIsDown) {\n      sharpOrFlatModifier = -1;\n    }\n\n    if (shiftKeyIsDown) {\n      sharpOrFlatModifier = +1;\n    }\n\n    e.preventDefault();\n\n    switch (keyCode) {\n      case 13:\n        // ENTER\n        Playback.togglePlayPause();\n        break;\n\n      case 33:\n        // PAGE UP | fn + UP_ARROW\n        // Up an octave.\n        octaveOffset++;\n\n        if (octaveOffset > 0) {\n          octaveOffset = 0;\n        }\n\n        UI.drawPiano();\n        break;\n\n      case 34:\n        // PAGE DOWN | fn + DOWN_ARROW\n        console.log(\"fn + DOWN\"); // Down an octave.\n\n        octaveOffset--;\n\n        if (octaveOffset < -1) {\n          octaveOffset = -1;\n        }\n\n        UI.drawPiano();\n        break;\n\n      case 36:\n        // HOME | fn + LEFT_ARROW\n        Playback.playNoteAndGoBackwardInTheSong(); // Find the previous note to play via round robin.\n\n        break;\n\n      case 35:\n        // END | fn + RIGHT_ARROW\n        Playback.playNoteAndGoForwardInTheSong(); // Find the next note to play via round robin.\n\n        break;\n\n      case 112:\n        console.log(\"F1\");\n        break;\n\n      case 113:\n        console.log(\"F2\");\n        break;\n\n      case 114:\n        console.log(\"F3\");\n        break;\n\n      case 115:\n        console.log(\"F4\");\n        break;\n\n      case 116:\n        console.log(\"F5\");\n        break;\n\n      case 192:\n        // ~ == SHIFT + `\n        console.log(\"SHIFT + `\");\n        resetEverything();\n        break;\n\n      case 32:\n        // SPACE BAR\n        console.log(\"SPACE\"); // xxx\n\n        break;\n\n      case 27:\n        // ESC\n        console.log(\"ESC\");\n\n        if (shiftKeyIsDown) {\n          // SHIFT + ESC\n          resetEverything();\n        } else {\n          // ESC resets the octave offsets\n          resetOffset();\n        }\n\n        break;\n\n      case 8:\n        // BACKSPACE/DEL\n        Song.deleteLastGroup();\n        break;\n\n      case 9:\n        // TAB\n        Song.mergeLastTwoGroups();\n        break;\n\n      case 38:\n        // UP\n        apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].prevTrack();\n        break;\n\n      case 40:\n        // DOWN\n        apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].nextTrack();\n        break;\n\n      case 37:\n        // LEFT\n        if (metaKeyIsDown) {\n          // CMD + LEFT jumps to the first notegroup of the currently highlighted track.\n          apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].firstNoteGroup();\n        } else if (shiftKeyIsDown) {\n          // SHIFT + LEFT\n          Playback.playAndGoBackwardOnCurrentTrack();\n        } else {\n          apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].prevNoteGroup();\n        }\n\n        break;\n\n      case 39:\n        // RIGHT\n        if (metaKeyIsDown) {\n          // CMD + RIGHT jumps to the last notegroup of the currently highlighted track.\n          apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].lastNoteGroup();\n        } else if (shiftKeyIsDown) {\n          // SHIFT + RIGHT\n          Playback.playAndGoForwardOnCurrentTrack();\n        } else {\n          apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].nextNoteGroup();\n        }\n\n        break;\n\n      default:\n        if (Keyboard.keyCodeToPianoKeyNumber.hasOwnProperty(keyCode)) {\n          App.playOneNote(Keyboard.keyCodeToPianoKeyNumber[keyCode]);\n        }\n\n        break;\n    }\n  }\n\n  _UI.onKeyDown = onKeyDown;\n\n  function onKeyUp(e) {\n    // Released CTRL or SHIFT\n    if (e.ctrlKey) {\n      sharpOrFlatModifier = 0;\n    } else if (e.shiftKey) {\n      sharpOrFlatModifier = 0;\n    }\n  }\n\n  _UI.onKeyUp = onKeyUp;\n  var WHITE_KEY_WIDTH = _UI.WHITE_KEY_WIDTH = 20;\n  var WHITE_KEY_HEIGHT = _UI.WHITE_KEY_HEIGHT = 120;\n  var BLACK_KEY_WIDTH = _UI.BLACK_KEY_WIDTH = 16;\n  var BLACK_KEY_HEIGHT = _UI.BLACK_KEY_HEIGHT = 72;\n  var context2d = null;\n  var context2dWidth = 0;\n  var context2dHeight = 0;\n\n  function setCanvasContext(c2d, c2dWidth, c2dHeight) {\n    context2d = c2d;\n    context2dWidth = c2dWidth;\n    context2dHeight = c2dHeight;\n  }\n\n  _UI.setCanvasContext = setCanvasContext;\n\n  function drawPiano() {\n    if (!context2d) {\n      return;\n    }\n\n    var c = context2d; // clear the background\n\n    c.fillStyle = \"#333\";\n    c.fillRect(0, 0, context2dWidth, context2dHeight);\n    drawWhiteKeys(c);\n    drawBlackKeys(c);\n    drawKeyLabels(c);\n    drawMostRecentGroup(c);\n  }\n\n  _UI.drawPiano = drawPiano;\n\n  function drawWhiteKeys(c) {\n    c.strokeStyle = \"#000\";\n    c.lineWidth = 0.2;\n    c.fillStyle = \"#FFF\";\n\n    for (var k = 0; k < 52; k++) {\n      c.fillRect(k * WHITE_KEY_WIDTH, 0, WHITE_KEY_WIDTH, WHITE_KEY_HEIGHT);\n      c.strokeRect(k * WHITE_KEY_WIDTH, 0, WHITE_KEY_WIDTH, WHITE_KEY_HEIGHT);\n    } // Highlight Middle C in faint red.\n\n\n    c.fillStyle = \"#FCC\";\n    c.fillRect(23 * WHITE_KEY_WIDTH, 0, WHITE_KEY_WIDTH, WHITE_KEY_HEIGHT);\n  }\n\n  function drawBlackKeys(c) {\n    c.fillStyle = \"#323232\";\n\n    for (var octave = 0; octave < 7; octave++) {\n      for (var key = 0; key < 7; key++) {\n        // A# = key 0; C# = key 2; G# = key 6\n        if (key == 1 || key == 4) {\n          continue; // skip B# and E#\n        }\n\n        c.fillRect(12 + 20 * (key + octave * 7), 0, BLACK_KEY_WIDTH, BLACK_KEY_HEIGHT);\n      }\n    } // highest black key\n\n\n    c.fillRect(12 + 7 * 7 * 20, 0, 16, 72);\n  }\n\n  function drawKeyLabels(c) {\n    c.textAlign = \"center\"; // draw the piano key numbers for the white keys\n    // also draw the note name\n\n    for (var k = 1; k <= 88; k++) {\n      var remainder = k % 12;\n\n      if (whiteKeys.includes(remainder)) {\n        var octave = Math.floor(k / 12);\n        var whiteKeyNoteIndex = whiteKeys.indexOf(remainder);\n        var whiteKeyIndex = octave * 7 + whiteKeyNoteIndex;\n        var noteLabel = noteLabels[whiteKeyNoteIndex];\n\n        if (noteLabel == \"c\") {\n          c.font = \"bold 13px Tahoma\";\n        } else {\n          c.font = \"13px Tahoma\";\n        }\n\n        c.fillStyle = \"#777\";\n        c.fillText(noteLabel, whiteKeyIndex * 20 + 10, 100);\n        c.font = \"12px Consolas\";\n        c.fillStyle = \"#999\";\n        c.fillText(k, whiteKeyIndex * 20 + 10, 115);\n      }\n    }\n\n    c.font = \"15px Consolas\";\n    c.fillStyle = \"#FFF\";\n    c.textAlign = \"center\"; // draw the current character to press, under the correct key!\n\n    var offset = (octaveOffset + 1) * 7; // start on A (key 13)\n\n    var len = Keyboard.labels.length;\n\n    for (var i = 0; i < len; i++) {\n      c.fillText(Keyboard.labels[i], (i + offset) * 20 + 10, 140);\n    }\n  } // draw the highlighted group?\n\n\n  function drawMostRecentGroup(c) {\n    var trackNumber = apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getCurrentTrackNumber();\n    var noteGroupNumber = apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getCurrentNoteGroupNumber();\n    var lastGroup = Song.getNoteGroupFromTrack(noteGroupNumber, trackNumber);\n\n    if (!lastGroup) {\n      return;\n    }\n\n    var notes = lastGroup.notes;\n\n    var _iterator3 = _createForOfIteratorHelper(notes),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var n = _step3.value;\n        var remainder = n.pianoNote % 12;\n        var octaveIndex = Math.floor((n.pianoNote - 1) / 12);\n        c.beginPath();\n\n        if (blackKeys.includes(remainder)) {\n          // is it a black key?\n          var blackKeyIndex = octaveIndex * 7 + blackKeys.indexOf(remainder); // black keys are 16px wide\n\n          c.arc(blackKeyIndex * 20 + 20, 60, 6, 0, 2 * Math.PI, false);\n        } else {\n          // if white, we map it to one of the 52 white keys\n          var whiteKeyIndex = octaveIndex * 7 + whiteKeys.indexOf(remainder); // white keys are 20px wide\n\n          c.arc(whiteKeyIndex * 20 + 10, 96, 7, 0, 2 * Math.PI, false);\n        }\n\n        c.fillStyle = \"rgba(220,220,10,.82)\"; // fill the yellow circle\n\n        c.fill();\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  } ////////////////////////////////////////////////////////////\n\n\n  var Tracks;\n\n  (function (_Tracks) {\n    // Bindings to our React component state.\n    // We can query whether a track's checkbox isChecked.\n    // We can call setChecked to change the track's checked state.\n    var isCheckedCallbacks = null;\n    var setCheckedCallbacks = null;\n\n    var defaultIsCheckedCB = function defaultIsCheckedCB() {\n      console.log(\"DEFAULT IS-CHECKED. RETURN TRUE.\");\n      return true;\n    };\n\n    var defaultSetCheckedCB = function defaultSetCheckedCB(checked) {\n      console.log(\"DEFAULT SET CHECKED: \" + checked);\n      /* NO-OP */\n    };\n\n    function setup(numTracks) {\n      isCheckedCallbacks = new Array(numTracks);\n      setCheckedCallbacks = new Array(numTracks);\n      isCheckedCallbacks.fill(defaultIsCheckedCB);\n      setCheckedCallbacks.fill(defaultSetCheckedCB);\n      Song.reset();\n\n      for (var t = 0; t < numTracks; t++) {\n        Song.addTrack();\n      }\n\n      apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].setupIndexes(numTracks);\n    }\n\n    _Tracks.setup = setup;\n\n    function addNewTrack() {}\n\n    _Tracks.addNewTrack = addNewTrack;\n\n    function getTextFileFromTracks() {\n      console.log(\"getTextFileFromTracks Song Version: \" + App.getSongVersion());\n      var noteGroups = Song.getNoteGroupsFromTracks();\n\n      if (App.getSongVersion() === 1) {\n        var noteGroupV1Strings = [];\n        noteGroups.forEach(function (noteGroup) {\n          noteGroupV1Strings.push(noteGroup.toStringV1());\n        });\n        return noteGroupV1Strings.join(\" \");\n      } else {\n        // songVersion === 2\n        return noteGroups.join(\" \");\n      }\n    }\n\n    _Tracks.getTextFileFromTracks = getTextFileFromTracks;\n\n    function getTrackNumbersToIncludeInMIDIFile() {\n      var trackNumbersToInclude = [];\n      var numTracks = Song.getNumTracks();\n\n      for (var trackNumber = 0; trackNumber < numTracks; trackNumber++) {\n        if (Tracks.isChecked(trackNumber)) {\n          trackNumbersToInclude.push(trackNumber);\n        }\n      }\n\n      return trackNumbersToInclude;\n    }\n\n    _Tracks.getTrackNumbersToIncludeInMIDIFile = getTrackNumbersToIncludeInMIDIFile;\n\n    function setTrackCheckedCallbacks(trackNumber, isTrackChecked, setTrackChecked) {\n      console.log(\"setTrackCheckedCallbacks \" + trackNumber + \" \" + typeof isTrackChecked + \" \" + typeof setTrackChecked);\n\n      if (!isCheckedCallbacks) {\n        isCheckedCallbacks = [];\n      }\n\n      isCheckedCallbacks[trackNumber] = isTrackChecked;\n\n      if (!setCheckedCallbacks) {\n        setCheckedCallbacks = [];\n      }\n\n      setCheckedCallbacks[trackNumber] = setTrackChecked;\n    }\n\n    _Tracks.setTrackCheckedCallbacks = setTrackCheckedCallbacks;\n\n    function setChecked(trackNumber, checked) {\n      console.log(\"setChecked \" + trackNumber + \" => \" + checked);\n      var setCheckedCB = setCheckedCallbacks[trackNumber];\n\n      if (!setCheckedCB) {\n        console.log(\"NULL SETCHECKED CALLBACK\"); // DO NOTHING\n      } else {\n        // #TODO: If the value has not changed, do nothing.\n        setCheckedCB(checked);\n        LocalStorage.saveCheckBoxes();\n        Song.resetCache();\n      }\n    }\n\n    _Tracks.setChecked = setChecked;\n\n    function isChecked(trackNumber) {\n      var isCheckedCB = isCheckedCallbacks[trackNumber];\n\n      if (!isCheckedCB) {\n        // null or undefined\n        return false;\n      } else {\n        return isCheckedCB();\n      }\n    }\n\n    _Tracks.isChecked = isChecked;\n\n    function checkAllNonEmptyTracks() {\n      var numTracks = Song.getNumTracks();\n\n      for (var trackNumber = 0; trackNumber < numTracks; trackNumber++) {\n        if (Song.getNumNoteGroupsInTrack(trackNumber) > 0) {\n          Tracks.setChecked(trackNumber, true);\n        } else {\n          Tracks.setChecked(trackNumber, false);\n        }\n      }\n    }\n\n    _Tracks.checkAllNonEmptyTracks = checkAllNonEmptyTracks;\n\n    function getCheckedStateForAllTracks() {\n      return isCheckedCallbacks.map(function (isCheckedCB) {\n        if (!isCheckedCB) {\n          return false; // If the callback is undefined or null, we consider that track \"NOT CHECKED\".\n        } else {\n          var checked = isCheckedCB();\n          console.log(checked);\n          return checked; // Otherwise, we call the callback to determine the current checked state.\n        }\n      });\n    }\n\n    _Tracks.getCheckedStateForAllTracks = getCheckedStateForAllTracks;\n\n    function setCheckedStateForAllTracks(checkedStateForAllTracks) {\n      for (var trackNumber = 0; trackNumber < checkedStateForAllTracks.length; trackNumber++) {\n        var checkedState = checkedStateForAllTracks[trackNumber];\n        Tracks.setChecked(trackNumber, checkedState);\n      }\n    }\n\n    _Tracks.setCheckedStateForAllTracks = setCheckedStateForAllTracks;\n  })(Tracks || (Tracks = _UI.Tracks || (_UI.Tracks = {})));\n})(UI || (UI = {})); ///////////////////////////////////////////////////////////////////////////\n\n\nvar Song;\n\n(function (_Song) {\n  // Support multi track MIDI songs.\n  // When we compose by hand, stick everything in track 0.\n  var tracks = [];\n  var cachedNoteGroups = null;\n  var recentlyUpdatedTrackNumbers = new Set();\n\n  function reset() {\n    tracks.length = 0;\n    Song.resetRecentlyUpdatedTrackNumbers();\n    Song.resetCache();\n  }\n\n  _Song.reset = reset;\n\n  function resetCache() {\n    cachedNoteGroups = null;\n  }\n\n  _Song.resetCache = resetCache;\n\n  function addTrack() {\n    var track = new apps_author_piano_v2_Music__WEBPACK_IMPORTED_MODULE_5__[\"Track\"]();\n    track.trackNumber = tracks.length;\n    tracks.push(track);\n    recentlyUpdatedTrackNumbers.add(track.trackNumber);\n  }\n\n  _Song.addTrack = addTrack;\n\n  function addNoteGroupToTrack(noteGroup, trackNumber) {\n    Song.resetCache(); // Every time we modify the tracks, we need to invalidate the cache.\n\n    var track = tracks[trackNumber];\n    noteGroup.trackNumber = trackNumber;\n    noteGroup.noteNumber = track.length;\n    track.push(noteGroup);\n    recentlyUpdatedTrackNumbers.add(trackNumber);\n    return tracks[trackNumber].length; // We call saveAndShowData() elsewhere!\n  }\n\n  _Song.addNoteGroupToTrack = addNoteGroupToTrack;\n\n  function getNumTracks() {\n    return tracks.length;\n  }\n\n  _Song.getNumTracks = getNumTracks;\n\n  function getNumNoteGroupsInTrack(trackNumber) {\n    if (trackNumber < 0 || trackNumber >= tracks.length) {\n      return 0;\n    } else {\n      return tracks[trackNumber].length;\n    }\n  }\n\n  _Song.getNumNoteGroupsInTrack = getNumNoteGroupsInTrack;\n\n  function isTrackEmpty(trackNumber) {\n    return getNumNoteGroupsInTrack(trackNumber) === 0;\n  }\n\n  _Song.isTrackEmpty = isTrackEmpty;\n\n  function getTracksAsJSON() {\n    return JSON.stringify(tracks);\n  }\n\n  _Song.getTracksAsJSON = getTracksAsJSON;\n\n  function mergeLastTwoGroups() {\n    var trackNumber = apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getCurrentTrackNumber();\n    var currTrack = tracks[trackNumber];\n\n    if (currTrack.length >= 2) {\n      var mergedNoteGroup = apps_author_piano_v2_Music__WEBPACK_IMPORTED_MODULE_5__[\"NoteGroup\"].merge(currTrack.pop(), currTrack.pop());\n      Song.addNoteGroupToTrack(mergedNoteGroup, trackNumber);\n      apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].setTrackAndNoteGroup(trackNumber, currTrack.length - 1);\n      recentlyUpdatedTrackNumbers.add(trackNumber);\n      saveAndShowData();\n    }\n  }\n\n  _Song.mergeLastTwoGroups = mergeLastTwoGroups;\n\n  function deleteLastGroup() {\n    var trackNumber = apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getCurrentTrackNumber();\n    tracks[trackNumber].pop();\n    apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].setTrackAndNoteGroup(trackNumber, tracks[trackNumber].length - 1);\n    recentlyUpdatedTrackNumbers.add(trackNumber);\n    saveAndShowData();\n  }\n\n  _Song.deleteLastGroup = deleteLastGroup;\n\n  function getNoteGroupFromTrack(noteGroupNumber, trackNumber) {\n    if (trackNumber < 0 || trackNumber >= tracks.length) {\n      return null;\n    }\n\n    var track = tracks[trackNumber];\n\n    if (noteGroupNumber < 0 || noteGroupNumber >= track.length) {\n      return null;\n    }\n\n    return track[noteGroupNumber];\n  }\n\n  _Song.getNoteGroupFromTrack = getNoteGroupFromTrack;\n\n  function getNoteGroupsFromTracks() {\n    if (cachedNoteGroups !== null) {\n      return cachedNoteGroups;\n    }\n\n    console.log(\"Recompute Cached NoteGroups!!!\");\n    var noteGroups = [];\n    var currTimeMillis = 0; // Used when our NoteGroups don't have valid timing information (i.e., manual entry).\n\n    var noteGroupPointerForTrack = []; // Keep pointers to the current NoteGroups we are looking at. One pointer/cursor per track.\n\n    var numTracks = tracks.length;\n\n    for (var trackNumber = 0; trackNumber < numTracks; trackNumber++) {\n      noteGroupPointerForTrack.push(0); // Start a index 0 (the first NoteGroup of each track).\n    } // Round robin between the tracks until we insert all the NoteGroups properly. Always choose the NoteGroup with the minimum playTime.\n\n\n    while (true) {\n      var minPlayTime = Number.MAX_VALUE;\n      var nextNoteGroup = null;\n      var nextNoteGroupTrack = null; // Which track contains the next note group to play?\n      // Loop through all the tracks to find the next NoteGroup to play.\n\n      for (var _trackNumber = 0; _trackNumber < numTracks; _trackNumber++) {\n        var currTrack = tracks[_trackNumber];\n        var currTrackLength = currTrack.length;\n        var currNoteGroupPointer = noteGroupPointerForTrack[_trackNumber];\n\n        if (currTrackLength === 0 || !UI.Tracks.isChecked(_trackNumber) || currNoteGroupPointer >= currTrackLength) {\n          // Ignore this track if:\n          //   it is empty\n          //   it is not checked\n          //   we have already finished looking at it\n          continue;\n        } else {\n          var _noteGroup2 = currTrack[currNoteGroupPointer];\n\n          if (_noteGroup2.playTimeMillis < minPlayTime) {\n            minPlayTime = _noteGroup2.playTimeMillis;\n            nextNoteGroup = _noteGroup2;\n            nextNoteGroupTrack = currTrack;\n          }\n        }\n      } // If we did not find any NoteGroups, we're done!\n\n\n      if (!nextNoteGroup) {\n        break; // break out of the while(true) loop.\n      } else {\n        var ng = nextNoteGroup.copy();\n\n        if (ng.playTimeMillis === -1) {\n          ng.playTimeMillis = currTimeMillis;\n        }\n\n        var t = nextNoteGroupTrack.trackNumber;\n        var noteNumber = noteGroupPointerForTrack[t];\n        ng.noteNumber = noteNumber;\n        noteGroupPointerForTrack[t]++;\n        noteGroups.push(ng);\n        currTimeMillis = ng.playTimeMillis + TIME_BETWEEN_NOTEGROUPS;\n      }\n    }\n\n    cachedNoteGroups = noteGroups;\n    return noteGroups;\n  }\n\n  _Song.getNoteGroupsFromTracks = getNoteGroupsFromTracks;\n\n  function getNoteGroupID(trackNumber, noteGroupNumber) {\n    return \"t\".concat(trackNumber, \"_n\").concat(noteGroupNumber);\n  }\n\n  _Song.getNoteGroupID = getNoteGroupID;\n\n  function getRecentlyUpdatedTrackNumbersAsArray() {\n    return Array.from(recentlyUpdatedTrackNumbers);\n  }\n\n  _Song.getRecentlyUpdatedTrackNumbersAsArray = getRecentlyUpdatedTrackNumbersAsArray;\n\n  function resetRecentlyUpdatedTrackNumbers() {\n    recentlyUpdatedTrackNumbers.clear();\n  }\n\n  _Song.resetRecentlyUpdatedTrackNumbers = resetRecentlyUpdatedTrackNumbers;\n})(Song || (Song = {}));\n\nvar _Playback_NS = Playback;\nvar _Song_NS = Song;\nvar _UI_NS = UI;\nvar _Tracks_NS = UI.Tracks;\nvar App;\n\n(function (_App) {\n  var Playback = _App.Playback = _Playback_NS;\n  var Song = _App.Song = _Song_NS;\n  var UI = _App.UI = _UI_NS;\n  var Tracks = _App.Tracks = _Tracks_NS;\n  var songVersion = apps_shared_Constants__WEBPACK_IMPORTED_MODULE_6__[\"default\"].MIN_SONG_VERSION; // We need to update this every time the redux store changes!\n\n  function getSongVersion() {\n    return songVersion;\n  }\n\n  _App.getSongVersion = getSongVersion;\n\n  function setSongVersion(v) {\n    songVersion = v;\n  }\n\n  _App.setSongVersion = setSongVersion;\n\n  function setDispatchFunction(d) {\n    dispatch = d;\n  }\n\n  _App.setDispatchFunction = setDispatchFunction;\n\n  function start() {\n    console.log(\"App.start()\");\n    MIDIPianoInput.setup();\n    LocalStorage.load();\n    UI.showNoteGroupsForTracks();\n    UI.setupCopyHandler();\n    UI.drawPiano();\n  }\n\n  _App.start = start;\n\n  function startAudio() {\n    piano = new apps_shared_sound_Instrument__WEBPACK_IMPORTED_MODULE_10__[\"default\"]();\n  }\n\n  _App.startAudio = startAudio;\n\n  function saveSongVersionToLocalStorage(ver) {\n    App.setSongVersion(ver);\n    console.log(\"saveSongVersionToLocalStorage \" + ver);\n    LocalStorage.saveVersionToggle(ver);\n  }\n\n  _App.saveSongVersionToLocalStorage = saveSongVersionToLocalStorage;\n\n  function fillTracksWithNoteGroupsExtractedFromMIDIEvents(midiFile, midiEvents) {\n    console.log(\"MIDI File Passed In: \" + midiFile);\n\n    if (!midiFile) {\n      return;\n    }\n\n    UI.Tracks.setup(midiFile.tracks.length); // Remember the most recently processed event so that we can merge notes that are played at the same time and on the same track.\n\n    var lastNoteGroup = null;\n    var lastPlayTime = -1;\n    var lastTrackNumber = -1; // Convert from MIDI events to NoteGroups\n\n    var _iterator4 = _createForOfIteratorHelper(midiEvents),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var event = _step4.value;\n        var _type = event.type;\n        var subtype = event.subtype; // let status = (event.subtype << 4) + event.channel;\n        // let statusCodeHexString = '0x' + status.toString(16).toUpperCase();\n\n        var playTime = event.playTime; // time in milliseconds\n\n        playTime = Math.round(playTime * 1000) / 1000; // round it to the nearest 0.001\n\n        var midiNoteNum = event.param1;\n        var _velocity = event.param2;\n        var pianoNoteNum = apps_shared_midi_MIDIUtils__WEBPACK_IMPORTED_MODULE_8__[\"default\"].m2p(midiNoteNum);\n        var noteToPlay = new apps_author_piano_v2_Music__WEBPACK_IMPORTED_MODULE_5__[\"Note\"](pianoNoteNum, 1.0\n        /* duration */\n        , _velocity); // TODO: Support duration someday?\n\n        console.log(\"VELOCITY \" + _velocity);\n        var trackNumber = event.track; // possibly undefined!\n\n        if (!trackNumber) {\n          trackNumber = 0; // We will assign events with undefined trackNumbers to track 0.\n        }\n\n        if (subtype === MIDIEvents.EVENT_MIDI_NOTE_ON) {\n          if (playTime <= lastPlayTime + TIME_THRESHOLD_FOR_GROUPING_NEARBY_NOTES && trackNumber === lastTrackNumber) {\n            // Merge all notes starting at the same time and on the same track into a single NoteGroup.\n            lastNoteGroup.addNote(noteToPlay);\n          } else {\n            var _noteGroup3 = new apps_author_piano_v2_Music__WEBPACK_IMPORTED_MODULE_5__[\"NoteGroup\"](noteToPlay, playTime, trackNumber);\n\n            Song.addNoteGroupToTrack(_noteGroup3, trackNumber);\n            lastNoteGroup = _noteGroup3;\n            lastTrackNumber = trackNumber;\n            lastPlayTime = playTime;\n          }\n        } else {\n          // OTHER EVENTS\n          console.log(\"Unhandled Event:\");\n          apps_shared_midi_MIDIFileIO__WEBPACK_IMPORTED_MODULE_7__[\"default\"].printTypeAndSubtype(_type, subtype);\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    saveAndShowData();\n  }\n\n  _App.fillTracksWithNoteGroupsExtractedFromMIDIEvents = fillTracksWithNoteGroupsExtractedFromMIDIEvents;\n\n  function getDownloadData_TEXT() {\n    // GENERATE THE TEXT FILE FROM OUR TRACKS. BASE 64 ENCODE IT.\n    // A textual representation of the song:\n    //   V1 => e.g., 40 42 44 45 40.47\n    //   V2 => e.g., [24.36 @ 0] [17.29 @ 2730] [36 @ 2904] [41 @ 3029] [44 @ 3152]\n    var text = Tracks.getTextFileFromTracks();\n    var base64Text = btoa(text); // base 64 encoding\n\n    return base64Text;\n  }\n\n  _App.getDownloadData_TEXT = getDownloadData_TEXT;\n\n  function getDownloadData_MIDI() {\n    // GENERATE THE MIDI FILE FROM OUR TRACKS. BASE 64 ENCODE IT.\n    var trackNumbersToInclude = Tracks.getTrackNumbersToIncludeInMIDIFile();\n    var midiFile = apps_shared_midi_MIDIFileIO__WEBPACK_IMPORTED_MODULE_7__[\"default\"].createFileFromTracks(trackNumbersToInclude, Song.getNoteGroupsFromTracks());\n    var base64Text = btoa(midiFile); // base 64 encoding\n\n    return base64Text;\n  }\n\n  _App.getDownloadData_MIDI = getDownloadData_MIDI;\n\n  function playOneNote(pianoKeyBeforeModifiers) {\n    var applyModifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    // get the name of the note we are about to play\n    var remainder = pianoKeyBeforeModifiers % 12;\n    var whiteKeyNoteIndex = whiteKeys.indexOf(remainder);\n    var noteLabel = noteLabels[whiteKeyNoteIndex];\n    var modifier = 0;\n\n    if (applyModifiers) {\n      modifier = sharpOrFlatModifier; // The user is holding down SHIFT or CTRL\n      // is this note auto-sharped, due to the key signature?\n\n      if (apps_author_piano_shared_SharpsAndFlatsManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isNoteSharp(noteLabel)) {\n        modifier++; // raise the sharp a half-step!\n      } // is this note auto-flatted, due to the key signature?\n\n\n      if (apps_author_piano_shared_SharpsAndFlatsManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isNoteFlat(noteLabel)) {\n        modifier--; // lower the note a half-step!\n      }\n    }\n\n    var pianoKeyNumber = pianoKeyBeforeModifiers + modifier + octaveOffset * 12;\n\n    if (pianoKeyNumber < 1 || pianoKeyNumber > 88) {\n      return;\n    }\n\n    var trackNumber = apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getCurrentTrackNumber();\n    var trackLength = Song.addNoteGroupToTrack(new apps_author_piano_v2_Music__WEBPACK_IMPORTED_MODULE_5__[\"NoteGroup\"](new apps_author_piano_v2_Music__WEBPACK_IMPORTED_MODULE_5__[\"Note\"](pianoKeyNumber)), trackNumber);\n    Tracks.setChecked(trackNumber, true);\n    App.playPianoNote(pianoKeyNumber);\n    apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].setTrackAndNoteGroup(trackNumber, trackLength - 1);\n    saveAndShowData();\n  }\n\n  _App.playOneNote = playOneNote;\n\n  function playPianoNote(pianoKeyNumber) {\n    var velocity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 127.0;\n\n    if (piano === null) {\n      console.log(\"playPianoNote: Piano has not been initialized.\");\n      return;\n    }\n\n    var duration = 1.0; // 0.125, 0.25, 0.5, 1.0, 2.0;\n\n    piano.play(pianoKeyNumber, duration, velocity / 127.0);\n  }\n\n  _App.playPianoNote = playPianoNote;\n\n  function loadFirstFile(fileList) {\n    if (fileList.length > 0) {\n      var file = fileList[0]; // Read the first file.\n\n      apps_shared_midi_MIDIFileIO__WEBPACK_IMPORTED_MODULE_7__[\"default\"].readFileAsync(file).then(function (fileName) {\n        dispatch({\n          type: apps_shared_redux_Actions__WEBPACK_IMPORTED_MODULE_9__[\"default\"].FileChooser.onFileLoaded\n        });\n      });\n    }\n  }\n\n  _App.loadFirstFile = loadFirstFile;\n})(App || (App = {}));\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (App);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwcy9hdXRob3IvcGlhbm8vdjIvQXBwLnRzPzgxNDIiXSwibmFtZXMiOlsiTUlESUV2ZW50cyIsInJlcXVpcmUiLCJLZXlzIiwiQ29uc3RhbnRzIiwiU3RvcmVLZXlzIiwiVElNRV9USFJFU0hPTERfRk9SX0dST1VQSU5HX05FQVJCWV9OT1RFUyIsImRpc3BhdGNoIiwiVElNRV9CRVRXRUVOX05PVEVHUk9VUFMiLCJvY3RhdmVPZmZzZXQiLCJibGFja0tleXMiLCJ3aGl0ZUtleXMiLCJub3RlTGFiZWxzIiwic2hhcnBPckZsYXRNb2RpZmllciIsInBpYW5vIiwibGFiZWxzIiwieiIsImtleUNvZGVUb1BpYW5vS2V5TnVtYmVyIiwiS2V5Ym9hcmQiLCJudW1Ob3Rlc1ByZXNzZWQiLCJzZXR1cCIsIm5hdmlnYXRvciIsInN5c2V4IiwidGhlbiIsIm9uTUlESVN1Y2Nlc3MiLCJvbk1JRElGYWlsdXJlIiwiYWxlcnQiLCJtaWRpQWNjZXNzIiwibWlkaSIsImlucHV0cyIsInZhbHVlcyIsImlucHV0IiwibmV4dCIsImRvbmUiLCJ2YWx1ZSIsIm9ubWlkaW1lc3NhZ2UiLCJvbk1JRElNZXNzYWdlIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwibWVzc2FnZSIsImRhdGEiLCJjbWQiLCJjaGFubmVsIiwidHlwZSIsIm5vdGUiLCJ2ZWxvY2l0eSIsInBpYW5vS2V5IiwiQXBwIiwicGxheU9uZU5vdGUiLCJTb25nIiwibWVyZ2VMYXN0VHdvR3JvdXBzIiwiTUlESVBpYW5vSW5wdXQiLCJyZXNldE9mZnNldCIsIlVJIiwiZHJhd1BpYW5vIiwicmVzZXRFdmVyeXRoaW5nIiwiVHJhY2tzIiwic2F2ZUFuZFNob3dEYXRhIiwiUGxheWJhY2siLCJzdG9wIiwiTG9jYWxTdG9yYWdlIiwic2F2ZUNoZWNrQm94ZXMiLCJzYXZlVHJhY2tzIiwic2hvd05vdGVHcm91cHNGb3JUcmFja3MiLCJsb2FkIiwibG9hZFRyYWNrcyIsImxvYWRWZXJzaW9uVG9nZ2xlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNldEl0ZW0iLCJzb25nVmVyc2lvbiIsInBhcnNlSW50IiwiTUlOX1NPTkdfVkVSU0lPTiIsIk1BWF9TT05HX1ZFUlNJT04iLCJwYXlsb2FkIiwiU09OR19WRVJTSU9OIiwiQWN0aW9ucyIsIlRvZ2dsZSIsIm9uU29uZ1ZlcnNpb25Gb3JtYXRDaGFuZ2VkIiwic2F2ZWRUcmFja3MiLCJKU09OIiwicGFyc2UiLCJudW1UcmFja3MiLCJsZW5ndGgiLCJ0Iiwic2F2ZWRUcmFjayIsIm5vdGVHcm91cFN0cmluZyIsIm5vdGVHcm91cCIsIk5vdGVHcm91cCIsImFkZE5vdGVHcm91cFRvVHJhY2siLCJlIiwibG9hZENoZWNrYm94ZXMiLCJzYXZlZENoZWNrYm94U3RhdGUiLCJBcnJheSIsImlzQXJyYXkiLCJnZXROdW1UcmFja3MiLCJzZXRDaGVja2VkU3RhdGVGb3JBbGxUcmFja3MiLCJjaGVja0FsbE5vbkVtcHR5VHJhY2tzIiwic3RyaW5naWZ5IiwiZ2V0Q2hlY2tlZFN0YXRlRm9yQWxsVHJhY2tzIiwidHJhY2tzSlNPTiIsImdldFRyYWNrc0FzSlNPTiIsInNhdmVWZXJzaW9uVG9nZ2xlIiwiRmFrZVdvcmtlckNsb2NrIiwibXNnIiwic2VsZiIsImlzUnVubmluZyIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJvbm1lc3NhZ2UiLCJkZWxheSIsImNsZWFySW50ZXJ2YWwiLCJjdXJyU29uZ1RpbWUiLCJiYXNlU29uZ1RpbWUiLCJjbG9ja1N0YXJ0VGltZSIsImNsb2NrIiwiY2xvY2tJc1RpY2tpbmciLCJwbGF5TmV4dEV2ZW50cyIsInBlcmZvcm1hbmNlIiwibm93IiwiY3Vyck5vdGVHcm91cE51bWJlciIsImlzUGF1c2VkIiwibmV4dEV2ZW50UGxheVRpbWUiLCJpc1BsYXlpbmciLCJwbGF5Iiwibm90ZUdyb3Vwc1RvUGxheSIsImdldE5vdGVHcm91cHNGcm9tVHJhY2tzIiwiZGV0ZXJtaW5lUGxheVRpbWVGb3JOZXh0RXZlbnQiLCJwb3N0TWVzc2FnZSIsInBhdXNlIiwic3RvcFRoZUNsb2NrIiwidG9nZ2xlUGxheVBhdXNlIiwiY3VyclRpbWUiLCJIaWdobGlnaHQiLCJzZXRUcmFja0FuZE5vdGVHcm91cCIsInRyYWNrTnVtYmVyIiwibm90ZU51bWJlciIsInBsYXlDdXJyZW50Tm90ZUdyb3VwIiwicGxheVRpbWVNaWxsaXMiLCJ2YWxpZGF0ZUN1cnJOb3RlR3JvdXBOdW1iZXIiLCJwbGF5Tm90ZUFuZEdvQmFja3dhcmRJblRoZVNvbmciLCJ0aHJvdHRsZSIsInBsYXlOb3RlQW5kQWR2YW5jZUluRGlyZWN0aW9uIiwicGxheU5vdGVBbmRHb0ZvcndhcmRJblRoZVNvbmciLCJkaXJlY3Rpb24iLCJnZXRDdXJyZW50VHJhY2tOdW1iZXIiLCJuIiwiZ2V0Q3VycmVudE5vdGVHcm91cE51bWJlciIsImdldE5vdGVHcm91cEZyb21UcmFjayIsIm5vdGVzIiwicGxheVBpYW5vTm90ZSIsIk1JRElVdGlscyIsIm0ycCIsIm1pZGlOb3RlIiwiUExBWUVEX05PVEVHUk9VUF9JRCIsImdldE5vdGVHcm91cElEIiwib25QbGF5Tm90ZUdyb3VwIiwicGxheUFuZEdvQmFja3dhcmRPbkN1cnJlbnRUcmFjayIsInByZXZOb3RlR3JvdXAiLCJwbGF5QW5kR29Gb3J3YXJkT25DdXJyZW50VHJhY2siLCJuZXh0Tm90ZUdyb3VwIiwic2V0dXBDb3B5SGFuZGxlciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJwcmV2ZW50RGVmYXVsdCIsImNsaXBib2FyZERhdGEiLCJ0ZXh0IiwiZ2V0VGV4dEZpbGVGcm9tVHJhY2tzIiwic2V0RGF0YSIsInVwZGF0ZSIsIlVQREFURURfVFJBQ0tTX0xJU1QiLCJnZXRSZWNlbnRseVVwZGF0ZWRUcmFja051bWJlcnNBc0FycmF5Iiwib25UcmFja3NVcGRhdGVkIiwicmVzZXRSZWNlbnRseVVwZGF0ZWRUcmFja051bWJlcnMiLCJzY3JvbGxOb3RlR3JvdXBJbnRvVmlldyIsIm5vdGVHcm91cE51bWJlciIsIm5vdGVHcm91cElEIiwiZWxlbWVudCIsInNjcm9sbEludG9WaWV3Iiwib25LZXlEb3duIiwia2V5Q29kZSIsIm1ldGFLZXlJc0Rvd24iLCJtZXRhS2V5IiwiY3RybEtleUlzRG93biIsImN0cmxLZXkiLCJzaGlmdEtleUlzRG93biIsInNoaWZ0S2V5IiwiZGVsZXRlTGFzdEdyb3VwIiwicHJldlRyYWNrIiwibmV4dFRyYWNrIiwiZmlyc3ROb3RlR3JvdXAiLCJsYXN0Tm90ZUdyb3VwIiwiaGFzT3duUHJvcGVydHkiLCJvbktleVVwIiwiV0hJVEVfS0VZX1dJRFRIIiwiV0hJVEVfS0VZX0hFSUdIVCIsIkJMQUNLX0tFWV9XSURUSCIsIkJMQUNLX0tFWV9IRUlHSFQiLCJjb250ZXh0MmQiLCJjb250ZXh0MmRXaWR0aCIsImNvbnRleHQyZEhlaWdodCIsInNldENhbnZhc0NvbnRleHQiLCJjMmQiLCJjMmRXaWR0aCIsImMyZEhlaWdodCIsImMiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImRyYXdXaGl0ZUtleXMiLCJkcmF3QmxhY2tLZXlzIiwiZHJhd0tleUxhYmVscyIsImRyYXdNb3N0UmVjZW50R3JvdXAiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsImsiLCJzdHJva2VSZWN0Iiwib2N0YXZlIiwia2V5IiwidGV4dEFsaWduIiwicmVtYWluZGVyIiwiaW5jbHVkZXMiLCJNYXRoIiwiZmxvb3IiLCJ3aGl0ZUtleU5vdGVJbmRleCIsImluZGV4T2YiLCJ3aGl0ZUtleUluZGV4Iiwibm90ZUxhYmVsIiwiZm9udCIsImZpbGxUZXh0Iiwib2Zmc2V0IiwibGVuIiwiaSIsImxhc3RHcm91cCIsInBpYW5vTm90ZSIsIm9jdGF2ZUluZGV4IiwiYmVnaW5QYXRoIiwiYmxhY2tLZXlJbmRleCIsImFyYyIsIlBJIiwiZmlsbCIsImlzQ2hlY2tlZENhbGxiYWNrcyIsInNldENoZWNrZWRDYWxsYmFja3MiLCJkZWZhdWx0SXNDaGVja2VkQ0IiLCJkZWZhdWx0U2V0Q2hlY2tlZENCIiwiY2hlY2tlZCIsInJlc2V0IiwiYWRkVHJhY2siLCJzZXR1cEluZGV4ZXMiLCJhZGROZXdUcmFjayIsImdldFNvbmdWZXJzaW9uIiwibm90ZUdyb3VwcyIsIm5vdGVHcm91cFYxU3RyaW5ncyIsImZvckVhY2giLCJwdXNoIiwidG9TdHJpbmdWMSIsImpvaW4iLCJnZXRUcmFja051bWJlcnNUb0luY2x1ZGVJbk1JRElGaWxlIiwidHJhY2tOdW1iZXJzVG9JbmNsdWRlIiwiaXNDaGVja2VkIiwic2V0VHJhY2tDaGVja2VkQ2FsbGJhY2tzIiwiaXNUcmFja0NoZWNrZWQiLCJzZXRUcmFja0NoZWNrZWQiLCJzZXRDaGVja2VkIiwic2V0Q2hlY2tlZENCIiwicmVzZXRDYWNoZSIsImlzQ2hlY2tlZENCIiwiZ2V0TnVtTm90ZUdyb3Vwc0luVHJhY2siLCJtYXAiLCJjaGVja2VkU3RhdGVGb3JBbGxUcmFja3MiLCJjaGVja2VkU3RhdGUiLCJ0cmFja3MiLCJjYWNoZWROb3RlR3JvdXBzIiwicmVjZW50bHlVcGRhdGVkVHJhY2tOdW1iZXJzIiwiU2V0IiwidHJhY2siLCJUcmFjayIsImFkZCIsImlzVHJhY2tFbXB0eSIsImN1cnJUcmFjayIsIm1lcmdlZE5vdGVHcm91cCIsIm1lcmdlIiwicG9wIiwiY3VyclRpbWVNaWxsaXMiLCJub3RlR3JvdXBQb2ludGVyRm9yVHJhY2siLCJtaW5QbGF5VGltZSIsIk51bWJlciIsIk1BWF9WQUxVRSIsIm5leHROb3RlR3JvdXBUcmFjayIsImN1cnJUcmFja0xlbmd0aCIsImN1cnJOb3RlR3JvdXBQb2ludGVyIiwibmciLCJjb3B5IiwiZnJvbSIsImNsZWFyIiwiX1BsYXliYWNrX05TIiwiX1NvbmdfTlMiLCJfVUlfTlMiLCJfVHJhY2tzX05TIiwic2V0U29uZ1ZlcnNpb24iLCJ2Iiwic2V0RGlzcGF0Y2hGdW5jdGlvbiIsImQiLCJzdGFydCIsInN0YXJ0QXVkaW8iLCJJbnN0cnVtZW50Iiwic2F2ZVNvbmdWZXJzaW9uVG9Mb2NhbFN0b3JhZ2UiLCJ2ZXIiLCJmaWxsVHJhY2tzV2l0aE5vdGVHcm91cHNFeHRyYWN0ZWRGcm9tTUlESUV2ZW50cyIsIm1pZGlGaWxlIiwibWlkaUV2ZW50cyIsImxhc3RQbGF5VGltZSIsImxhc3RUcmFja051bWJlciIsImV2ZW50Iiwic3VidHlwZSIsInBsYXlUaW1lIiwicm91bmQiLCJtaWRpTm90ZU51bSIsInBhcmFtMSIsInBhcmFtMiIsInBpYW5vTm90ZU51bSIsIm5vdGVUb1BsYXkiLCJOb3RlIiwiRVZFTlRfTUlESV9OT1RFX09OIiwiYWRkTm90ZSIsIk1JRElGaWxlSU8iLCJwcmludFR5cGVBbmRTdWJ0eXBlIiwiZ2V0RG93bmxvYWREYXRhX1RFWFQiLCJiYXNlNjRUZXh0IiwiYnRvYSIsImdldERvd25sb2FkRGF0YV9NSURJIiwiY3JlYXRlRmlsZUZyb21UcmFja3MiLCJwaWFub0tleUJlZm9yZU1vZGlmaWVycyIsImFwcGx5TW9kaWZpZXJzIiwibW9kaWZpZXIiLCJTaGFycHNBbmRGbGF0c01hbmFnZXIiLCJpc05vdGVTaGFycCIsImlzTm90ZUZsYXQiLCJwaWFub0tleU51bWJlciIsInRyYWNrTGVuZ3RoIiwiZHVyYXRpb24iLCJsb2FkRmlyc3RGaWxlIiwiZmlsZUxpc3QiLCJmaWxlIiwicmVhZEZpbGVBc3luYyIsImZpbGVOYW1lIiwiRmlsZUNob29zZXIiLCJvbkZpbGVMb2FkZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFNQSxVQUFVLEdBQUdDLG1CQUFPLENBQUMsK0RBQUQsQ0FBMUI7O0FBRUEsSUFBTUMsSUFBSSxHQUFHQyw2REFBUyxDQUFDQyxTQUF2QjtBQUVBLElBQU1DLHdDQUF3QyxHQUFHLENBQWpELEMsQ0FBb0Q7QUFFcEQ7O0FBQ0EsSUFBSUMsUUFBa0IsR0FBRyxJQUF6QixDLENBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBTUMsdUJBQXVCLEdBQUcsR0FBaEM7QUFFQSxJQUFJQyxZQUFZLEdBQUcsQ0FBbkIsQyxDQUVBOztBQUNBLElBQUlDLFNBQVMsR0FBRyxDQUFDLENBQUQsRUFBSSxDQUFDLENBQUwsRUFBUSxDQUFSLEVBQVcsQ0FBWCxFQUFjLENBQUMsQ0FBZixFQUFrQixFQUFsQixFQUFzQixDQUF0QixDQUFoQixDLENBQTBDOztBQUMxQyxJQUFJQyxTQUFTLEdBQUcsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsQ0FBYixFQUFnQixDQUFoQixFQUFtQixFQUFuQixDQUFoQjtBQUNBLElBQUlDLFVBQVUsR0FBRyxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFxQixHQUFyQixFQUEwQixHQUExQixFQUErQixHQUEvQixDQUFqQjtBQUVBLElBQUlDLG1CQUFtQixHQUFHLENBQTFCO0FBRUEsSUFBSUMsS0FBSyxHQUFHLElBQVo7Ozs7QUFJVyxNQUFNQyxNQUFNLHNCQUFHLENBQ2xCLEdBRGtCLEVBRWxCLEdBRmtCLEVBRWI7QUFDTCxLQUhrQixFQUlsQixHQUprQixFQUtsQixHQUxrQixFQU1sQixHQU5rQixFQU9sQixHQVBrQixFQVFsQixHQVJrQixFQVNsQixHQVRrQixFQVNiO0FBQ0wsS0FWa0IsRUFXbEIsR0FYa0IsRUFZbEIsR0Faa0IsRUFhbEIsR0Fia0IsRUFjbEIsR0Fka0IsRUFlbEIsR0Fma0IsRUFnQmxCLEdBaEJrQixFQWdCYjtBQUNMLEtBakJrQixFQWtCbEIsR0FsQmtCLEVBbUJsQixHQW5Ca0IsRUFvQmxCLEdBcEJrQixFQXFCbEIsR0FyQmtCLEVBc0JsQixHQXRCa0IsRUF1QmxCLEdBdkJrQixFQXVCYjtBQUNMLEtBeEJrQixFQXlCbEIsR0F6QmtCLEVBMEJsQixHQTFCa0IsRUEyQmxCLEdBM0JrQixFQTRCbEIsR0E1QmtCLEVBNkJsQixHQTdCa0IsRUE4QmxCLEdBOUJrQixFQThCYjtBQUNMLEtBL0JrQixFQWdDbEIsR0FoQ2tCLEVBaUNsQixJQWpDa0IsRUFrQ2xCLEdBbENrQixFQW1DbEIsR0FuQ2tCLEVBb0NsQixHQXBDa0IsRUFxQ2xCLEdBckNrQixFQXFDYjtBQUNMLEtBdENrQixFQXVDbEIsR0F2Q2tCLEVBd0NsQixHQXhDa0IsRUF5Q2xCLEdBekNrQixFQTBDbEIsR0ExQ2tCLEVBMkNsQixHQTNDa0IsRUE0Q2xCLEdBNUNrQixFQTRDYjtBQUNMLEtBN0NrQixDQTZDYjtBQTdDYSxHQUFmO0FBZ0RQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxDQUFDLEdBQUcsQ0FBQyxDQUFYO0FBQ08sTUFBTUMsdUJBQXVCLHVDQUFHO0FBQ25DLFFBQUksS0FBS0QsQ0FEMEI7QUFDdkI7QUFDWixRQUFJLEtBQUtBLENBRjBCO0FBRXZCO0FBQ1o7QUFDQSxRQUFJLEtBQUtBLENBSjBCO0FBSXZCO0FBQ1osUUFBSSxLQUFLQSxDQUwwQjtBQUt2QjtBQUNaLFFBQUksS0FBS0EsQ0FOMEI7QUFNdkI7QUFDWixRQUFJLEtBQUtBLENBUDBCO0FBT3ZCO0FBQ1osUUFBSSxLQUFLQSxDQVIwQjtBQVF2QjtBQUNaLFNBQUssS0FBS0EsQ0FUeUI7QUFTdEI7QUFDYixTQUFLLEtBQUtBLENBVnlCO0FBVXRCO0FBQ2I7QUFDQSxTQUFLLEtBQUtBLENBWnlCO0FBWXRCO0FBQ2IsUUFBSSxLQUFLQSxDQWIwQjtBQWF2QjtBQUNaLFFBQUksS0FBS0EsQ0FkMEI7QUFjdkI7QUFDWixRQUFJLEtBQUtBLENBZjBCO0FBZXZCO0FBQ1osUUFBSSxLQUFLQSxDQWhCMEI7QUFnQnZCO0FBQ1osUUFBSSxLQUFLQSxDQWpCMEI7QUFpQnZCO0FBQ1osUUFBSSxLQUFLQSxDQWxCMEI7QUFrQnZCO0FBQ1o7QUFDQSxRQUFJLEtBQUtBLENBcEIwQjtBQW9CdkI7QUFDWixRQUFJLEtBQUtBLENBckIwQjtBQXFCdkI7QUFDWixRQUFJLEtBQUtBLENBdEIwQjtBQXNCdkI7QUFDWixTQUFLLEtBQUtBLENBdkJ5QjtBQXVCdEI7QUFDYixRQUFJLEtBQUtBLENBeEIwQjtBQXdCdkI7QUFDWixTQUFLLEtBQUtBLENBekJ5QjtBQXlCdEI7QUFDYixRQUFJLEtBQUtBLENBMUIwQjtBQTBCdkI7QUFDWixRQUFJLEtBQUtBLENBM0IwQjtBQTJCdkI7QUFDWixRQUFJLEtBQUtBLENBNUIwQjtBQTRCdkI7QUFDWjtBQUNBLFFBQUksS0FBS0EsQ0E5QjBCO0FBOEJ2QjtBQUNaLFFBQUksS0FBS0EsQ0EvQjBCO0FBK0J2QjtBQUNaLFFBQUksS0FBS0EsQ0FoQzBCO0FBZ0N2QjtBQUNaLFFBQUksS0FBS0EsQ0FqQzBCO0FBaUN2QjtBQUNaLFFBQUksS0FBS0EsQ0FsQzBCO0FBa0N2QjtBQUNaLFFBQUksS0FBS0EsQ0FuQzBCO0FBbUN2QjtBQUNaLFFBQUksS0FBS0EsQ0FwQzBCO0FBb0N2QjtBQUNaO0FBQ0EsU0FBSyxLQUFLQSxDQXRDeUI7QUFzQ3RCO0FBQ2IsU0FBSyxLQUFLQSxDQXZDeUI7QUF1Q3RCO0FBQ2IsU0FBSyxLQUFLQSxDQXhDeUI7QUF3Q3RCO0FBRWIsUUFBSSxLQUFLQSxDQTFDMEI7QUEwQ3ZCO0FBQ1osUUFBSSxLQUFLQSxDQTNDMEI7QUEyQ3ZCO0FBQ1osUUFBSSxLQUFLQSxDQTVDMEI7QUE0Q3ZCO0FBQ1osUUFBSSxLQUFLQSxDQTdDMEI7QUE2Q3ZCO0FBQ1o7QUFDQSxRQUFJLEtBQUtBLENBL0MwQjtBQStDdkI7QUFDWixRQUFJLEtBQUtBLENBaEQwQjtBQWdEdkI7QUFDWixRQUFJLEtBQUtBLENBakQwQjtBQWlEdkI7QUFDWixRQUFJLEtBQUtBLENBbEQwQjtBQWtEdkI7QUFDWixRQUFJLEtBQUtBLENBbkQwQjtBQW1EdkI7QUFDWixRQUFJLEtBQUtBLENBcEQwQjtBQW9EdkI7QUFDWixTQUFLLEtBQUtBLENBckR5QjtBQXFEdEI7QUFDYjtBQUNBLFNBQUssS0FBS0EsQ0F2RHlCLENBdUR0Qjs7QUF2RHNCLEdBQWhDO0dBM0RERSxRLEtBQUFBLFEsU0FzSFY7QUFDQTs7Ozs7O0FBRUksTUFBSUMsZUFBdUIsR0FBRyxDQUE5Qjs7QUFFTyxXQUFTQyxLQUFULEdBQWlCO0FBQ3BCLFFBQUlDLFNBQVMsQ0FBQyxtQkFBRCxDQUFiLEVBQW9DO0FBQ2hDQSxlQUFTLENBQUMsbUJBQUQsQ0FBVCxDQUErQjtBQUFFQyxhQUFLLEVBQUU7QUFBVCxPQUEvQixFQUFpREMsSUFBakQsQ0FBc0RDLGFBQXRELEVBQXFFQyxhQUFyRTtBQUNILEtBRkQsTUFFTztBQUNIQyxXQUFLLENBQUMsa0NBQUQsQ0FBTDtBQUNIO0FBQ0o7Ozs7QUFFRCxXQUFTRixhQUFULENBQXVCRyxVQUF2QixFQUFtQztBQUMvQixRQUFJQyxJQUFJLEdBQUdELFVBQVg7QUFDQSxRQUFJRSxNQUFNLEdBQUdELElBQUksQ0FBQ0MsTUFBTCxDQUFZQyxNQUFaLEVBQWI7O0FBQ0EsU0FBSyxJQUFJQyxLQUFLLEdBQUdGLE1BQU0sQ0FBQ0csSUFBUCxFQUFqQixFQUFnQ0QsS0FBSyxJQUFJLENBQUNBLEtBQUssQ0FBQ0UsSUFBaEQsRUFBc0RGLEtBQUssR0FBR0YsTUFBTSxDQUFDRyxJQUFQLEVBQTlELEVBQTZFO0FBQ3pFRCxXQUFLLENBQUNHLEtBQU4sQ0FBWUMsYUFBWixHQUE0QkMsYUFBNUI7QUFDSDtBQUNKOztBQUVELFdBQVNYLGFBQVQsQ0FBdUJZLEtBQXZCLEVBQThCO0FBQzFCQyxXQUFPLENBQUNDLEdBQVIsQ0FBWSwyRUFBMkVGLEtBQXZGO0FBQ0g7O0FBRUQsV0FBU0QsYUFBVCxDQUF1QkksT0FBdkIsRUFBZ0M7QUFDNUIsUUFBSUMsSUFBSSxHQUFHRCxPQUFPLENBQUNDLElBQW5CLENBRDRCLENBQ0g7O0FBRXpCLFFBQUlDLEdBQUcsR0FBR0QsSUFBSSxDQUFDLENBQUQsQ0FBSixJQUFXLENBQXJCO0FBQ0EsUUFBSUUsT0FBTyxHQUFHRixJQUFJLENBQUMsQ0FBRCxDQUFKLEdBQVUsR0FBeEIsQ0FKNEIsQ0FJQzs7QUFDN0IsUUFBSUcsSUFBSSxHQUFHSCxJQUFJLENBQUMsQ0FBRCxDQUFKLEdBQVUsSUFBckIsQ0FMNEIsQ0FLRDs7QUFDM0IsUUFBSUksSUFBSSxHQUFHSixJQUFJLENBQUMsQ0FBRCxDQUFmO0FBQ0EsUUFBSUssUUFBUSxHQUFHTCxJQUFJLENBQUMsQ0FBRCxDQUFuQjtBQUNBLFFBQUlNLFFBQVEsR0FBR0YsSUFBSSxHQUFHLEVBQXRCOztBQUVBLFlBQVFELElBQVI7QUFDSSxXQUFLLEdBQUw7QUFBVTtBQUNOTixlQUFPLENBQUNDLEdBQVIsQ0FBWSxxQkFBcUJRLFFBQXJCLEdBQWdDLGFBQWhDLEdBQWdERCxRQUE1RDtBQUNBRSxXQUFHLENBQUNDLFdBQUosQ0FBZ0JGLFFBQWhCLEVBQTBCLEtBQTFCLEVBRkosQ0FFc0M7O0FBQ2xDNUIsdUJBQWU7O0FBQ2YsWUFBSUEsZUFBZSxHQUFHLENBQXRCLEVBQXlCO0FBQ3JCK0IsY0FBSSxDQUFDQyxrQkFBTDtBQUNIOztBQUNEOztBQUNKLFdBQUssR0FBTDtBQUFVO0FBQ047QUFDQWhDLHVCQUFlO0FBQ2Y7O0FBQ0osV0FBSyxHQUFMO0FBQVU7QUFDTm1CLGVBQU8sQ0FBQ0MsR0FBUixDQUFZLGFBQVosRUFESixDQUNnQzs7QUFDNUI7O0FBQ0o7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQXBCUjtBQXNCSDtHQXZES2EsYyxLQUFBQSxjLFNBMERWO0FBRUE7OztBQUNBLFNBQVNDLFdBQVQsR0FBdUI7QUFDbkJmLFNBQU8sQ0FBQ0MsR0FBUixDQUFZLGVBQVo7QUFDQTlCLGNBQVksR0FBRyxDQUFmO0FBQ0E2QyxJQUFFLENBQUNDLFNBQUg7QUFDSDs7QUFFRCxTQUFTQyxlQUFULEdBQTJCO0FBQ3ZCbEIsU0FBTyxDQUFDQyxHQUFSLENBQVksbUJBQVo7QUFDQTlCLGNBQVksR0FBRyxDQUFmO0FBQ0E2QyxJQUFFLENBQUNHLE1BQUgsQ0FBVXJDLEtBQVYsQ0FBZ0IsQ0FBaEI7QUFDQXNDLGlCQUFlO0FBQ2ZDLFVBQVEsQ0FBQ0MsSUFBVDtBQUNIOztBQUVELFNBQVNGLGVBQVQsR0FBMkI7QUFDdkJHLGNBQVksQ0FBQ0MsY0FBYjtBQUNBRCxjQUFZLENBQUNFLFVBQWI7QUFDQVQsSUFBRSxDQUFDVSx1QkFBSDtBQUNBVixJQUFFLENBQUNDLFNBQUg7QUFDSCxDLENBRUQ7Ozs7OztBQUdXLFdBQVNVLElBQVQsR0FBZ0I7QUFDbkJDLGNBQVU7QUFDVkMscUJBQWlCO0FBQ3BCOzs7O0FBRUQsV0FBU0EsaUJBQVQsR0FBNkI7QUFDekIsUUFBSSxDQUFDQyxZQUFZLENBQUNDLE9BQWIsQ0FBcUIsY0FBckIsQ0FBTCxFQUEyQztBQUN2Q0Qsa0JBQVksQ0FBQ0UsT0FBYixDQUFxQixjQUFyQixFQUFxQyxHQUFyQztBQUNIOztBQUNELFFBQUlDLFdBQVcsR0FBR0MsUUFBUSxDQUFDSixZQUFZLENBQUNDLE9BQWIsQ0FBcUIsY0FBckIsQ0FBRCxDQUExQjs7QUFDQSxRQUFJRSxXQUFXLEdBQUduRSw2REFBUyxDQUFDcUUsZ0JBQXhCLElBQTRDRixXQUFXLEdBQUduRSw2REFBUyxDQUFDc0UsZ0JBQXhFLEVBQTBGO0FBQ3RGSCxpQkFBVyxHQUFHLENBQWQ7QUFDSDs7QUFDRCxRQUFNSSxPQUFPLEdBQUcsRUFBaEI7QUFDQUEsV0FBTyxDQUFDeEUsSUFBSSxDQUFDeUUsWUFBTixDQUFQLEdBQTZCTCxXQUE3QjtBQUNBaEUsWUFBUSxDQUFDO0FBQUVxQyxVQUFJLEVBQUVpQyxpRUFBTyxDQUFDQyxNQUFSLENBQWVDLDBCQUF2QjtBQUFtREosYUFBTyxFQUFFQTtBQUE1RCxLQUFELENBQVI7QUFDSDs7QUFFRCxXQUFTVCxVQUFULEdBQXNCO0FBQ2xCLFFBQUk7QUFDQSxVQUFNYyxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXZCxZQUFZLENBQUNDLE9BQWIsQ0FBcUIsUUFBckIsQ0FBWCxDQUFwQixDQURBLENBQ2dFOztBQUNoRSxVQUFNYyxTQUFTLEdBQUdILFdBQVcsQ0FBQ0ksTUFBOUI7QUFFQTlCLFFBQUUsQ0FBQ0csTUFBSCxDQUFVckMsS0FBVixDQUFnQitELFNBQWhCOztBQUNBLFdBQUssSUFBSUUsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0YsU0FBcEIsRUFBK0JFLENBQUMsRUFBaEMsRUFBb0M7QUFDaEMsWUFBSUMsVUFBVSxHQUFHTixXQUFXLENBQUNLLENBQUQsQ0FBNUI7O0FBRGdDLG1EQUVKQyxVQUZJO0FBQUE7O0FBQUE7QUFFaEMsOERBQXdDO0FBQUEsZ0JBQS9CQyxlQUErQjtBQUNwQyxnQkFBSUMsU0FBUyxHQUFHLElBQUlDLG9FQUFKLENBQWNGLGVBQWQsQ0FBaEI7QUFDQXJDLGdCQUFJLENBQUN3QyxtQkFBTCxDQUF5QkYsU0FBekIsRUFBb0NILENBQXBDO0FBQ0g7QUFMK0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1uQztBQUNKLEtBWkQsQ0FZRSxPQUFPTSxDQUFQLEVBQVU7QUFDUnJDLFFBQUUsQ0FBQ0csTUFBSCxDQUFVckMsS0FBVixDQUFnQixDQUFoQjtBQUNIO0FBQ0o7O0FBRUQsV0FBU3dFLGNBQVQsR0FBMEI7QUFDdEIsUUFBSTtBQUNBLFVBQU1DLGtCQUFrQixHQUFHWixJQUFJLENBQUNDLEtBQUwsQ0FBV2QsWUFBWSxDQUFDQyxPQUFiLENBQXFCLFlBQXJCLENBQVgsQ0FBM0IsQ0FEQSxDQUMyRTs7QUFDM0UsVUFBSXlCLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixrQkFBZCxLQUFxQ0Esa0JBQWtCLENBQUNULE1BQW5CLEtBQThCbEMsSUFBSSxDQUFDOEMsWUFBTCxFQUF2RSxFQUE0RjtBQUN4RjFDLFVBQUUsQ0FBQ0csTUFBSCxDQUFVd0MsMkJBQVYsQ0FBc0NKLGtCQUF0QztBQUNILE9BRkQsTUFFTztBQUNILGNBQU0sTUFBTjtBQUNIO0FBQ0osS0FQRCxDQU9FLE9BQU9GLENBQVAsRUFBVTtBQUNSckMsUUFBRSxDQUFDRyxNQUFILENBQVV5QyxzQkFBVjtBQUNBckMsa0JBQVksQ0FBQ0MsY0FBYjtBQUNIO0FBQ0o7O0FBRU0sV0FBU0EsY0FBVCxHQUEwQjtBQUM3Qk0sZ0JBQVksQ0FBQ0UsT0FBYixDQUFxQixZQUFyQixFQUFtQ1csSUFBSSxDQUFDa0IsU0FBTCxDQUFlN0MsRUFBRSxDQUFDRyxNQUFILENBQVUyQywyQkFBVixFQUFmLENBQW5DO0FBQ0g7Ozs7QUFFTSxXQUFTckMsVUFBVCxHQUFzQjtBQUN6QixRQUFJc0MsVUFBVSxHQUFHbkQsSUFBSSxDQUFDb0QsZUFBTCxFQUFqQjtBQUNBbEMsZ0JBQVksQ0FBQ0UsT0FBYixDQUFxQixRQUFyQixFQUErQitCLFVBQS9CO0FBQ0g7Ozs7QUFFTSxXQUFTRSxpQkFBVCxDQUEyQmhDLFdBQTNCLEVBQWdEO0FBQ25ESCxnQkFBWSxDQUFDRSxPQUFiLENBQXFCLGNBQXJCLEVBQXFDQyxXQUFXLEdBQUcsRUFBbkQ7QUFDSDs7O0dBOURLVixZLEtBQUFBLFksU0FpRVY7OztJQUVNMkMsZTs7OzsrS0FDa0IsSzs7OEtBQ0QsSTs7MktBQ0gsRTs7Ozs7OztnQ0FHR0MsRyxFQUFhO0FBQzVCLFVBQUlDLElBQUksR0FBRyxJQUFYO0FBQ0FwRSxhQUFPLENBQUNDLEdBQVIsQ0FBWW1FLElBQVo7O0FBQ0EsY0FBUUQsR0FBUjtBQUNJLGFBQUssT0FBTDtBQUNJbkUsaUJBQU8sQ0FBQ0MsR0FBUixDQUFZLDRCQUFaOztBQUNBLGNBQUksQ0FBQ21FLElBQUksQ0FBQ0MsU0FBVixFQUFxQjtBQUNqQkQsZ0JBQUksQ0FBQ0MsU0FBTCxHQUFpQixJQUFqQjtBQUNBRCxnQkFBSSxDQUFDRSxRQUFMLEdBQWdCQyxXQUFXLENBQUMsWUFBTTtBQUM5QixrQkFBSUgsSUFBSSxDQUFDSSxTQUFULEVBQW9CO0FBQ2hCSixvQkFBSSxDQUFDSSxTQUFMLENBQWUsTUFBZjtBQUNIO0FBQ0osYUFKMEIsRUFJeEJKLElBQUksQ0FBQ0ssS0FKbUIsQ0FBM0I7QUFLSDs7QUFDRDs7QUFDSixhQUFLLE1BQUw7QUFDQTtBQUNJekUsaUJBQU8sQ0FBQ0MsR0FBUixDQUFZLDRCQUFaO0FBQ0F5RSx1QkFBYSxDQUFDTixJQUFJLENBQUNFLFFBQU4sQ0FBYjtBQUNBRixjQUFJLENBQUNDLFNBQUwsR0FBaUIsS0FBakI7QUFDQTtBQWpCUjtBQW1CSDs7OztLQUdMOzs7Ozs7QUFHSTtBQUNBLE1BQUlNLFlBQVksR0FBRyxDQUFuQixDLENBQXNCOztBQUN0QixNQUFJQyxZQUFZLEdBQUcsQ0FBbkIsQyxDQUFzQjs7QUFDdEIsTUFBSUMsY0FBYyxHQUFHLENBQXJCO0FBRUEsTUFBSUMsS0FBSyxHQUFHLElBQUlaLGVBQUosRUFBWixDLENBQ0E7O0FBQ0EsTUFBSWEsY0FBYyxHQUFHLEtBQXJCOztBQUVBRCxPQUFLLENBQUNOLFNBQU4sR0FBa0IsVUFBVW5CLENBQVYsRUFBYTtBQUMzQjJCLGtCQUFjLENBQUNDLFdBQVcsQ0FBQ0MsR0FBWixFQUFELENBQWQ7QUFDSCxHQUZEOztBQUlBLE1BQUlDLG1CQUEyQixHQUFHLENBQWxDO0FBRUEsTUFBSUMsUUFBUSxHQUFHLEtBQWY7QUFFQSxNQUFJQyxpQkFBaUIsR0FBRyxDQUF4Qjs7QUFFTyxXQUFTQyxTQUFULEdBQXFCO0FBQ3hCLFdBQU9QLGNBQVA7QUFDSDs7OztBQUdNLFdBQVNRLElBQVQsR0FBZ0I7QUFDbkJ2RixXQUFPLENBQUNDLEdBQVIsQ0FBWSxNQUFaOztBQUNBLFFBQUltRixRQUFKLEVBQWM7QUFDVlIsa0JBQVksR0FBR0QsWUFBZjtBQUNILEtBRkQsTUFFTztBQUNILFVBQUlXLFNBQVMsRUFBYixFQUFpQjtBQUNiaEUsWUFBSTtBQUNQLE9BSEUsQ0FLSDs7O0FBQ0EsVUFBTWtFLGlCQUFnQixHQUFHNUUsSUFBSSxDQUFDNkUsdUJBQUwsRUFBekI7O0FBRUEsVUFBSUQsaUJBQWdCLENBQUMxQyxNQUFqQixLQUE0QixDQUFoQyxFQUFtQztBQUMvQnpCLGdCQUFRLENBQUNDLElBQVQ7QUFDQSxlQUYrQixDQUV2QjtBQUNYOztBQUVENkQseUJBQW1CLEdBQUcsQ0FBdEI7QUFDQVIsa0JBQVksR0FBRyxDQUFmO0FBQ0FDLGtCQUFZLEdBQUcsQ0FBZjtBQUNBYyxtQ0FBNkI7QUFDaEM7O0FBQ0ROLFlBQVEsR0FBRyxLQUFYO0FBQ0FQLGtCQUFjLEdBQUdJLFdBQVcsQ0FBQ0MsR0FBWixFQUFqQjtBQUNBSixTQUFLLENBQUNhLFdBQU4sQ0FBa0IsT0FBbEI7QUFDQVosa0JBQWMsR0FBRyxJQUFqQjtBQUNIOzs7O0FBRU0sV0FBU2EsS0FBVCxHQUFpQjtBQUNwQkMsZ0JBQVk7QUFDWlQsWUFBUSxHQUFHLElBQVgsQ0FGb0IsQ0FFSDtBQUNwQjs7OztBQUVNLFdBQVNVLGVBQVQsR0FBMkI7QUFDOUIsUUFBSVIsU0FBUyxFQUFiLEVBQWlCO0FBQ2JNLFdBQUs7QUFDUixLQUZELE1BRU87QUFDSEwsVUFBSTtBQUNQO0FBQ0o7Ozs7QUFFTSxXQUFTakUsSUFBVCxHQUFnQjtBQUNuQnVFLGdCQUFZO0FBQ1pWLHVCQUFtQixHQUFHLENBQXRCO0FBQ0g7Ozs7QUFFRCxXQUFTVSxZQUFULEdBQXdCO0FBQ3BCLFFBQUlQLFNBQVMsRUFBYixFQUFpQjtBQUNiUixXQUFLLENBQUNhLFdBQU4sQ0FBa0IsTUFBbEI7QUFDQVosb0JBQWMsR0FBRyxLQUFqQjtBQUNIO0FBQ0osRyxDQUVEOzs7QUFDQSxXQUFTQyxjQUFULENBQXdCZSxRQUF4QixFQUFrQztBQUM5QixRQUFNUCxnQkFBZ0IsR0FBRzVFLElBQUksQ0FBQzZFLHVCQUFMLEVBQXpCLENBRDhCLENBRTlCOztBQUNBLFFBQUlOLG1CQUFtQixJQUFJSyxnQkFBZ0IsQ0FBQzFDLE1BQTVDLEVBQW9EO0FBQ2hEekIsY0FBUSxDQUFDQyxJQUFUO0FBQ0EsYUFGZ0QsQ0FFeEM7QUFDWDs7QUFFRHFELGdCQUFZLEdBQUdvQixRQUFRLEdBQUdsQixjQUFYLEdBQTRCRCxZQUEzQzs7QUFFQSxXQUFPRCxZQUFZLElBQUlVLGlCQUF2QixFQUEwQztBQUN0QztBQUNBLFVBQUluQyxVQUFvQixHQUFHc0MsZ0JBQWdCLENBQUNMLG1CQUFELENBQTNDO0FBQ0FhLDRFQUFTLENBQUNDLG9CQUFWLENBQStCL0MsVUFBUyxDQUFDZ0QsV0FBekMsRUFBc0RoRCxVQUFTLENBQUNpRCxVQUFoRTtBQUNBQywwQkFBb0I7QUFDcEJqQix5QkFBbUIsR0FMbUIsQ0FLZjtBQUV2Qjs7QUFDQSxVQUFJQSxtQkFBbUIsSUFBSUssZ0JBQWdCLENBQUMxQyxNQUE1QyxFQUFvRDtBQUNoRHpCLGdCQUFRLENBQUNDLElBQVQ7QUFDQSxlQUZnRCxDQUV4QztBQUNYLE9BSEQsTUFHTztBQUNIb0UscUNBQTZCO0FBQ2hDO0FBQ0o7QUFDSjs7QUFFRCxXQUFTQSw2QkFBVCxHQUF5QztBQUNyQyxRQUFNRixnQkFBZ0IsR0FBRzVFLElBQUksQ0FBQzZFLHVCQUFMLEVBQXpCO0FBQ0FKLHFCQUFpQixHQUFHRyxnQkFBZ0IsQ0FBQ0wsbUJBQUQsQ0FBaEIsQ0FBc0NrQixjQUExRDs7QUFDQSxRQUFJaEIsaUJBQWlCLEtBQUssQ0FBQyxDQUEzQixFQUE4QjtBQUMxQkEsdUJBQWlCLEdBQUdWLFlBQVksR0FBR3pHLHVCQUFuQyxDQUQwQixDQUNrQztBQUMvRDtBQUNKLEcsQ0FFRDtBQUNBOzs7QUFFQSxXQUFTb0ksMkJBQVQsR0FBdUM7QUFDbkMsUUFBTWQsZ0JBQWdCLEdBQUc1RSxJQUFJLENBQUM2RSx1QkFBTCxFQUF6Qjs7QUFDQSxRQUFJTixtQkFBbUIsSUFBSUssZ0JBQWdCLENBQUMxQyxNQUE1QyxFQUFvRDtBQUNoRHFDLHlCQUFtQixHQUFHSyxnQkFBZ0IsQ0FBQzFDLE1BQWpCLEdBQTBCLENBQWhEO0FBQ0gsS0FGRCxNQUVPLElBQUlxQyxtQkFBbUIsR0FBRyxDQUExQixFQUE2QjtBQUNoQ0EseUJBQW1CLEdBQUcsQ0FBdEI7QUFDSDtBQUNKOztBQUVNLE1BQU1vQiw4QkFBOEIsOENBQUdDLHVEQUFRLENBQUMsWUFBWTtBQUMvREMsaUNBQTZCLENBQUMsQ0FBQyxDQUFGLENBQTdCO0FBQ0gsR0FGcUQsRUFFbkQ7QUFBSTtBQUYrQyxHQUEvQztBQUlBLE1BQU1DLDZCQUE2Qiw2Q0FBR0YsdURBQVEsQ0FBQyxZQUFZO0FBQzlEQyxpQ0FBNkIsQ0FBQyxDQUFDLENBQUYsQ0FBN0I7QUFDSCxHQUZvRCxFQUVsRDtBQUFJO0FBRjhDLEdBQTlDOztBQUlQLFdBQVNBLDZCQUFULENBQXVDRSxTQUF2QyxFQUEwRDtBQUN0RCxRQUFNbkIsZ0JBQWdCLEdBQUc1RSxJQUFJLENBQUM2RSx1QkFBTCxFQUF6Qjs7QUFDQSxRQUFJRCxnQkFBZ0IsQ0FBQzFDLE1BQWpCLEtBQTRCLENBQWhDLEVBQW1DO0FBQy9CO0FBQ0g7O0FBQ0R3RCwrQkFBMkI7QUFFM0IsUUFBSXBELFNBQW9CLEdBQUdzQyxnQkFBZ0IsQ0FBQ0wsbUJBQUQsQ0FBM0M7QUFDQWEsMEVBQVMsQ0FBQ0Msb0JBQVYsQ0FBK0IvQyxTQUFTLENBQUNnRCxXQUF6QyxFQUFzRGhELFNBQVMsQ0FBQ2lELFVBQWhFO0FBQ0FDLHdCQUFvQjtBQUNwQmpCLHVCQUFtQixJQUFJd0IsU0FBdkI7QUFDQUwsK0JBQTJCO0FBQzlCOztBQUVELFdBQVNGLG9CQUFULEdBQWdDO0FBQzVCLFFBQU1yRCxDQUFDLEdBQUdpRCxzRUFBUyxDQUFDWSxxQkFBVixFQUFWO0FBQ0EsUUFBTUMsQ0FBQyxHQUFHYixzRUFBUyxDQUFDYyx5QkFBVixFQUFWO0FBQ0EsUUFBTTVELFNBQVMsR0FBR3RDLElBQUksQ0FBQ21HLHFCQUFMLENBQTJCRixDQUEzQixFQUE4QjlELENBQTlCLENBQWxCOztBQUNBLFFBQUksQ0FBQ0csU0FBTCxFQUFnQjtBQUNaO0FBQ0g7O0FBTjJCLGdEQU9UQSxTQUFTLENBQUM4RCxLQVBEO0FBQUE7O0FBQUE7QUFPNUIsNkRBQW9DO0FBQUEsWUFBekJ6RyxJQUF5QjtBQUNoQ0csV0FBRyxDQUFDdUcsYUFBSixDQUFrQkMsa0VBQVMsQ0FBQ0MsR0FBVixDQUFjNUcsSUFBSSxDQUFDNkcsUUFBbkIsQ0FBbEIsRUFBZ0Q3RyxJQUFJLENBQUNDLFFBQXJEO0FBQ0g7QUFUMkI7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFXNUIsUUFBTTZCLE9BQU8sR0FBRyxFQUFoQjtBQUNBQSxXQUFPLENBQUN4RSxJQUFJLENBQUN3SixtQkFBTixDQUFQLEdBQW9DekcsSUFBSSxDQUFDMEcsY0FBTCxDQUFvQnZFLENBQXBCLEVBQXVCOEQsQ0FBdkIsQ0FBcEM7QUFDQTVJLFlBQVEsQ0FBQztBQUFFcUMsVUFBSSxFQUFFaUMsaUVBQU8sQ0FBQzNCLElBQVIsQ0FBYTJHLGVBQXJCO0FBQXNDbEYsYUFBTyxFQUFFQTtBQUEvQyxLQUFELENBQVI7QUFDSDs7QUFFTSxNQUFNbUYsK0JBQStCLCtDQUFHaEIsdURBQVEsQ0FBQyxZQUFZO0FBQ2hFSix3QkFBb0I7QUFDcEJKLDBFQUFTLENBQUN5QixhQUFWO0FBQ0gsR0FIc0QsRUFHcEQ7QUFBSTtBQUhnRCxHQUFoRDtBQUtBLE1BQU1DLDhCQUE4Qiw4Q0FBR2xCLHVEQUFRLENBQUMsWUFBWTtBQUMvREosd0JBQW9CO0FBQ3BCSiwwRUFBUyxDQUFDMkIsYUFBVjtBQUNILEdBSHFELEVBR25EO0FBQUk7QUFIK0MsR0FBL0M7R0F6S0R0RyxRLEtBQUFBLFE7Ozs7O0FBZ0xDLFdBQVN1RyxnQkFBVCxHQUE0QjtBQUMvQkMsWUFBUSxDQUFDQyxhQUFULENBQXVCLE1BQXZCLEVBQStCQyxnQkFBL0IsQ0FBZ0QsTUFBaEQsRUFBd0QsVUFBVTFFLENBQVYsRUFBNkI7QUFDakZBLE9BQUMsQ0FBQzJFLGNBQUY7QUFDQWhJLGFBQU8sQ0FBQ0MsR0FBUixDQUFZLE1BQVo7O0FBQ0EsVUFBSW9ELENBQUMsQ0FBQzRFLGFBQU4sRUFBcUI7QUFDakIsWUFBTUMsSUFBSSxHQUFHbEgsRUFBRSxDQUFDRyxNQUFILENBQVVnSCxxQkFBVixFQUFiO0FBQ0E5RSxTQUFDLENBQUM0RSxhQUFGLENBQWdCRyxPQUFoQixDQUF3QixZQUF4QixFQUFzQ0YsSUFBdEM7QUFDSDtBQUNKLEtBUEQ7QUFRQUwsWUFBUSxDQUFDQyxhQUFULENBQXVCLE1BQXZCLEVBQStCQyxnQkFBL0IsQ0FBZ0QsS0FBaEQsRUFBdUQsVUFBVTFFLENBQVYsRUFBNkI7QUFDaEZBLE9BQUMsQ0FBQzJFLGNBQUY7QUFDQWhJLGFBQU8sQ0FBQ0MsR0FBUixDQUFZLEtBQVo7O0FBQ0EsVUFBSW9ELENBQUMsQ0FBQzRFLGFBQU4sRUFBcUI7QUFDakIsWUFBTUMsSUFBSSxHQUFHbEgsRUFBRSxDQUFDRyxNQUFILENBQVVnSCxxQkFBVixFQUFiO0FBQ0E5RSxTQUFDLENBQUM0RSxhQUFGLENBQWdCRyxPQUFoQixDQUF3QixZQUF4QixFQUFzQ0YsSUFBdEM7QUFDSDs7QUFDRGhILHFCQUFlLEdBUGlFLENBTzdEO0FBQ3RCLEtBUkQ7QUFTSDs7OztBQUVNLFdBQVNRLHVCQUFULEdBQW1DO0FBQ3RDVixNQUFFLENBQUNHLE1BQUgsQ0FBVXlDLHNCQUFWO0FBQ0FvQywwRUFBUyxDQUFDcUMsTUFBVjtBQUNBLFFBQU1oRyxPQUFPLEdBQUcsRUFBaEI7QUFDQUEsV0FBTyxDQUFDeEUsSUFBSSxDQUFDeUssbUJBQU4sQ0FBUCxHQUFvQzFILElBQUksQ0FBQzJILHFDQUFMLEVBQXBDO0FBQ0F0SyxZQUFRLENBQUM7QUFBRXFDLFVBQUksRUFBRWlDLGlFQUFPLENBQUMzQixJQUFSLENBQWE0SCxlQUFyQjtBQUFzQ25HLGFBQU8sRUFBRUE7QUFBL0MsS0FBRCxDQUFSO0FBQ0F6QixRQUFJLENBQUM2SCxnQ0FBTDtBQUNIOzs7O0FBRU0sV0FBU0MsdUJBQVQsQ0FBaUN4QyxXQUFqQyxFQUFzRHlDLGVBQXRELEVBQStFO0FBQ2xGLFFBQU1DLFdBQVcsR0FBR2hJLElBQUksQ0FBQzBHLGNBQUwsQ0FBb0JwQixXQUFwQixFQUFpQ3lDLGVBQWpDLENBQXBCLENBRGtGLENBRWxGOztBQUNBLFFBQU1FLE9BQU8sR0FBZ0JoQixRQUFRLENBQUNDLGFBQVQsWUFBMkJjLFdBQTNCLEVBQTdCOztBQUNBLFFBQUlDLE9BQUosRUFBYTtBQUNUQSxhQUFPLENBQUNDLGNBQVI7QUFDSDtBQUNKOzs7O0FBTU0sV0FBU0MsU0FBVCxDQUFtQjFGLENBQW5CLEVBQXNCO0FBQ3pCLFFBQUksQ0FBQzdFLEtBQUwsRUFBWTtBQUNSd0IsYUFBTyxDQUFDQyxHQUFSLENBQVksK0NBQVo7QUFDQTtBQUNIOztBQUVELFFBQU0rSSxPQUFPLEdBQUczRixDQUFDLENBQUMyRixPQUFsQjtBQUNBLFFBQU1DLGFBQWEsR0FBRzVGLENBQUMsQ0FBQzZGLE9BQXhCLENBUHlCLENBT1E7O0FBQ2pDLFFBQU1DLGFBQWEsR0FBRzlGLENBQUMsQ0FBQytGLE9BQXhCO0FBQ0EsUUFBTUMsY0FBYyxHQUFHaEcsQ0FBQyxDQUFDaUcsUUFBekI7O0FBRUEsUUFBSUwsYUFBSixFQUFtQjtBQUNmLFVBQUlELE9BQU8sSUFBSSxFQUFYLElBQWlCQSxPQUFPLElBQUksRUFBaEMsRUFBb0MsQ0FDaEM7QUFDSCxPQUZELE1BRU87QUFDSDtBQUNBO0FBQ0g7QUFDSixLQWxCd0IsQ0FvQnpCOzs7QUFDQXpLLHVCQUFtQixHQUFHLENBQXRCOztBQUNBLFFBQUk0SyxhQUFKLEVBQW1CO0FBQ2Y1Syx5QkFBbUIsR0FBRyxDQUFDLENBQXZCO0FBQ0g7O0FBQ0QsUUFBSThLLGNBQUosRUFBb0I7QUFDaEI5Syx5QkFBbUIsR0FBRyxDQUFDLENBQXZCO0FBQ0g7O0FBRUQ4RSxLQUFDLENBQUMyRSxjQUFGOztBQUNBLFlBQVFnQixPQUFSO0FBQ0ksV0FBSyxFQUFMO0FBQVM7QUFDTDNILGdCQUFRLENBQUN5RSxlQUFUO0FBQ0E7O0FBQ0osV0FBSyxFQUFMO0FBQVM7QUFDTDtBQUNBM0gsb0JBQVk7O0FBQ1osWUFBSUEsWUFBWSxHQUFHLENBQW5CLEVBQXNCO0FBQ2xCQSxzQkFBWSxHQUFHLENBQWY7QUFDSDs7QUFDRDZDLFVBQUUsQ0FBQ0MsU0FBSDtBQUNBOztBQUNKLFdBQUssRUFBTDtBQUFTO0FBQ0xqQixlQUFPLENBQUNDLEdBQVIsQ0FBWSxXQUFaLEVBREosQ0FFSTs7QUFDQTlCLG9CQUFZOztBQUNaLFlBQUlBLFlBQVksR0FBRyxDQUFDLENBQXBCLEVBQXVCO0FBQ25CQSxzQkFBWSxHQUFHLENBQUMsQ0FBaEI7QUFDSDs7QUFDRDZDLFVBQUUsQ0FBQ0MsU0FBSDtBQUNBOztBQUNKLFdBQUssRUFBTDtBQUFTO0FBQ0xJLGdCQUFRLENBQUNrRiw4QkFBVCxHQURKLENBQytDOztBQUMzQzs7QUFDSixXQUFLLEVBQUw7QUFBUztBQUNMbEYsZ0JBQVEsQ0FBQ3FGLDZCQUFULEdBREosQ0FDOEM7O0FBQzFDOztBQUNKLFdBQUssR0FBTDtBQUNJMUcsZUFBTyxDQUFDQyxHQUFSLENBQVksSUFBWjtBQUNBOztBQUNKLFdBQUssR0FBTDtBQUNJRCxlQUFPLENBQUNDLEdBQVIsQ0FBWSxJQUFaO0FBQ0E7O0FBQ0osV0FBSyxHQUFMO0FBQ0lELGVBQU8sQ0FBQ0MsR0FBUixDQUFZLElBQVo7QUFDQTs7QUFDSixXQUFLLEdBQUw7QUFDSUQsZUFBTyxDQUFDQyxHQUFSLENBQVksSUFBWjtBQUNBOztBQUNKLFdBQUssR0FBTDtBQUNJRCxlQUFPLENBQUNDLEdBQVIsQ0FBWSxJQUFaO0FBQ0E7O0FBQ0osV0FBSyxHQUFMO0FBQVU7QUFDTkQsZUFBTyxDQUFDQyxHQUFSLENBQVksV0FBWjtBQUNBaUIsdUJBQWU7QUFDZjs7QUFDSixXQUFLLEVBQUw7QUFBUztBQUNMbEIsZUFBTyxDQUFDQyxHQUFSLENBQVksT0FBWixFQURKLENBRUk7O0FBQ0E7O0FBQ0osV0FBSyxFQUFMO0FBQVM7QUFDTEQsZUFBTyxDQUFDQyxHQUFSLENBQVksS0FBWjs7QUFDQSxZQUFJb0osY0FBSixFQUFvQjtBQUNoQjtBQUNBbkkseUJBQWU7QUFDbEIsU0FIRCxNQUdPO0FBQ0g7QUFDQUgscUJBQVc7QUFDZDs7QUFDRDs7QUFDSixXQUFLLENBQUw7QUFBUTtBQUNKSCxZQUFJLENBQUMySSxlQUFMO0FBQ0E7O0FBQ0osV0FBSyxDQUFMO0FBQVE7QUFDSjNJLFlBQUksQ0FBQ0Msa0JBQUw7QUFDQTs7QUFDSixXQUFLLEVBQUw7QUFBUztBQUNMbUYsOEVBQVMsQ0FBQ3dELFNBQVY7QUFDQTs7QUFDSixXQUFLLEVBQUw7QUFBUztBQUNMeEQsOEVBQVMsQ0FBQ3lELFNBQVY7QUFDQTs7QUFDSixXQUFLLEVBQUw7QUFBUztBQUNMLFlBQUlSLGFBQUosRUFBbUI7QUFDZjtBQUNBakQsZ0ZBQVMsQ0FBQzBELGNBQVY7QUFDSCxTQUhELE1BR08sSUFBSUwsY0FBSixFQUFvQjtBQUN2QjtBQUNBaEksa0JBQVEsQ0FBQ21HLCtCQUFUO0FBQ0gsU0FITSxNQUdBO0FBQ0h4QixnRkFBUyxDQUFDeUIsYUFBVjtBQUNIOztBQUNEOztBQUNKLFdBQUssRUFBTDtBQUFTO0FBQ0wsWUFBSXdCLGFBQUosRUFBbUI7QUFDZjtBQUNBakQsZ0ZBQVMsQ0FBQzJELGFBQVY7QUFDSCxTQUhELE1BR08sSUFBSU4sY0FBSixFQUFvQjtBQUN2QjtBQUNBaEksa0JBQVEsQ0FBQ3FHLDhCQUFUO0FBQ0gsU0FITSxNQUdBO0FBQ0gxQixnRkFBUyxDQUFDMkIsYUFBVjtBQUNIOztBQUNEOztBQUNKO0FBQ0ksWUFBSS9JLFFBQVEsQ0FBQ0QsdUJBQVQsQ0FBaUNpTCxjQUFqQyxDQUFnRFosT0FBaEQsQ0FBSixFQUE4RDtBQUMxRHRJLGFBQUcsQ0FBQ0MsV0FBSixDQUFnQi9CLFFBQVEsQ0FBQ0QsdUJBQVQsQ0FBaUNxSyxPQUFqQyxDQUFoQjtBQUNIOztBQUNEO0FBbEdSO0FBb0dIOzs7O0FBRU0sV0FBU2EsT0FBVCxDQUFpQnhHLENBQWpCLEVBQW9CO0FBQ3ZCO0FBQ0EsUUFBSUEsQ0FBQyxDQUFDK0YsT0FBTixFQUFlO0FBQ1g3Syx5QkFBbUIsR0FBRyxDQUF0QjtBQUNILEtBRkQsTUFFTyxJQUFJOEUsQ0FBQyxDQUFDaUcsUUFBTixFQUFnQjtBQUNuQi9LLHlCQUFtQixHQUFHLENBQXRCO0FBQ0g7QUFDSjs7O0FBS00sTUFBTXVMLGVBQWUseUJBQUcsRUFBeEI7QUFDQSxNQUFNQyxnQkFBZ0IsMEJBQUcsR0FBekI7QUFDQSxNQUFNQyxlQUFlLHlCQUFHLEVBQXhCO0FBQ0EsTUFBTUMsZ0JBQWdCLDBCQUFHLEVBQXpCO0FBRVAsTUFBSUMsU0FBUyxHQUFHLElBQWhCO0FBQ0EsTUFBSUMsY0FBYyxHQUFHLENBQXJCO0FBQ0EsTUFBSUMsZUFBZSxHQUFHLENBQXRCOztBQUVPLFdBQVNDLGdCQUFULENBQTBCQyxHQUExQixFQUErQkMsUUFBL0IsRUFBaURDLFNBQWpELEVBQW9FO0FBQ3ZFTixhQUFTLEdBQUdJLEdBQVo7QUFDQUgsa0JBQWMsR0FBR0ksUUFBakI7QUFDQUgsbUJBQWUsR0FBR0ksU0FBbEI7QUFDSDs7OztBQUVNLFdBQVN2SixTQUFULEdBQXFCO0FBQ3hCLFFBQUksQ0FBQ2lKLFNBQUwsRUFBZ0I7QUFDWjtBQUNIOztBQUNELFFBQUlPLENBQUMsR0FBR1AsU0FBUixDQUp3QixDQU14Qjs7QUFDQU8sS0FBQyxDQUFDQyxTQUFGLEdBQWMsTUFBZDtBQUNBRCxLQUFDLENBQUNFLFFBQUYsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxFQUFpQlIsY0FBakIsRUFBaUNDLGVBQWpDO0FBRUFRLGlCQUFhLENBQUNILENBQUQsQ0FBYjtBQUNBSSxpQkFBYSxDQUFDSixDQUFELENBQWI7QUFDQUssaUJBQWEsQ0FBQ0wsQ0FBRCxDQUFiO0FBQ0FNLHVCQUFtQixDQUFDTixDQUFELENBQW5CO0FBQ0g7Ozs7QUFFRCxXQUFTRyxhQUFULENBQXVCSCxDQUF2QixFQUEwQjtBQUN0QkEsS0FBQyxDQUFDTyxXQUFGLEdBQWdCLE1BQWhCO0FBQ0FQLEtBQUMsQ0FBQ1EsU0FBRixHQUFjLEdBQWQ7QUFDQVIsS0FBQyxDQUFDQyxTQUFGLEdBQWMsTUFBZDs7QUFFQSxTQUFLLElBQUlRLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7QUFDekJULE9BQUMsQ0FBQ0UsUUFBRixDQUFXTyxDQUFDLEdBQUdwQixlQUFmLEVBQWdDLENBQWhDLEVBQW1DQSxlQUFuQyxFQUFvREMsZ0JBQXBEO0FBQ0FVLE9BQUMsQ0FBQ1UsVUFBRixDQUFhRCxDQUFDLEdBQUdwQixlQUFqQixFQUFrQyxDQUFsQyxFQUFxQ0EsZUFBckMsRUFBc0RDLGdCQUF0RDtBQUNILEtBUnFCLENBVXRCOzs7QUFDQVUsS0FBQyxDQUFDQyxTQUFGLEdBQWMsTUFBZDtBQUNBRCxLQUFDLENBQUNFLFFBQUYsQ0FBVyxLQUFLYixlQUFoQixFQUFpQyxDQUFqQyxFQUFvQ0EsZUFBcEMsRUFBcURDLGdCQUFyRDtBQUNIOztBQUVELFdBQVNjLGFBQVQsQ0FBdUJKLENBQXZCLEVBQTBCO0FBQ3RCQSxLQUFDLENBQUNDLFNBQUYsR0FBYyxTQUFkOztBQUVBLFNBQUssSUFBSVUsTUFBTSxHQUFHLENBQWxCLEVBQXFCQSxNQUFNLEdBQUcsQ0FBOUIsRUFBaUNBLE1BQU0sRUFBdkMsRUFBMkM7QUFDdkMsV0FBSyxJQUFJQyxHQUFHLEdBQUcsQ0FBZixFQUFrQkEsR0FBRyxHQUFHLENBQXhCLEVBQTJCQSxHQUFHLEVBQTlCLEVBQWtDO0FBQzlCO0FBQ0EsWUFBSUEsR0FBRyxJQUFJLENBQVAsSUFBWUEsR0FBRyxJQUFJLENBQXZCLEVBQTBCO0FBQ3RCLG1CQURzQixDQUNaO0FBQ2I7O0FBRURaLFNBQUMsQ0FBQ0UsUUFBRixDQUFXLEtBQUssTUFBTVUsR0FBRyxHQUFHRCxNQUFNLEdBQUcsQ0FBckIsQ0FBaEIsRUFBeUMsQ0FBekMsRUFBNENwQixlQUE1QyxFQUE2REMsZ0JBQTdEO0FBQ0g7QUFDSixLQVpxQixDQWN0Qjs7O0FBQ0FRLEtBQUMsQ0FBQ0UsUUFBRixDQUFXLEtBQUssSUFBSSxDQUFKLEdBQVEsRUFBeEIsRUFBNEIsQ0FBNUIsRUFBK0IsRUFBL0IsRUFBbUMsRUFBbkM7QUFDSDs7QUFFRCxXQUFTRyxhQUFULENBQXVCTCxDQUF2QixFQUEwQjtBQUN0QkEsS0FBQyxDQUFDYSxTQUFGLEdBQWMsUUFBZCxDQURzQixDQUd0QjtBQUNBOztBQUNBLFNBQUssSUFBSUosQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsSUFBSSxFQUFyQixFQUF5QkEsQ0FBQyxFQUExQixFQUE4QjtBQUMxQixVQUFJSyxTQUFTLEdBQUdMLENBQUMsR0FBRyxFQUFwQjs7QUFDQSxVQUFJN00sU0FBUyxDQUFDbU4sUUFBVixDQUFtQkQsU0FBbkIsQ0FBSixFQUFtQztBQUMvQixZQUFJSCxNQUFNLEdBQUdLLElBQUksQ0FBQ0MsS0FBTCxDQUFXUixDQUFDLEdBQUcsRUFBZixDQUFiO0FBQ0EsWUFBSVMsaUJBQWlCLEdBQUd0TixTQUFTLENBQUN1TixPQUFWLENBQWtCTCxTQUFsQixDQUF4QjtBQUNBLFlBQUlNLGFBQWEsR0FBR1QsTUFBTSxHQUFHLENBQVQsR0FBYU8saUJBQWpDO0FBQ0EsWUFBSUcsU0FBUyxHQUFHeE4sVUFBVSxDQUFDcU4saUJBQUQsQ0FBMUI7O0FBQ0EsWUFBSUcsU0FBUyxJQUFJLEdBQWpCLEVBQXNCO0FBQ2xCckIsV0FBQyxDQUFDc0IsSUFBRixHQUFTLGtCQUFUO0FBQ0gsU0FGRCxNQUVPO0FBQ0h0QixXQUFDLENBQUNzQixJQUFGLEdBQVMsYUFBVDtBQUNIOztBQUNEdEIsU0FBQyxDQUFDQyxTQUFGLEdBQWMsTUFBZDtBQUNBRCxTQUFDLENBQUN1QixRQUFGLENBQVdGLFNBQVgsRUFBc0JELGFBQWEsR0FBRyxFQUFoQixHQUFxQixFQUEzQyxFQUErQyxHQUEvQztBQUNBcEIsU0FBQyxDQUFDc0IsSUFBRixHQUFTLGVBQVQ7QUFDQXRCLFNBQUMsQ0FBQ0MsU0FBRixHQUFjLE1BQWQ7QUFDQUQsU0FBQyxDQUFDdUIsUUFBRixDQUFXZCxDQUFYLEVBQWNXLGFBQWEsR0FBRyxFQUFoQixHQUFxQixFQUFuQyxFQUF1QyxHQUF2QztBQUNIO0FBQ0o7O0FBRURwQixLQUFDLENBQUNzQixJQUFGLEdBQVMsZUFBVDtBQUNBdEIsS0FBQyxDQUFDQyxTQUFGLEdBQWMsTUFBZDtBQUNBRCxLQUFDLENBQUNhLFNBQUYsR0FBYyxRQUFkLENBM0JzQixDQTZCdEI7O0FBQ0EsUUFBTVcsTUFBTSxHQUFHLENBQUM5TixZQUFZLEdBQUcsQ0FBaEIsSUFBcUIsQ0FBcEMsQ0E5QnNCLENBOEJpQjs7QUFDdkMsUUFBTStOLEdBQUcsR0FBR3ROLFFBQVEsQ0FBQ0gsTUFBVCxDQUFnQnFFLE1BQTVCOztBQUNBLFNBQUssSUFBSXFKLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELEdBQXBCLEVBQXlCQyxDQUFDLEVBQTFCLEVBQThCO0FBQzFCMUIsT0FBQyxDQUFDdUIsUUFBRixDQUFXcE4sUUFBUSxDQUFDSCxNQUFULENBQWdCME4sQ0FBaEIsQ0FBWCxFQUErQixDQUFDQSxDQUFDLEdBQUdGLE1BQUwsSUFBZSxFQUFmLEdBQW9CLEVBQW5ELEVBQXVELEdBQXZEO0FBQ0g7QUFDSixHLENBRUQ7OztBQUNBLFdBQVNsQixtQkFBVCxDQUE2Qk4sQ0FBN0IsRUFBZ0M7QUFDNUIsUUFBTXZFLFdBQVcsR0FBR0Ysc0VBQVMsQ0FBQ1kscUJBQVYsRUFBcEI7QUFDQSxRQUFNK0IsZUFBZSxHQUFHM0Msc0VBQVMsQ0FBQ2MseUJBQVYsRUFBeEI7QUFFQSxRQUFNc0YsU0FBUyxHQUFHeEwsSUFBSSxDQUFDbUcscUJBQUwsQ0FBMkI0QixlQUEzQixFQUE0Q3pDLFdBQTVDLENBQWxCOztBQUNBLFFBQUksQ0FBQ2tHLFNBQUwsRUFBZ0I7QUFDWjtBQUNIOztBQUVELFFBQUlwRixLQUFrQixHQUFHb0YsU0FBUyxDQUFDcEYsS0FBbkM7O0FBVDRCLGdEQVVkQSxLQVZjO0FBQUE7O0FBQUE7QUFVNUIsNkRBQXFCO0FBQUEsWUFBWkgsQ0FBWTtBQUNqQixZQUFJMEUsU0FBUyxHQUFHMUUsQ0FBQyxDQUFDd0YsU0FBRixHQUFjLEVBQTlCO0FBRUEsWUFBSUMsV0FBVyxHQUFHYixJQUFJLENBQUNDLEtBQUwsQ0FBVyxDQUFDN0UsQ0FBQyxDQUFDd0YsU0FBRixHQUFjLENBQWYsSUFBb0IsRUFBL0IsQ0FBbEI7QUFFQTVCLFNBQUMsQ0FBQzhCLFNBQUY7O0FBQ0EsWUFBSW5PLFNBQVMsQ0FBQ29OLFFBQVYsQ0FBbUJELFNBQW5CLENBQUosRUFBbUM7QUFDL0I7QUFDQSxjQUFJaUIsYUFBYSxHQUFHRixXQUFXLEdBQUcsQ0FBZCxHQUFrQmxPLFNBQVMsQ0FBQ3dOLE9BQVYsQ0FBa0JMLFNBQWxCLENBQXRDLENBRitCLENBRy9COztBQUNBZCxXQUFDLENBQUNnQyxHQUFGLENBQU1ELGFBQWEsR0FBRyxFQUFoQixHQUFxQixFQUEzQixFQUErQixFQUEvQixFQUFtQyxDQUFuQyxFQUFzQyxDQUF0QyxFQUF5QyxJQUFJZixJQUFJLENBQUNpQixFQUFsRCxFQUFzRCxLQUF0RDtBQUNILFNBTEQsTUFLTztBQUNIO0FBQ0EsY0FBSWIsYUFBYSxHQUFHUyxXQUFXLEdBQUcsQ0FBZCxHQUFrQmpPLFNBQVMsQ0FBQ3VOLE9BQVYsQ0FBa0JMLFNBQWxCLENBQXRDLENBRkcsQ0FJSDs7QUFDQWQsV0FBQyxDQUFDZ0MsR0FBRixDQUFNWixhQUFhLEdBQUcsRUFBaEIsR0FBcUIsRUFBM0IsRUFBK0IsRUFBL0IsRUFBbUMsQ0FBbkMsRUFBc0MsQ0FBdEMsRUFBeUMsSUFBSUosSUFBSSxDQUFDaUIsRUFBbEQsRUFBc0QsS0FBdEQ7QUFDSDs7QUFDRGpDLFNBQUMsQ0FBQ0MsU0FBRixHQUFjLHNCQUFkLENBbEJpQixDQWtCcUI7O0FBQ3RDRCxTQUFDLENBQUNrQyxJQUFGO0FBQ0g7QUE5QjJCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUErQi9CLEcsQ0FFRDs7Ozs7O0FBR0k7QUFDQTtBQUNBO0FBQ0EsUUFBSUMsa0JBQThCLEdBQUcsSUFBckM7QUFDQSxRQUFJQyxtQkFBK0IsR0FBRyxJQUF0Qzs7QUFFQSxRQUFNQyxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQXFCLEdBQU07QUFDN0I5TSxhQUFPLENBQUNDLEdBQVIsQ0FBWSxrQ0FBWjtBQUNBLGFBQU8sSUFBUDtBQUNILEtBSEQ7O0FBSUEsUUFBTThNLG1CQUFtQixHQUFHLFNBQXRCQSxtQkFBc0IsQ0FBQ0MsT0FBRCxFQUFzQjtBQUM5Q2hOLGFBQU8sQ0FBQ0MsR0FBUixDQUFZLDBCQUEwQitNLE9BQXRDO0FBQ0E7QUFDSCxLQUhEOztBQUtPLGFBQVNsTyxLQUFULENBQWUrRCxTQUFmLEVBQWtDO0FBQ3JDK0osd0JBQWtCLEdBQUcsSUFBSXBKLEtBQUosQ0FBVVgsU0FBVixDQUFyQjtBQUNBZ0sseUJBQW1CLEdBQUcsSUFBSXJKLEtBQUosQ0FBVVgsU0FBVixDQUF0QjtBQUNBK0osd0JBQWtCLENBQUNELElBQW5CLENBQXdCRyxrQkFBeEI7QUFDQUQseUJBQW1CLENBQUNGLElBQXBCLENBQXlCSSxtQkFBekI7QUFFQW5NLFVBQUksQ0FBQ3FNLEtBQUw7O0FBQ0EsV0FBSyxJQUFJbEssQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0YsU0FBcEIsRUFBK0JFLENBQUMsRUFBaEMsRUFBb0M7QUFDaENuQyxZQUFJLENBQUNzTSxRQUFMO0FBQ0g7O0FBQ0RsSCw0RUFBUyxDQUFDbUgsWUFBVixDQUF1QnRLLFNBQXZCO0FBQ0g7Ozs7QUFFTSxhQUFTdUssV0FBVCxHQUF1QixDQUFFOzs7O0FBRXpCLGFBQVNqRixxQkFBVCxHQUF5QztBQUM1Q25JLGFBQU8sQ0FBQ0MsR0FBUixDQUFZLHlDQUF5Q1MsR0FBRyxDQUFDMk0sY0FBSixFQUFyRDtBQUNBLFVBQU1DLFVBQVUsR0FBRzFNLElBQUksQ0FBQzZFLHVCQUFMLEVBQW5COztBQUNBLFVBQUkvRSxHQUFHLENBQUMyTSxjQUFKLE9BQXlCLENBQTdCLEVBQWdDO0FBQzVCLFlBQUlFLGtCQUFrQixHQUFHLEVBQXpCO0FBQ0FELGtCQUFVLENBQUNFLE9BQVgsQ0FBbUIsVUFBQ3RLLFNBQUQsRUFBZTtBQUM5QnFLLDRCQUFrQixDQUFDRSxJQUFuQixDQUF3QnZLLFNBQVMsQ0FBQ3dLLFVBQVYsRUFBeEI7QUFDSCxTQUZEO0FBR0EsZUFBT0gsa0JBQWtCLENBQUNJLElBQW5CLENBQXdCLEdBQXhCLENBQVA7QUFDSCxPQU5ELE1BTU87QUFDSDtBQUNBLGVBQU9MLFVBQVUsQ0FBQ0ssSUFBWCxDQUFnQixHQUFoQixDQUFQO0FBQ0g7QUFDSjs7OztBQUNNLGFBQVNDLGtDQUFULEdBQXdEO0FBQzNELFVBQU1DLHFCQUErQixHQUFHLEVBQXhDO0FBQ0EsVUFBTWhMLFNBQVMsR0FBR2pDLElBQUksQ0FBQzhDLFlBQUwsRUFBbEI7O0FBQ0EsV0FBSyxJQUFJd0MsV0FBVyxHQUFHLENBQXZCLEVBQTBCQSxXQUFXLEdBQUdyRCxTQUF4QyxFQUFtRHFELFdBQVcsRUFBOUQsRUFBa0U7QUFDOUQsWUFBSS9FLE1BQU0sQ0FBQzJNLFNBQVAsQ0FBaUI1SCxXQUFqQixDQUFKLEVBQW1DO0FBQy9CMkgsK0JBQXFCLENBQUNKLElBQXRCLENBQTJCdkgsV0FBM0I7QUFDSDtBQUNKOztBQUNELGFBQU8ySCxxQkFBUDtBQUNIOzs7O0FBQ00sYUFBU0Usd0JBQVQsQ0FBa0M3SCxXQUFsQyxFQUF1RDhILGNBQXZELEVBQWlGQyxlQUFqRixFQUE0RztBQUMvR2pPLGFBQU8sQ0FBQ0MsR0FBUixDQUFZLDhCQUE4QmlHLFdBQTlCLEdBQTRDLEdBQTVDLEdBQWtELE9BQU84SCxjQUF6RCxHQUEwRSxHQUExRSxHQUFnRixPQUFPQyxlQUFuRzs7QUFDQSxVQUFJLENBQUNyQixrQkFBTCxFQUF5QjtBQUNyQkEsMEJBQWtCLEdBQUcsRUFBckI7QUFDSDs7QUFDREEsd0JBQWtCLENBQUMxRyxXQUFELENBQWxCLEdBQWtDOEgsY0FBbEM7O0FBQ0EsVUFBSSxDQUFDbkIsbUJBQUwsRUFBMEI7QUFDdEJBLDJCQUFtQixHQUFHLEVBQXRCO0FBQ0g7O0FBQ0RBLHlCQUFtQixDQUFDM0csV0FBRCxDQUFuQixHQUFtQytILGVBQW5DO0FBQ0g7Ozs7QUFFTSxhQUFTQyxVQUFULENBQW9CaEksV0FBcEIsRUFBeUM4RyxPQUF6QyxFQUEyRDtBQUM5RGhOLGFBQU8sQ0FBQ0MsR0FBUixDQUFZLGdCQUFnQmlHLFdBQWhCLEdBQThCLE1BQTlCLEdBQXVDOEcsT0FBbkQ7QUFFQSxVQUFNbUIsWUFBWSxHQUFHdEIsbUJBQW1CLENBQUMzRyxXQUFELENBQXhDOztBQUNBLFVBQUksQ0FBQ2lJLFlBQUwsRUFBbUI7QUFDZm5PLGVBQU8sQ0FBQ0MsR0FBUixDQUFZLDBCQUFaLEVBRGUsQ0FFZjtBQUNILE9BSEQsTUFHTztBQUNIO0FBQ0FrTyxvQkFBWSxDQUFDbkIsT0FBRCxDQUFaO0FBQ0F6TCxvQkFBWSxDQUFDQyxjQUFiO0FBQ0FaLFlBQUksQ0FBQ3dOLFVBQUw7QUFDSDtBQUNKOzs7O0FBRU0sYUFBU04sU0FBVCxDQUFtQjVILFdBQW5CLEVBQWlEO0FBQ3BELFVBQU1tSSxXQUFXLEdBQUd6QixrQkFBa0IsQ0FBQzFHLFdBQUQsQ0FBdEM7O0FBQ0EsVUFBSSxDQUFDbUksV0FBTCxFQUFrQjtBQUNkO0FBQ0EsZUFBTyxLQUFQO0FBQ0gsT0FIRCxNQUdPO0FBQ0gsZUFBT0EsV0FBVyxFQUFsQjtBQUNIO0FBQ0o7Ozs7QUFFTSxhQUFTekssc0JBQVQsR0FBa0M7QUFDckMsVUFBTWYsU0FBUyxHQUFHakMsSUFBSSxDQUFDOEMsWUFBTCxFQUFsQjs7QUFDQSxXQUFLLElBQUl3QyxXQUFXLEdBQUcsQ0FBdkIsRUFBMEJBLFdBQVcsR0FBR3JELFNBQXhDLEVBQW1EcUQsV0FBVyxFQUE5RCxFQUFrRTtBQUM5RCxZQUFJdEYsSUFBSSxDQUFDME4sdUJBQUwsQ0FBNkJwSSxXQUE3QixJQUE0QyxDQUFoRCxFQUFtRDtBQUMvQy9FLGdCQUFNLENBQUMrTSxVQUFQLENBQWtCaEksV0FBbEIsRUFBK0IsSUFBL0I7QUFDSCxTQUZELE1BRU87QUFDSC9FLGdCQUFNLENBQUMrTSxVQUFQLENBQWtCaEksV0FBbEIsRUFBK0IsS0FBL0I7QUFDSDtBQUNKO0FBQ0o7Ozs7QUFDTSxhQUFTcEMsMkJBQVQsR0FBa0Q7QUFDckQsYUFBTzhJLGtCQUFrQixDQUFDMkIsR0FBbkIsQ0FBdUIsVUFBQ0YsV0FBRCxFQUFpQjtBQUMzQyxZQUFJLENBQUNBLFdBQUwsRUFBa0I7QUFDZCxpQkFBTyxLQUFQLENBRGMsQ0FDQTtBQUNqQixTQUZELE1BRU87QUFDSCxjQUFJckIsT0FBTyxHQUFHcUIsV0FBVyxFQUF6QjtBQUNBck8saUJBQU8sQ0FBQ0MsR0FBUixDQUFZK00sT0FBWjtBQUNBLGlCQUFPQSxPQUFQLENBSEcsQ0FHYTtBQUNuQjtBQUNKLE9BUk0sQ0FBUDtBQVNIOzs7O0FBQ00sYUFBU3JKLDJCQUFULENBQXFDNkssd0JBQXJDLEVBQWdGO0FBQ25GLFdBQUssSUFBSXRJLFdBQVcsR0FBRyxDQUF2QixFQUEwQkEsV0FBVyxHQUFHc0ksd0JBQXdCLENBQUMxTCxNQUFqRSxFQUF5RW9ELFdBQVcsRUFBcEYsRUFBd0Y7QUFDcEYsWUFBTXVJLFlBQVksR0FBR0Qsd0JBQXdCLENBQUN0SSxXQUFELENBQTdDO0FBQ0EvRSxjQUFNLENBQUMrTSxVQUFQLENBQWtCaEksV0FBbEIsRUFBK0J1SSxZQUEvQjtBQUNIO0FBQ0o7OztLQXRIWXROLE0sS0FBQUEsTSxPQUFBQSxNLFNBQUFBLE07R0FwVVhILEUsS0FBQUEsRSxTQThiVjs7Ozs7O0FBR0k7QUFDQTtBQUNBLE1BQU0wTixNQUFvQixHQUFHLEVBQTdCO0FBRUEsTUFBSUMsZ0JBQTZCLEdBQUcsSUFBcEM7QUFFQSxNQUFNQywyQkFBd0MsR0FBRyxJQUFJQyxHQUFKLEVBQWpEOztBQUVPLFdBQVM1QixLQUFULEdBQWlCO0FBQ3BCeUIsVUFBTSxDQUFDNUwsTUFBUCxHQUFnQixDQUFoQjtBQUNBbEMsUUFBSSxDQUFDNkgsZ0NBQUw7QUFDQTdILFFBQUksQ0FBQ3dOLFVBQUw7QUFDSDs7OztBQUVNLFdBQVNBLFVBQVQsR0FBc0I7QUFDekJPLG9CQUFnQixHQUFHLElBQW5CO0FBQ0g7Ozs7QUFFTSxXQUFTekIsUUFBVCxHQUFvQjtBQUN2QixRQUFNNEIsS0FBSyxHQUFHLElBQUlDLGdFQUFKLEVBQWQ7QUFDQUQsU0FBSyxDQUFDNUksV0FBTixHQUFvQndJLE1BQU0sQ0FBQzVMLE1BQTNCO0FBQ0E0TCxVQUFNLENBQUNqQixJQUFQLENBQVlxQixLQUFaO0FBQ0FGLCtCQUEyQixDQUFDSSxHQUE1QixDQUFnQ0YsS0FBSyxDQUFDNUksV0FBdEM7QUFDSDs7OztBQUdNLFdBQVM5QyxtQkFBVCxDQUE2QkYsU0FBN0IsRUFBbURnRCxXQUFuRCxFQUFnRjtBQUNuRnRGLFFBQUksQ0FBQ3dOLFVBQUwsR0FEbUYsQ0FDaEU7O0FBRW5CLFFBQU1VLEtBQUssR0FBR0osTUFBTSxDQUFDeEksV0FBRCxDQUFwQjtBQUNBaEQsYUFBUyxDQUFDZ0QsV0FBVixHQUF3QkEsV0FBeEI7QUFDQWhELGFBQVMsQ0FBQ2lELFVBQVYsR0FBdUIySSxLQUFLLENBQUNoTSxNQUE3QjtBQUNBZ00sU0FBSyxDQUFDckIsSUFBTixDQUFXdkssU0FBWDtBQUVBMEwsK0JBQTJCLENBQUNJLEdBQTVCLENBQWdDOUksV0FBaEM7QUFDQSxXQUFPd0ksTUFBTSxDQUFDeEksV0FBRCxDQUFOLENBQW9CcEQsTUFBM0IsQ0FUbUYsQ0FXbkY7QUFDSDs7OztBQUVNLFdBQVNZLFlBQVQsR0FBZ0M7QUFDbkMsV0FBT2dMLE1BQU0sQ0FBQzVMLE1BQWQ7QUFDSDs7OztBQUVNLFdBQVN3TCx1QkFBVCxDQUFpQ3BJLFdBQWpDLEVBQXNEO0FBQ3pELFFBQUlBLFdBQVcsR0FBRyxDQUFkLElBQW1CQSxXQUFXLElBQUl3SSxNQUFNLENBQUM1TCxNQUE3QyxFQUFxRDtBQUNqRCxhQUFPLENBQVA7QUFDSCxLQUZELE1BRU87QUFDSCxhQUFPNEwsTUFBTSxDQUFDeEksV0FBRCxDQUFOLENBQW9CcEQsTUFBM0I7QUFDSDtBQUNKOzs7O0FBRU0sV0FBU21NLFlBQVQsQ0FBc0IvSSxXQUF0QixFQUEyQztBQUM5QyxXQUFPb0ksdUJBQXVCLENBQUNwSSxXQUFELENBQXZCLEtBQXlDLENBQWhEO0FBQ0g7Ozs7QUFFTSxXQUFTbEMsZUFBVCxHQUFtQztBQUN0QyxXQUFPckIsSUFBSSxDQUFDa0IsU0FBTCxDQUFlNkssTUFBZixDQUFQO0FBQ0g7Ozs7QUFFTSxXQUFTN04sa0JBQVQsR0FBOEI7QUFDakMsUUFBTXFGLFdBQVcsR0FBR0Ysc0VBQVMsQ0FBQ1kscUJBQVYsRUFBcEI7QUFDQSxRQUFNc0ksU0FBUyxHQUFHUixNQUFNLENBQUN4SSxXQUFELENBQXhCOztBQUNBLFFBQUlnSixTQUFTLENBQUNwTSxNQUFWLElBQW9CLENBQXhCLEVBQTJCO0FBQ3ZCLFVBQUlxTSxlQUEwQixHQUFHaE0sb0VBQVMsQ0FBQ2lNLEtBQVYsQ0FBZ0JGLFNBQVMsQ0FBQ0csR0FBVixFQUFoQixFQUFpQ0gsU0FBUyxDQUFDRyxHQUFWLEVBQWpDLENBQWpDO0FBQ0F6TyxVQUFJLENBQUN3QyxtQkFBTCxDQUF5QitMLGVBQXpCLEVBQTBDakosV0FBMUM7QUFDQUYsNEVBQVMsQ0FBQ0Msb0JBQVYsQ0FBK0JDLFdBQS9CLEVBQTRDZ0osU0FBUyxDQUFDcE0sTUFBVixHQUFtQixDQUEvRDtBQUNBOEwsaUNBQTJCLENBQUNJLEdBQTVCLENBQWdDOUksV0FBaEM7QUFDQTlFLHFCQUFlO0FBQ2xCO0FBQ0o7Ozs7QUFFTSxXQUFTbUksZUFBVCxHQUEyQjtBQUM5QixRQUFNckQsV0FBVyxHQUFHRixzRUFBUyxDQUFDWSxxQkFBVixFQUFwQjtBQUNBOEgsVUFBTSxDQUFDeEksV0FBRCxDQUFOLENBQW9CbUosR0FBcEI7QUFDQXJKLDBFQUFTLENBQUNDLG9CQUFWLENBQStCQyxXQUEvQixFQUE0Q3dJLE1BQU0sQ0FBQ3hJLFdBQUQsQ0FBTixDQUFvQnBELE1BQXBCLEdBQTZCLENBQXpFO0FBQ0E4TCwrQkFBMkIsQ0FBQ0ksR0FBNUIsQ0FBZ0M5SSxXQUFoQztBQUNBOUUsbUJBQWU7QUFDbEI7Ozs7QUFFTSxXQUFTMkYscUJBQVQsQ0FBK0I0QixlQUEvQixFQUF3RHpDLFdBQXhELEVBQXdGO0FBQzNGLFFBQUlBLFdBQVcsR0FBRyxDQUFkLElBQW1CQSxXQUFXLElBQUl3SSxNQUFNLENBQUM1TCxNQUE3QyxFQUFxRDtBQUNqRCxhQUFPLElBQVA7QUFDSDs7QUFDRCxRQUFNZ00sS0FBSyxHQUFHSixNQUFNLENBQUN4SSxXQUFELENBQXBCOztBQUNBLFFBQUl5QyxlQUFlLEdBQUcsQ0FBbEIsSUFBdUJBLGVBQWUsSUFBSW1HLEtBQUssQ0FBQ2hNLE1BQXBELEVBQTREO0FBQ3hELGFBQU8sSUFBUDtBQUNIOztBQUNELFdBQU9nTSxLQUFLLENBQUNuRyxlQUFELENBQVo7QUFDSDs7OztBQUlNLFdBQVNsRCx1QkFBVCxHQUFnRDtBQUNuRCxRQUFJa0osZ0JBQWdCLEtBQUssSUFBekIsRUFBK0I7QUFDM0IsYUFBT0EsZ0JBQVA7QUFDSDs7QUFDRDNPLFdBQU8sQ0FBQ0MsR0FBUixDQUFZLGdDQUFaO0FBRUEsUUFBTXFOLFVBQXVCLEdBQUcsRUFBaEM7QUFDQSxRQUFJZ0MsY0FBYyxHQUFHLENBQXJCLENBUG1ELENBTzNCOztBQUV4QixRQUFNQyx3QkFBa0MsR0FBRyxFQUEzQyxDQVRtRCxDQVNKOztBQUMvQyxRQUFNMU0sU0FBUyxHQUFHNkwsTUFBTSxDQUFDNUwsTUFBekI7O0FBQ0EsU0FBSyxJQUFJb0QsV0FBVyxHQUFHLENBQXZCLEVBQTBCQSxXQUFXLEdBQUdyRCxTQUF4QyxFQUFtRHFELFdBQVcsRUFBOUQsRUFBa0U7QUFDOURxSiw4QkFBd0IsQ0FBQzlCLElBQXpCLENBQThCLENBQTlCLEVBRDhELENBQzVCO0FBQ3JDLEtBYmtELENBZW5EOzs7QUFDQSxXQUFPLElBQVAsRUFBYTtBQUNULFVBQUkrQixXQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBekI7QUFDQSxVQUFJL0gsYUFBd0IsR0FBRyxJQUEvQjtBQUNBLFVBQUlnSSxrQkFBeUIsR0FBRyxJQUFoQyxDQUhTLENBRzZCO0FBRXRDOztBQUNBLFdBQUssSUFBSXpKLFlBQVcsR0FBRyxDQUF2QixFQUEwQkEsWUFBVyxHQUFHckQsU0FBeEMsRUFBbURxRCxZQUFXLEVBQTlELEVBQWtFO0FBQzlELFlBQU1nSixTQUFTLEdBQUdSLE1BQU0sQ0FBQ3hJLFlBQUQsQ0FBeEI7QUFDQSxZQUFNMEosZUFBZSxHQUFHVixTQUFTLENBQUNwTSxNQUFsQztBQUNBLFlBQU0rTSxvQkFBb0IsR0FBR04sd0JBQXdCLENBQUNySixZQUFELENBQXJEOztBQUVBLFlBQUkwSixlQUFlLEtBQUssQ0FBcEIsSUFBeUIsQ0FBQzVPLEVBQUUsQ0FBQ0csTUFBSCxDQUFVMk0sU0FBVixDQUFvQjVILFlBQXBCLENBQTFCLElBQThEMkosb0JBQW9CLElBQUlELGVBQTFGLEVBQTJHO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSCxTQU5ELE1BTU87QUFDSCxjQUFNMU0sV0FBUyxHQUFHZ00sU0FBUyxDQUFDVyxvQkFBRCxDQUEzQjs7QUFDQSxjQUFJM00sV0FBUyxDQUFDbUQsY0FBVixHQUEyQm1KLFdBQS9CLEVBQTRDO0FBQ3hDQSx1QkFBVyxHQUFHdE0sV0FBUyxDQUFDbUQsY0FBeEI7QUFDQXNCLHlCQUFhLEdBQUd6RSxXQUFoQjtBQUNBeU0sOEJBQWtCLEdBQUdULFNBQXJCO0FBQ0g7QUFDSjtBQUNKLE9BekJRLENBMkJUOzs7QUFDQSxVQUFJLENBQUN2SCxhQUFMLEVBQW9CO0FBQ2hCLGNBRGdCLENBQ1Q7QUFDVixPQUZELE1BRU87QUFDSCxZQUFNbUksRUFBYSxHQUFHbkksYUFBYSxDQUFDb0ksSUFBZCxFQUF0Qjs7QUFDQSxZQUFJRCxFQUFFLENBQUN6SixjQUFILEtBQXNCLENBQUMsQ0FBM0IsRUFBOEI7QUFDMUJ5SixZQUFFLENBQUN6SixjQUFILEdBQW9CaUosY0FBcEI7QUFDSDs7QUFFRCxZQUFNdk0sQ0FBQyxHQUFHNE0sa0JBQWtCLENBQUN6SixXQUE3QjtBQUNBLFlBQU1DLFVBQVUsR0FBR29KLHdCQUF3QixDQUFDeE0sQ0FBRCxDQUEzQztBQUNBK00sVUFBRSxDQUFDM0osVUFBSCxHQUFnQkEsVUFBaEI7QUFFQW9KLGdDQUF3QixDQUFDeE0sQ0FBRCxDQUF4QjtBQUVBdUssa0JBQVUsQ0FBQ0csSUFBWCxDQUFnQnFDLEVBQWhCO0FBQ0FSLHNCQUFjLEdBQUdRLEVBQUUsQ0FBQ3pKLGNBQUgsR0FBb0JuSSx1QkFBckM7QUFDSDtBQUNKOztBQUVEeVEsb0JBQWdCLEdBQUdyQixVQUFuQjtBQUNBLFdBQU9BLFVBQVA7QUFDSDs7OztBQUVNLFdBQVNoRyxjQUFULENBQXdCcEIsV0FBeEIsRUFBcUN5QyxlQUFyQyxFQUFzRDtBQUN6RCxzQkFBV3pDLFdBQVgsZUFBMkJ5QyxlQUEzQjtBQUNIOzs7O0FBRU0sV0FBU0oscUNBQVQsR0FBMkQ7QUFDOUQsV0FBTy9FLEtBQUssQ0FBQ3dNLElBQU4sQ0FBV3BCLDJCQUFYLENBQVA7QUFDSDs7OztBQUVNLFdBQVNuRyxnQ0FBVCxHQUE0QztBQUMvQ21HLCtCQUEyQixDQUFDcUIsS0FBNUI7QUFDSDs7O0dBM0tLclAsSSxLQUFBQSxJOztBQThLVixJQUFNc1AsWUFBWSxHQUFHN08sUUFBckI7QUFDQSxJQUFNOE8sUUFBUSxHQUFHdlAsSUFBakI7QUFDQSxJQUFNd1AsTUFBTSxHQUFHcFAsRUFBZjtBQUNBLElBQU1xUCxVQUFVLEdBQUdyUCxFQUFFLENBQUNHLE1BQXRCOzs7O0FBR1csTUFBTUUsUUFBUSxtQkFBRzZPLFlBQWpCO0FBQ0EsTUFBTXRQLElBQUksZUFBR3VQLFFBQWI7QUFDQSxNQUFNblAsRUFBRSxhQUFHb1AsTUFBWDtBQUNBLE1BQU1qUCxNQUFNLGlCQUFHa1AsVUFBZjtBQUVQLE1BQUlwTyxXQUFtQixHQUFHbkUsNkRBQVMsQ0FBQ3FFLGdCQUFwQyxDLENBQXNEOztBQUMvQyxXQUFTa0wsY0FBVCxHQUEwQjtBQUM3QixXQUFPcEwsV0FBUDtBQUNIOzs7O0FBQ00sV0FBU3FPLGNBQVQsQ0FBd0JDLENBQXhCLEVBQW1DO0FBQ3RDdE8sZUFBVyxHQUFHc08sQ0FBZDtBQUNIOzs7O0FBR00sV0FBU0MsbUJBQVQsQ0FBNkJDLENBQTdCLEVBQTBDO0FBQzdDeFMsWUFBUSxHQUFHd1MsQ0FBWDtBQUNIOzs7O0FBR00sV0FBU0MsS0FBVCxHQUFpQjtBQUNwQjFRLFdBQU8sQ0FBQ0MsR0FBUixDQUFZLGFBQVo7QUFDQWEsa0JBQWMsQ0FBQ2hDLEtBQWY7QUFDQXlDLGdCQUFZLENBQUNJLElBQWI7QUFDQVgsTUFBRSxDQUFDVSx1QkFBSDtBQUNBVixNQUFFLENBQUM0RyxnQkFBSDtBQUNBNUcsTUFBRSxDQUFDQyxTQUFIO0FBQ0g7Ozs7QUFFTSxXQUFTMFAsVUFBVCxHQUFzQjtBQUN6Qm5TLFNBQUssR0FBRyxJQUFJb1MscUVBQUosRUFBUjtBQUNIOzs7O0FBRU0sV0FBU0MsNkJBQVQsQ0FBdUNDLEdBQXZDLEVBQW9EO0FBQ3ZEcFEsT0FBRyxDQUFDNFAsY0FBSixDQUFtQlEsR0FBbkI7QUFDQTlRLFdBQU8sQ0FBQ0MsR0FBUixDQUFZLG1DQUFtQzZRLEdBQS9DO0FBQ0F2UCxnQkFBWSxDQUFDMEMsaUJBQWIsQ0FBK0I2TSxHQUEvQjtBQUNIOzs7O0FBRU0sV0FBU0MsK0NBQVQsQ0FBeURDLFFBQXpELEVBQW1FQyxVQUFuRSxFQUErRTtBQUNsRmpSLFdBQU8sQ0FBQ0MsR0FBUixDQUFZLDBCQUEwQitRLFFBQXRDOztBQUNBLFFBQUksQ0FBQ0EsUUFBTCxFQUFlO0FBQ1g7QUFDSDs7QUFFRGhRLE1BQUUsQ0FBQ0csTUFBSCxDQUFVckMsS0FBVixDQUFnQmtTLFFBQVEsQ0FBQ3RDLE1BQVQsQ0FBZ0I1TCxNQUFoQyxFQU5rRixDQVFsRjs7QUFDQSxRQUFJNkcsYUFBd0IsR0FBRyxJQUEvQjtBQUNBLFFBQUl1SCxZQUFZLEdBQUcsQ0FBQyxDQUFwQjtBQUNBLFFBQUlDLGVBQWUsR0FBRyxDQUFDLENBQXZCLENBWGtGLENBYWxGOztBQWJrRixnREFjOURGLFVBZDhEO0FBQUE7O0FBQUE7QUFjbEYsNkRBQWdDO0FBQUEsWUFBckJHLEtBQXFCO0FBQzVCLFlBQU05USxLQUFJLEdBQUc4USxLQUFLLENBQUM5USxJQUFuQjtBQUNBLFlBQU0rUSxPQUFPLEdBQUdELEtBQUssQ0FBQ0MsT0FBdEIsQ0FGNEIsQ0FHNUI7QUFDQTs7QUFDQSxZQUFJQyxRQUFRLEdBQUdGLEtBQUssQ0FBQ0UsUUFBckIsQ0FMNEIsQ0FLRzs7QUFDL0JBLGdCQUFRLEdBQUc3RixJQUFJLENBQUM4RixLQUFMLENBQVdELFFBQVEsR0FBRyxJQUF0QixJQUE4QixJQUF6QyxDQU40QixDQU1tQjs7QUFDL0MsWUFBTUUsV0FBVyxHQUFHSixLQUFLLENBQUNLLE1BQTFCO0FBQ0EsWUFBTWpSLFNBQVEsR0FBRzRRLEtBQUssQ0FBQ00sTUFBdkI7QUFDQSxZQUFNQyxZQUFZLEdBQUd6SyxrRUFBUyxDQUFDQyxHQUFWLENBQWNxSyxXQUFkLENBQXJCO0FBQ0EsWUFBTUksVUFBVSxHQUFHLElBQUlDLCtEQUFKLENBQVNGLFlBQVQsRUFBdUI7QUFBSTtBQUEzQixVQUEyQ25SLFNBQTNDLENBQW5CLENBVjRCLENBVTZDOztBQUN6RVIsZUFBTyxDQUFDQyxHQUFSLENBQVksY0FBY08sU0FBMUI7QUFDQSxZQUFJMEYsV0FBVyxHQUFHa0wsS0FBSyxDQUFDdEMsS0FBeEIsQ0FaNEIsQ0FZRzs7QUFDL0IsWUFBSSxDQUFDNUksV0FBTCxFQUFrQjtBQUNkQSxxQkFBVyxHQUFHLENBQWQsQ0FEYyxDQUNHO0FBQ3BCOztBQUVELFlBQUltTCxPQUFPLEtBQUsxVCxVQUFVLENBQUNtVSxrQkFBM0IsRUFBK0M7QUFDM0MsY0FBSVIsUUFBUSxJQUFJSixZQUFZLEdBQUdsVCx3Q0FBM0IsSUFBdUVrSSxXQUFXLEtBQUtpTCxlQUEzRixFQUE0RztBQUN4RztBQUNBeEgseUJBQWEsQ0FBQ29JLE9BQWQsQ0FBc0JILFVBQXRCO0FBQ0gsV0FIRCxNQUdPO0FBQ0gsZ0JBQUkxTyxXQUFTLEdBQUcsSUFBSUMsb0VBQUosQ0FBY3lPLFVBQWQsRUFBMEJOLFFBQTFCLEVBQW9DcEwsV0FBcEMsQ0FBaEI7O0FBQ0F0RixnQkFBSSxDQUFDd0MsbUJBQUwsQ0FBeUJGLFdBQXpCLEVBQW9DZ0QsV0FBcEM7QUFDQXlELHlCQUFhLEdBQUd6RyxXQUFoQjtBQUNBaU8sMkJBQWUsR0FBR2pMLFdBQWxCO0FBQ0FnTCx3QkFBWSxHQUFHSSxRQUFmO0FBQ0g7QUFDSixTQVhELE1BV087QUFDSDtBQUNBdFIsaUJBQU8sQ0FBQ0MsR0FBUixDQUFZLGtCQUFaO0FBQ0ErUiw2RUFBVSxDQUFDQyxtQkFBWCxDQUErQjNSLEtBQS9CLEVBQXFDK1EsT0FBckM7QUFDSDtBQUNKO0FBL0NpRjtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQWlEbEZqUSxtQkFBZTtBQUNsQjs7OztBQUlNLFdBQVM4USxvQkFBVCxHQUF3QztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQU1oSyxJQUFJLEdBQUcvRyxNQUFNLENBQUNnSCxxQkFBUCxFQUFiO0FBQ0EsUUFBTWdLLFVBQVUsR0FBR0MsSUFBSSxDQUFDbEssSUFBRCxDQUF2QixDQU4yQyxDQU1aOztBQUMvQixXQUFPaUssVUFBUDtBQUNIOzs7O0FBSU0sV0FBU0Usb0JBQVQsR0FBd0M7QUFDM0M7QUFDQSxRQUFNeEUscUJBQXFCLEdBQUcxTSxNQUFNLENBQUN5TSxrQ0FBUCxFQUE5QjtBQUNBLFFBQU1vRCxRQUFRLEdBQUdnQixtRUFBVSxDQUFDTSxvQkFBWCxDQUFnQ3pFLHFCQUFoQyxFQUF1RGpOLElBQUksQ0FBQzZFLHVCQUFMLEVBQXZELENBQWpCO0FBQ0EsUUFBTTBNLFVBQVUsR0FBR0MsSUFBSSxDQUFDcEIsUUFBRCxDQUF2QixDQUoyQyxDQUlSOztBQUNuQyxXQUFPbUIsVUFBUDtBQUNIOzs7O0FBRU0sV0FBU3hSLFdBQVQsQ0FBcUI0Uix1QkFBckIsRUFBOEU7QUFBQSxRQUFoQ0MsY0FBZ0MsdUVBQU4sSUFBTTtBQUNqRjtBQUNBLFFBQU1qSCxTQUFTLEdBQUdnSCx1QkFBdUIsR0FBRyxFQUE1QztBQUNBLFFBQU01RyxpQkFBaUIsR0FBR3ROLFNBQVMsQ0FBQ3VOLE9BQVYsQ0FBa0JMLFNBQWxCLENBQTFCO0FBQ0EsUUFBTU8sU0FBUyxHQUFHeE4sVUFBVSxDQUFDcU4saUJBQUQsQ0FBNUI7QUFFQSxRQUFJOEcsUUFBUSxHQUFHLENBQWY7O0FBQ0EsUUFBSUQsY0FBSixFQUFvQjtBQUNoQkMsY0FBUSxHQUFHbFUsbUJBQVgsQ0FEZ0IsQ0FDZ0I7QUFFaEM7O0FBQ0EsVUFBSW1VLHNGQUFxQixDQUFDQyxXQUF0QixDQUFrQzdHLFNBQWxDLENBQUosRUFBa0Q7QUFDOUMyRyxnQkFBUSxHQURzQyxDQUNsQztBQUNmLE9BTmUsQ0FPaEI7OztBQUNBLFVBQUlDLHNGQUFxQixDQUFDRSxVQUF0QixDQUFpQzlHLFNBQWpDLENBQUosRUFBaUQ7QUFDN0MyRyxnQkFBUSxHQURxQyxDQUNqQztBQUNmO0FBQ0o7O0FBRUQsUUFBTUksY0FBYyxHQUFHTix1QkFBdUIsR0FBR0UsUUFBMUIsR0FBcUN0VSxZQUFZLEdBQUcsRUFBM0U7O0FBQ0EsUUFBSTBVLGNBQWMsR0FBRyxDQUFqQixJQUFzQkEsY0FBYyxHQUFHLEVBQTNDLEVBQStDO0FBQzNDO0FBQ0g7O0FBRUQsUUFBTTNNLFdBQW1CLEdBQUdGLHNFQUFTLENBQUNZLHFCQUFWLEVBQTVCO0FBQ0EsUUFBTWtNLFdBQW1CLEdBQUdsUyxJQUFJLENBQUN3QyxtQkFBTCxDQUF5QixJQUFJRCxvRUFBSixDQUFjLElBQUkwTywrREFBSixDQUFTZ0IsY0FBVCxDQUFkLENBQXpCLEVBQWtFM00sV0FBbEUsQ0FBNUI7QUFDQS9FLFVBQU0sQ0FBQytNLFVBQVAsQ0FBa0JoSSxXQUFsQixFQUErQixJQUEvQjtBQUVBeEYsT0FBRyxDQUFDdUcsYUFBSixDQUFrQjRMLGNBQWxCO0FBRUE3TSwwRUFBUyxDQUFDQyxvQkFBVixDQUErQkMsV0FBL0IsRUFBNEM0TSxXQUFXLEdBQUcsQ0FBMUQ7QUFDQTFSLG1CQUFlO0FBQ2xCOzs7O0FBRU0sV0FBUzZGLGFBQVQsQ0FBdUI0TCxjQUF2QixFQUF5RDtBQUFBLFFBQWxCclMsUUFBa0IsdUVBQVAsS0FBTzs7QUFDNUQsUUFBSWhDLEtBQUssS0FBSyxJQUFkLEVBQW9CO0FBQ2hCd0IsYUFBTyxDQUFDQyxHQUFSLENBQVksZ0RBQVo7QUFDQTtBQUNIOztBQUNELFFBQU04UyxRQUFRLEdBQUcsR0FBakIsQ0FMNEQsQ0FLdEM7O0FBQ3RCdlUsU0FBSyxDQUFDK0csSUFBTixDQUFXc04sY0FBWCxFQUEyQkUsUUFBM0IsRUFBcUN2UyxRQUFRLEdBQUcsS0FBaEQ7QUFDSDs7OztBQUVNLFdBQVN3UyxhQUFULENBQXVCQyxRQUF2QixFQUFzQztBQUN6QyxRQUFJQSxRQUFRLENBQUNuUSxNQUFULEdBQWtCLENBQXRCLEVBQXlCO0FBQ3JCLFVBQU1vUSxJQUFJLEdBQUdELFFBQVEsQ0FBQyxDQUFELENBQXJCLENBRHFCLENBQ0s7O0FBQzFCakIseUVBQVUsQ0FBQ21CLGFBQVgsQ0FBeUJELElBQXpCLEVBQStCalUsSUFBL0IsQ0FBb0MsVUFBQ21VLFFBQUQsRUFBYztBQUM5Q25WLGdCQUFRLENBQUM7QUFBRXFDLGNBQUksRUFBRWlDLGlFQUFPLENBQUM4USxXQUFSLENBQW9CQztBQUE1QixTQUFELENBQVI7QUFDSCxPQUZEO0FBR0g7QUFDSjs7O0dBcEtLNVMsRyxLQUFBQSxHOztBQXlLS0Esa0VBQWYiLCJmaWxlIjoiLi9hcHBzL2F1dGhvci9waWFuby92Mi9BcHAudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2hhcnBzQW5kRmxhdHNNYW5hZ2VyIGZyb20gXCJhcHBzL2F1dGhvci9waWFuby9zaGFyZWQvU2hhcnBzQW5kRmxhdHNNYW5hZ2VyXCI7XG5pbXBvcnQgSGlnaGxpZ2h0IGZyb20gXCJhcHBzL2F1dGhvci9waWFuby92Mi9IaWdobGlnaHRcIjtcbmltcG9ydCB7IE5vdGUsIE5vdGVHcm91cCwgVHJhY2sgfSBmcm9tIFwiYXBwcy9hdXRob3IvcGlhbm8vdjIvTXVzaWNcIjtcbmltcG9ydCBDb25zdGFudHMgZnJvbSBcImFwcHMvc2hhcmVkL0NvbnN0YW50c1wiO1xuaW1wb3J0IE1JRElGaWxlSU8gZnJvbSBcImFwcHMvc2hhcmVkL21pZGkvTUlESUZpbGVJT1wiO1xuaW1wb3J0IE1JRElVdGlscyBmcm9tIFwiYXBwcy9zaGFyZWQvbWlkaS9NSURJVXRpbHNcIjtcbmltcG9ydCBBY3Rpb25zIGZyb20gXCJhcHBzL3NoYXJlZC9yZWR1eC9BY3Rpb25zXCI7XG5pbXBvcnQgSW5zdHJ1bWVudCBmcm9tIFwiYXBwcy9zaGFyZWQvc291bmQvSW5zdHJ1bWVudFwiO1xuaW1wb3J0IHRocm90dGxlIGZyb20gXCJsb2Rhc2gudGhyb3R0bGVcIjtcblxuY29uc3QgTUlESUV2ZW50cyA9IHJlcXVpcmUoXCJtaWRpZXZlbnRzXCIpO1xuXG5jb25zdCBLZXlzID0gQ29uc3RhbnRzLlN0b3JlS2V5cztcblxuY29uc3QgVElNRV9USFJFU0hPTERfRk9SX0dST1VQSU5HX05FQVJCWV9OT1RFUyA9IDA7IC8vIEFkanVzdCB0aGlzIGZvciBwYXJzaW5nIE1JREkgcmVjb3JkaW5ncyBvZiBwaWFubyBwZXJmb3JtYW5jZXMgYnkgaHVtYW5zIChpLmUuLCBpbXByZWNpc2UgdGltaW5nKS5cblxuLy8gRGlzcGF0Y2ggZXZlbnRzIGFuZCBzZW5kIGRhdGEgdG8gdGhlIGdsb2JhbCBzdG9yZS5cbmxldCBkaXNwYXRjaDogRnVuY3Rpb24gPSBudWxsO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIGRlY2xhcmUgdHlwZXMgdGhhdCBhcmUgZGVmaW5lZCBpbiAzcmQgcGFydHkgbGlicmFyaWVzXG4vLyBUT0RPXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuY29uc3QgVElNRV9CRVRXRUVOX05PVEVHUk9VUFMgPSAyNTA7XG5cbmxldCBvY3RhdmVPZmZzZXQgPSAwO1xuXG4vLyBwaWFubyBrZXkgbnVtYmVycyAlIDEyXG5sZXQgYmxhY2tLZXlzID0gWzIsIC0xLCA1LCA3LCAtMSwgMTAsIDBdOyAvLyAtMSBpcyBmb3IgdGhlIHNwYWNlcyB3aGVyZSB0aGVyZSBhcmUgbm8gYmxhY2sga2V5c1xubGV0IHdoaXRlS2V5cyA9IFsxLCAzLCA0LCA2LCA4LCA5LCAxMV07XG5sZXQgbm90ZUxhYmVscyA9IFtcImFcIiwgXCJiXCIsIFwiY1wiLCBcImRcIiwgXCJlXCIsIFwiZlwiLCBcImdcIl07XG5cbmxldCBzaGFycE9yRmxhdE1vZGlmaWVyID0gMDtcblxubGV0IHBpYW5vID0gbnVsbDtcblxubmFtZXNwYWNlIEtleWJvYXJkIHtcbiAgICAvLyB3aGljaCBjaGFyYWN0ZXIgdG8gdHlwZSB0byBnZXQgdGhlIGNvcnJlc3BvbmRpbmcgd2hpdGUga2V5XG4gICAgZXhwb3J0IGNvbnN0IGxhYmVscyA9IFtcbiAgICAgICAgXCJ6XCIsXG4gICAgICAgIFwieFwiLCAvLyBHIEEgQlxuICAgICAgICBcImNcIixcbiAgICAgICAgXCJ2XCIsXG4gICAgICAgIFwiYlwiLFxuICAgICAgICBcIm5cIixcbiAgICAgICAgXCJtXCIsXG4gICAgICAgIFwiLFwiLFxuICAgICAgICBcIi5cIiwgLy8gQyBEIEUgRiBHIEEgQlxuICAgICAgICBcIi9cIixcbiAgICAgICAgXCJhXCIsXG4gICAgICAgIFwic1wiLFxuICAgICAgICBcImRcIixcbiAgICAgICAgXCJmXCIsXG4gICAgICAgIFwiZ1wiLFxuICAgICAgICBcImhcIiwgLy8gQyBEIEUgRiBHIEEgQlxuICAgICAgICBcImpcIixcbiAgICAgICAgXCJrXCIsXG4gICAgICAgIFwibFwiLFxuICAgICAgICBcIjtcIixcbiAgICAgICAgXCJxXCIsXG4gICAgICAgIFwid1wiLFxuICAgICAgICBcImVcIiwgLy8gQyBEIEUgRiBHIEEgQlxuICAgICAgICBcInJcIixcbiAgICAgICAgXCJ0XCIsXG4gICAgICAgIFwieVwiLFxuICAgICAgICBcInVcIixcbiAgICAgICAgXCJpXCIsXG4gICAgICAgIFwib1wiLFxuICAgICAgICBcInBcIiwgLy8gQyBEIEUgRiBHIEEgQlxuICAgICAgICBcIltcIixcbiAgICAgICAgXCJdXCIsXG4gICAgICAgIFwiXFxcXFwiLFxuICAgICAgICBcIjFcIixcbiAgICAgICAgXCIyXCIsXG4gICAgICAgIFwiM1wiLFxuICAgICAgICBcIjRcIiwgLy8gQyBEIEUgRiBHIEEgQlxuICAgICAgICBcIjVcIixcbiAgICAgICAgXCI2XCIsXG4gICAgICAgIFwiN1wiLFxuICAgICAgICBcIjhcIixcbiAgICAgICAgXCI5XCIsXG4gICAgICAgIFwiMFwiLFxuICAgICAgICBcIi1cIiwgLy8gQyBEIEUgRiBHIEEgQlxuICAgICAgICBcIj1cIiwgLy8gQ1xuICAgIF07XG5cbiAgICAvLyBUT0RPOiBFeHRyYWN0IFwielwiIGFuZCBcImtleUNvZGVUb1BpYW5vS2V5TnVtYmVyXCIgZ2l2ZSBpdCBhIGJldHRlciBuYW1lIVxuICAgIC8vICNUT0RPOiAjWEtXSUFMRFpBIEZJR1VSRSBUSElTIE9VVFxuICAgIC8vIFRoZSBnb2FsIGlzIHRvIG1hdGNoIHRoZSBBcHBsZSBHYXJhZ2VCYW5kIE11c2ljYWwgVHlwaW5nIGtleSBtYXBwaW5nLlxuICAgIC8vIFR5cGUgQSBhbmQgSyBzaG91bGQgaW52b2tlIHRoZSBwaWFubyBrZXkgXCJDXCIuXG4gICAgLy8gWiBzaG91bGQgYmUgb25lIG9jdGF2ZSBsb3dlciB0aGFuIEEuIENvbW1hIHNob3VsZCBiZSB0aGUgc2FtZSBhcyBBLlxuICAgIC8vIFEgc2hvdWxkIGJlIHRoZSBzYW1lIGFzIEsuIEkgc2hvdWxkIGJlIG9uZSBvY3RhdmUgaGlnaGVyIHRoYW4gSy5cbiAgICAvLyBBbGxvd2luZyBmb3IgYSBjdXN0b21pemFibGUgb2Zmc2V0IG1lYW5zIHRoYXQgd2hlbiB3ZSBjaGFuZ2Uga2V5IHNpZ25hdHVyZXMsIHdlIGNhbiBjaGFuZ2UgdGhlIG9mZnNldCBieSBhIGNvdXBsZSBvZiBzZW1pdG9uZXMuXG4gICAgLy8gQW55d2F5cy4uLiBmaWd1cmUgdGhpcyBvdXQgeW8hXG4gICAgY29uc3QgeiA9IC0yO1xuICAgIGV4cG9ydCBjb25zdCBrZXlDb2RlVG9QaWFub0tleU51bWJlciA9IHtcbiAgICAgICAgOTA6IDEzICsgeiwgLy8geiA9PiBBXG4gICAgICAgIDg4OiAxNSArIHosIC8vIHggPT4gQlxuICAgICAgICAvL1xuICAgICAgICA2NzogMTYgKyB6LCAvLyBjID0+IEMyXG4gICAgICAgIDg2OiAxOCArIHosIC8vIHYgPT4gRFxuICAgICAgICA2NjogMjAgKyB6LCAvLyBiID0+IEVcbiAgICAgICAgNzg6IDIxICsgeiwgLy8gbiA9PiBGXG4gICAgICAgIDc3OiAyMyArIHosIC8vIG0gPT4gR1xuICAgICAgICAxODg6IDI1ICsgeiwgLy8gLCA9PiBBXG4gICAgICAgIDE5MDogMjcgKyB6LCAvLyAuID0+IEJcbiAgICAgICAgLy9cbiAgICAgICAgMTkxOiAyOCArIHosIC8vIC8gPT4gQzNcbiAgICAgICAgNjU6IDMwICsgeiwgLy8gYSA9PiBEXG4gICAgICAgIDgzOiAzMiArIHosIC8vIHMgPT4gRVxuICAgICAgICA2ODogMzMgKyB6LCAvLyBkID0+IEZcbiAgICAgICAgNzA6IDM1ICsgeiwgLy8gZiA9PiBHXG4gICAgICAgIDcxOiAzNyArIHosIC8vIGcgPT4gQVxuICAgICAgICA3MjogMzkgKyB6LCAvLyBoID0+IEJcbiAgICAgICAgLy9cbiAgICAgICAgNzQ6IDQwICsgeiwgLy8gaiA9PiBDNCAoTWlkZGxlIEMpXG4gICAgICAgIDc1OiA0MiArIHosIC8vIGsgPT4gRFxuICAgICAgICA3NjogNDQgKyB6LCAvLyBsID0+IEVcbiAgICAgICAgMTg2OiA0NSArIHosIC8vIDsgPT4gRiBpbiBDaHJvbWVcbiAgICAgICAgNTk6IDQ1ICsgeiwgLy8gOyA9PiBGIGluIEZpcmVmb3hcbiAgICAgICAgMjIyOiA0NyArIHosIC8vICcgPT4gR1xuICAgICAgICA4MTogNDcgKyB6LCAvLyBxID0+IEdcbiAgICAgICAgODc6IDQ5ICsgeiwgLy8gdyA9PiBBXG4gICAgICAgIDY5OiA1MSArIHosIC8vIGUgPT4gQlxuICAgICAgICAvL1xuICAgICAgICA4MjogNTIgKyB6LCAvLyByID0+IEM1XG4gICAgICAgIDg0OiA1NCArIHosIC8vIHQgPT4gRFxuICAgICAgICA4OTogNTYgKyB6LCAvLyB5ID0+IEVcbiAgICAgICAgODU6IDU3ICsgeiwgLy8gdSA9PiBGXG4gICAgICAgIDczOiA1OSArIHosIC8vIGkgPT4gR1xuICAgICAgICA3OTogNjEgKyB6LCAvLyBvID0+IEFcbiAgICAgICAgODA6IDYzICsgeiwgLy8gcCA9PiBCXG4gICAgICAgIC8vXG4gICAgICAgIDIxOTogNjQgKyB6LCAvLyBbID0+IEM2XG4gICAgICAgIDIyMTogNjYgKyB6LCAvLyBdID0+IERcbiAgICAgICAgMjIwOiA2OCArIHosIC8vIFxcID0+IEVcblxuICAgICAgICA0OTogNjkgKyB6LCAvLyAxID0+IEZcbiAgICAgICAgNTA6IDcxICsgeiwgLy8gMiA9PiBHXG4gICAgICAgIDUxOiA3MyArIHosIC8vIDMgPT4gQVxuICAgICAgICA1MjogNzUgKyB6LCAvLyA0ID0+IEJcbiAgICAgICAgLy9cbiAgICAgICAgNTM6IDc2ICsgeiwgLy8gNSA9PiBDN1xuICAgICAgICA1NDogNzggKyB6LCAvLyA2ID0+IERcbiAgICAgICAgNTU6IDgwICsgeiwgLy8gNyA9PiBFXG4gICAgICAgIDU2OiA4MSArIHosIC8vIDggPT4gRlxuICAgICAgICA1NzogODMgKyB6LCAvLyA5ID0+IEdcbiAgICAgICAgNDg6IDg1ICsgeiwgLy8gMCA9PiBBXG4gICAgICAgIDE4OTogODcgKyB6LCAvLyAtID0+IEJcbiAgICAgICAgLy9cbiAgICAgICAgMTg3OiA4OCArIHosIC8vID0gPT4gQzhcbiAgICB9O1xufVxuXG4vLyAjVE9ETyBVc2UgdGhlIHdlYm1pZGkgbW9kdWxlIGluc3RlYWQhXG4vLyAjTUlESUFXRUlJWkFJXG5uYW1lc3BhY2UgTUlESVBpYW5vSW5wdXQge1xuICAgIGxldCBudW1Ob3Rlc1ByZXNzZWQ6IG51bWJlciA9IDA7XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgICAgIGlmIChuYXZpZ2F0b3JbXCJyZXF1ZXN0TUlESUFjY2Vzc1wiXSkge1xuICAgICAgICAgICAgbmF2aWdhdG9yW1wicmVxdWVzdE1JRElBY2Nlc3NcIl0oeyBzeXNleDogZmFsc2UgfSkudGhlbihvbk1JRElTdWNjZXNzLCBvbk1JRElGYWlsdXJlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFsZXJ0KFwiTm8gTUlESSBzdXBwb3J0IGluIHlvdXIgYnJvd3Nlci5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbk1JRElTdWNjZXNzKG1pZGlBY2Nlc3MpIHtcbiAgICAgICAgbGV0IG1pZGkgPSBtaWRpQWNjZXNzO1xuICAgICAgICB2YXIgaW5wdXRzID0gbWlkaS5pbnB1dHMudmFsdWVzKCk7XG4gICAgICAgIGZvciAodmFyIGlucHV0ID0gaW5wdXRzLm5leHQoKTsgaW5wdXQgJiYgIWlucHV0LmRvbmU7IGlucHV0ID0gaW5wdXRzLm5leHQoKSkge1xuICAgICAgICAgICAgaW5wdXQudmFsdWUub25taWRpbWVzc2FnZSA9IG9uTUlESU1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbk1JRElGYWlsdXJlKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTm8gYWNjZXNzIHRvIE1JREkgZGV2aWNlcyBvciB5b3VyIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IFdlYk1JREkgQVBJLlwiICsgZXJyb3IpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTUlESU1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICB2YXIgZGF0YSA9IG1lc3NhZ2UuZGF0YTsgLy8gdGhpcyBnaXZlcyB1cyBvdXIgW2NvbW1hbmQvY2hhbm5lbCwgbm90ZSwgdmVsb2NpdHldIGRhdGEuXG5cbiAgICAgICAgdmFyIGNtZCA9IGRhdGFbMF0gPj4gNDtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBkYXRhWzBdICYgMHhmOyAvLyBSaWdodG1vc3QgNCBiaXRzLlxuICAgICAgICB2YXIgdHlwZSA9IGRhdGFbMF0gJiAweGYwOyAvLyA0IGJpdHMgaW4gdGhlIHNlY29uZCByaWdodC1tb3N0IHBvc2l0aW9uLlxuICAgICAgICB2YXIgbm90ZSA9IGRhdGFbMV07XG4gICAgICAgIHZhciB2ZWxvY2l0eSA9IGRhdGFbMl07XG4gICAgICAgIHZhciBwaWFub0tleSA9IG5vdGUgLSAyMDtcblxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgMTQ0OiAvLyBub3RlIG9uXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJwaWFubyBrZXkgZG93bjogXCIgKyBwaWFub0tleSArIFwiIHZlbG9jaXR5OiBcIiArIHZlbG9jaXR5KTtcbiAgICAgICAgICAgICAgICBBcHAucGxheU9uZU5vdGUocGlhbm9LZXksIGZhbHNlKTsgLy8gdGhlIHNlY29uZCBwYXJhbWV0ZXIgKHNldCB0byBmYWxzZSkgd2lsbCBieXBhc3MgYW55IHNoYXJwL2ZsYXQgbW9kaWZpZXJzLlxuICAgICAgICAgICAgICAgIG51bU5vdGVzUHJlc3NlZCsrO1xuICAgICAgICAgICAgICAgIGlmIChudW1Ob3Rlc1ByZXNzZWQgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIFNvbmcubWVyZ2VMYXN0VHdvR3JvdXBzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMjg6IC8vIG5vdGUgb2ZmXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJwaWFubyBrZXkgdXA6IFwiICsgcGlhbm9LZXkpO1xuICAgICAgICAgICAgICAgIG51bU5vdGVzUHJlc3NlZC0tO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyMjQ6IC8vIHBpdGNoIHdoZWVsXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJwaXRjaCB3aGVlbFwiKTsgLy8gZGF0YVsxXSBhbmQgZGF0YVsyXSBpbmRpY2F0ZSB0aGUgYW1vdW50IG9mIHBpdGNoIGJlbmQuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIGlnbm9yZSBmb3Igbm93XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ01JREkgZGF0YScsIGRhdGEpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBjbWQ6ICR7Y21kfSAgY2hhbm5lbDogJHtjaGFubmVsfSAgdHlwZTogJHt0eXBlfSAgbm90ZTogJHtub3RlfSAgdmVsb2NpdHk6ICR7dmVsb2NpdHl9YCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLy8gcmVzZXRzIHRoZSBrZXkgb2Zmc2V0XG5mdW5jdGlvbiByZXNldE9mZnNldCgpIHtcbiAgICBjb25zb2xlLmxvZyhcIlJlc2V0IE9mZnNldHNcIik7XG4gICAgb2N0YXZlT2Zmc2V0ID0gMDtcbiAgICBVSS5kcmF3UGlhbm8oKTtcbn1cblxuZnVuY3Rpb24gcmVzZXRFdmVyeXRoaW5nKCkge1xuICAgIGNvbnNvbGUubG9nKFwiUmVzZXQgRXZlcnl0aGluZyFcIik7XG4gICAgb2N0YXZlT2Zmc2V0ID0gMDtcbiAgICBVSS5UcmFja3Muc2V0dXAoMSk7XG4gICAgc2F2ZUFuZFNob3dEYXRhKCk7XG4gICAgUGxheWJhY2suc3RvcCgpO1xufVxuXG5mdW5jdGlvbiBzYXZlQW5kU2hvd0RhdGEoKSB7XG4gICAgTG9jYWxTdG9yYWdlLnNhdmVDaGVja0JveGVzKCk7XG4gICAgTG9jYWxTdG9yYWdlLnNhdmVUcmFja3MoKTtcbiAgICBVSS5zaG93Tm90ZUdyb3Vwc0ZvclRyYWNrcygpO1xuICAgIFVJLmRyYXdQaWFubygpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxubmFtZXNwYWNlIExvY2FsU3RvcmFnZSB7XG4gICAgZXhwb3J0IGZ1bmN0aW9uIGxvYWQoKSB7XG4gICAgICAgIGxvYWRUcmFja3MoKTtcbiAgICAgICAgbG9hZFZlcnNpb25Ub2dnbGUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkVmVyc2lvblRvZ2dsZSgpIHtcbiAgICAgICAgaWYgKCFsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInNvbmdfdmVyc2lvblwiKSkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJzb25nX3ZlcnNpb25cIiwgXCIxXCIpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzb25nVmVyc2lvbiA9IHBhcnNlSW50KGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwic29uZ192ZXJzaW9uXCIpKTtcbiAgICAgICAgaWYgKHNvbmdWZXJzaW9uIDwgQ29uc3RhbnRzLk1JTl9TT05HX1ZFUlNJT04gfHwgc29uZ1ZlcnNpb24gPiBDb25zdGFudHMuTUFYX1NPTkdfVkVSU0lPTikge1xuICAgICAgICAgICAgc29uZ1ZlcnNpb24gPSAxO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICAgICAgcGF5bG9hZFtLZXlzLlNPTkdfVkVSU0lPTl0gPSBzb25nVmVyc2lvbjtcbiAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25zLlRvZ2dsZS5vblNvbmdWZXJzaW9uRm9ybWF0Q2hhbmdlZCwgcGF5bG9hZDogcGF5bG9hZCB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkVHJhY2tzKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc2F2ZWRUcmFja3MgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidHJhY2tzXCIpKTsgLy8gY2FuIHRocm93IGEgU3ludGF4RXJyb3JcbiAgICAgICAgICAgIGNvbnN0IG51bVRyYWNrcyA9IHNhdmVkVHJhY2tzLmxlbmd0aDtcblxuICAgICAgICAgICAgVUkuVHJhY2tzLnNldHVwKG51bVRyYWNrcyk7XG4gICAgICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IG51bVRyYWNrczsgdCsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNhdmVkVHJhY2sgPSBzYXZlZFRyYWNrc1t0XTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBub3RlR3JvdXBTdHJpbmcgb2Ygc2F2ZWRUcmFjaykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbm90ZUdyb3VwID0gbmV3IE5vdGVHcm91cChub3RlR3JvdXBTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICBTb25nLmFkZE5vdGVHcm91cFRvVHJhY2sobm90ZUdyb3VwLCB0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIFVJLlRyYWNrcy5zZXR1cCgxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRDaGVja2JveGVzKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc2F2ZWRDaGVja2JveFN0YXRlID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImNoZWNrYm94ZXNcIikpOyAvLyBjYW4gdGhyb3cgYSBTeW50YXhFcnJvclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2F2ZWRDaGVja2JveFN0YXRlKSAmJiBzYXZlZENoZWNrYm94U3RhdGUubGVuZ3RoID09PSBTb25nLmdldE51bVRyYWNrcygpKSB7XG4gICAgICAgICAgICAgICAgVUkuVHJhY2tzLnNldENoZWNrZWRTdGF0ZUZvckFsbFRyYWNrcyhzYXZlZENoZWNrYm94U3RhdGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBcIk9PUFNcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgVUkuVHJhY2tzLmNoZWNrQWxsTm9uRW1wdHlUcmFja3MoKTtcbiAgICAgICAgICAgIExvY2FsU3RvcmFnZS5zYXZlQ2hlY2tCb3hlcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNhdmVDaGVja0JveGVzKCkge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNoZWNrYm94ZXNcIiwgSlNPTi5zdHJpbmdpZnkoVUkuVHJhY2tzLmdldENoZWNrZWRTdGF0ZUZvckFsbFRyYWNrcygpKSk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNhdmVUcmFja3MoKSB7XG4gICAgICAgIGxldCB0cmFja3NKU09OID0gU29uZy5nZXRUcmFja3NBc0pTT04oKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0cmFja3NcIiwgdHJhY2tzSlNPTik7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNhdmVWZXJzaW9uVG9nZ2xlKHNvbmdWZXJzaW9uOiBudW1iZXIpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJzb25nX3ZlcnNpb25cIiwgc29uZ1ZlcnNpb24gKyBcIlwiKTtcbiAgICB9XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5jbGFzcyBGYWtlV29ya2VyQ2xvY2sge1xuICAgIHByaXZhdGUgaXNSdW5uaW5nID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBpbnRlcnZhbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBkZWxheSA9IDEwOyAvLyBtcyBiZXR3ZWVuIHRpY2tzXG5cbiAgICBwdWJsaWMgb25tZXNzYWdlOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgcG9zdE1lc3NhZ2UobXNnOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICBjb25zb2xlLmxvZyhzZWxmKTtcbiAgICAgICAgc3dpdGNoIChtc2cpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzdGFydFwiOlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUGlhbm8gQ2xvY2sgV29ya2VyIFN0YXJ0ZWRcIik7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWxmLmlzUnVubmluZykge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmlzUnVubmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5vbm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9ubWVzc2FnZShcInRpY2tcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIHNlbGYuZGVsYXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzdG9wXCI6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUGlhbm8gQ2xvY2sgV29ya2VyIFN0b3BwZWRcIik7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChzZWxmLmludGVydmFsKTtcbiAgICAgICAgICAgICAgICBzZWxmLmlzUnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxubmFtZXNwYWNlIFBsYXliYWNrIHtcbiAgICAvLyBBbGwgdGltZXMgYXJlIGluIG1pbGxpc2Vjb25kcy5cbiAgICBsZXQgY3VyclNvbmdUaW1lID0gMDsgLy8gV2hhdCB0aW1lIGlzIG91ciBwbGF5aGVhZCBwb2ludGluZyB0bz9cbiAgICBsZXQgYmFzZVNvbmdUaW1lID0gMDsgLy8gV2hhdCB0aW1lIGRpZCBvdXIgcGxheWhlYWQgcG9pbnQgdG8gd2hlbiB3ZSBzdGFydGVkIG9yIHJlc3VtZWQgdGhlIHNvbmc/XG4gICAgbGV0IGNsb2NrU3RhcnRUaW1lID0gMDtcblxuICAgIGxldCBjbG9jayA9IG5ldyBGYWtlV29ya2VyQ2xvY2soKTtcbiAgICAvLyBsZXQgY2xvY2sgPSBuZXcgV29ya2VyKFwiLi9jbG9jay53b3JrZXIuanNcIiwgeyB0eXBlOiBcIm1vZHVsZVwiIH0pO1xuICAgIGxldCBjbG9ja0lzVGlja2luZyA9IGZhbHNlO1xuXG4gICAgY2xvY2sub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcGxheU5leHRFdmVudHMocGVyZm9ybWFuY2Uubm93KCkpO1xuICAgIH07XG5cbiAgICBsZXQgY3Vyck5vdGVHcm91cE51bWJlcjogbnVtYmVyID0gMDtcblxuICAgIGxldCBpc1BhdXNlZCA9IGZhbHNlO1xuXG4gICAgbGV0IG5leHRFdmVudFBsYXlUaW1lID0gMDtcblxuICAgIGV4cG9ydCBmdW5jdGlvbiBpc1BsYXlpbmcoKSB7XG4gICAgICAgIHJldHVybiBjbG9ja0lzVGlja2luZztcbiAgICB9XG5cbiAgICAvLyBzdGFydHMgb3IgcmVzdW1lcyBwbGF5YmFja1xuICAgIGV4cG9ydCBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlBMQVlcIik7XG4gICAgICAgIGlmIChpc1BhdXNlZCkge1xuICAgICAgICAgICAgYmFzZVNvbmdUaW1lID0gY3VyclNvbmdUaW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlzUGxheWluZygpKSB7XG4gICAgICAgICAgICAgICAgc3RvcCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTdGFydCB0aGUgTUlESSBwbGF5YmFjay5cbiAgICAgICAgICAgIGNvbnN0IG5vdGVHcm91cHNUb1BsYXkgPSBTb25nLmdldE5vdGVHcm91cHNGcm9tVHJhY2tzKCk7XG5cbiAgICAgICAgICAgIGlmIChub3RlR3JvdXBzVG9QbGF5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIFBsYXliYWNrLnN0b3AoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIERPTkUhXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJOb3RlR3JvdXBOdW1iZXIgPSAwO1xuICAgICAgICAgICAgY3VyclNvbmdUaW1lID0gMDtcbiAgICAgICAgICAgIGJhc2VTb25nVGltZSA9IDA7XG4gICAgICAgICAgICBkZXRlcm1pbmVQbGF5VGltZUZvck5leHRFdmVudCgpO1xuICAgICAgICB9XG4gICAgICAgIGlzUGF1c2VkID0gZmFsc2U7XG4gICAgICAgIGNsb2NrU3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIGNsb2NrLnBvc3RNZXNzYWdlKFwic3RhcnRcIik7XG4gICAgICAgIGNsb2NrSXNUaWNraW5nID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICAgIHN0b3BUaGVDbG9jaygpO1xuICAgICAgICBpc1BhdXNlZCA9IHRydWU7IC8vIE5leHQgdGltZSwgY29udGludWUgZnJvbSB3aGVyZSB3ZSBsZWZ0IG9mZi5cbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gdG9nZ2xlUGxheVBhdXNlKCkge1xuICAgICAgICBpZiAoaXNQbGF5aW5nKCkpIHtcbiAgICAgICAgICAgIHBhdXNlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwbGF5KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgc3RvcFRoZUNsb2NrKCk7XG4gICAgICAgIGN1cnJOb3RlR3JvdXBOdW1iZXIgPSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0b3BUaGVDbG9jaygpIHtcbiAgICAgICAgaWYgKGlzUGxheWluZygpKSB7XG4gICAgICAgICAgICBjbG9jay5wb3N0TWVzc2FnZShcInN0b3BcIik7XG4gICAgICAgICAgICBjbG9ja0lzVGlja2luZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gV2lsbCBiZSBjYWxsZWQgZXZlcnkgfjE2LjY3bXMgaWYgeW91ciBkaXNwbGF5IHJ1bnMgYXQgNjAgRlBTLlxuICAgIGZ1bmN0aW9uIHBsYXlOZXh0RXZlbnRzKGN1cnJUaW1lKSB7XG4gICAgICAgIGNvbnN0IG5vdGVHcm91cHNUb1BsYXkgPSBTb25nLmdldE5vdGVHcm91cHNGcm9tVHJhY2tzKCk7XG4gICAgICAgIC8vIEhhdmUgd2UgcmVhY2hlZCB0aGUgZW5kIG9mIHRoZSBzb25nP1xuICAgICAgICBpZiAoY3Vyck5vdGVHcm91cE51bWJlciA+PSBub3RlR3JvdXBzVG9QbGF5Lmxlbmd0aCkge1xuICAgICAgICAgICAgUGxheWJhY2suc3RvcCgpO1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBET05FIVxuICAgICAgICB9XG5cbiAgICAgICAgY3VyclNvbmdUaW1lID0gY3VyclRpbWUgLSBjbG9ja1N0YXJ0VGltZSArIGJhc2VTb25nVGltZTtcblxuICAgICAgICB3aGlsZSAoY3VyclNvbmdUaW1lID49IG5leHRFdmVudFBsYXlUaW1lKSB7XG4gICAgICAgICAgICAvLyBJbnNwZWN0IHRoZSBuZXh0IGV2ZW50XG4gICAgICAgICAgICBsZXQgbm90ZUdyb3VwOiBOb3RlR3JvdXAgPSBub3RlR3JvdXBzVG9QbGF5W2N1cnJOb3RlR3JvdXBOdW1iZXJdO1xuICAgICAgICAgICAgSGlnaGxpZ2h0LnNldFRyYWNrQW5kTm90ZUdyb3VwKG5vdGVHcm91cC50cmFja051bWJlciwgbm90ZUdyb3VwLm5vdGVOdW1iZXIpO1xuICAgICAgICAgICAgcGxheUN1cnJlbnROb3RlR3JvdXAoKTtcbiAgICAgICAgICAgIGN1cnJOb3RlR3JvdXBOdW1iZXIrKzsgLy8gYWR2YW5jZVxuXG4gICAgICAgICAgICAvLyBIYXZlIHdlIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgc29uZz9cbiAgICAgICAgICAgIGlmIChjdXJyTm90ZUdyb3VwTnVtYmVyID49IG5vdGVHcm91cHNUb1BsYXkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgUGxheWJhY2suc3RvcCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gRE9ORSFcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGV0ZXJtaW5lUGxheVRpbWVGb3JOZXh0RXZlbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRldGVybWluZVBsYXlUaW1lRm9yTmV4dEV2ZW50KCkge1xuICAgICAgICBjb25zdCBub3RlR3JvdXBzVG9QbGF5ID0gU29uZy5nZXROb3RlR3JvdXBzRnJvbVRyYWNrcygpO1xuICAgICAgICBuZXh0RXZlbnRQbGF5VGltZSA9IG5vdGVHcm91cHNUb1BsYXlbY3Vyck5vdGVHcm91cE51bWJlcl0ucGxheVRpbWVNaWxsaXM7XG4gICAgICAgIGlmIChuZXh0RXZlbnRQbGF5VGltZSA9PT0gLTEpIHtcbiAgICAgICAgICAgIG5leHRFdmVudFBsYXlUaW1lID0gY3VyclNvbmdUaW1lICsgVElNRV9CRVRXRUVOX05PVEVHUk9VUFM7IC8vIElmIHRoZSBwbGF5VGltZSBpc24ndCBzcGVjaWZpZWQsIHdlIHBsYXkgdGhlIG5leHQgbm90ZSBldmVyeSAyMDBtcyFcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIE1hbnVhbCBQbGF5YmFjayBvZiB0aGUgc29uZyBvciBpbmRpdmlkdWFsIHRyYWNrcy5cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlQ3Vyck5vdGVHcm91cE51bWJlcigpIHtcbiAgICAgICAgY29uc3Qgbm90ZUdyb3Vwc1RvUGxheSA9IFNvbmcuZ2V0Tm90ZUdyb3Vwc0Zyb21UcmFja3MoKTtcbiAgICAgICAgaWYgKGN1cnJOb3RlR3JvdXBOdW1iZXIgPj0gbm90ZUdyb3Vwc1RvUGxheS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGN1cnJOb3RlR3JvdXBOdW1iZXIgPSBub3RlR3JvdXBzVG9QbGF5Lmxlbmd0aCAtIDE7XG4gICAgICAgIH0gZWxzZSBpZiAoY3Vyck5vdGVHcm91cE51bWJlciA8IDApIHtcbiAgICAgICAgICAgIGN1cnJOb3RlR3JvdXBOdW1iZXIgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGNvbnN0IHBsYXlOb3RlQW5kR29CYWNrd2FyZEluVGhlU29uZyA9IHRocm90dGxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcGxheU5vdGVBbmRBZHZhbmNlSW5EaXJlY3Rpb24oLTEpO1xuICAgIH0sIDE1MCAvKiBtcyAqLyk7XG5cbiAgICBleHBvcnQgY29uc3QgcGxheU5vdGVBbmRHb0ZvcndhcmRJblRoZVNvbmcgPSB0aHJvdHRsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHBsYXlOb3RlQW5kQWR2YW5jZUluRGlyZWN0aW9uKCsxKTtcbiAgICB9LCAxNTAgLyogbXMgKi8pO1xuXG4gICAgZnVuY3Rpb24gcGxheU5vdGVBbmRBZHZhbmNlSW5EaXJlY3Rpb24oZGlyZWN0aW9uOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3Qgbm90ZUdyb3Vwc1RvUGxheSA9IFNvbmcuZ2V0Tm90ZUdyb3Vwc0Zyb21UcmFja3MoKTtcbiAgICAgICAgaWYgKG5vdGVHcm91cHNUb1BsYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFsaWRhdGVDdXJyTm90ZUdyb3VwTnVtYmVyKCk7XG5cbiAgICAgICAgbGV0IG5vdGVHcm91cDogTm90ZUdyb3VwID0gbm90ZUdyb3Vwc1RvUGxheVtjdXJyTm90ZUdyb3VwTnVtYmVyXTtcbiAgICAgICAgSGlnaGxpZ2h0LnNldFRyYWNrQW5kTm90ZUdyb3VwKG5vdGVHcm91cC50cmFja051bWJlciwgbm90ZUdyb3VwLm5vdGVOdW1iZXIpO1xuICAgICAgICBwbGF5Q3VycmVudE5vdGVHcm91cCgpO1xuICAgICAgICBjdXJyTm90ZUdyb3VwTnVtYmVyICs9IGRpcmVjdGlvbjtcbiAgICAgICAgdmFsaWRhdGVDdXJyTm90ZUdyb3VwTnVtYmVyKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGxheUN1cnJlbnROb3RlR3JvdXAoKSB7XG4gICAgICAgIGNvbnN0IHQgPSBIaWdobGlnaHQuZ2V0Q3VycmVudFRyYWNrTnVtYmVyKCk7XG4gICAgICAgIGNvbnN0IG4gPSBIaWdobGlnaHQuZ2V0Q3VycmVudE5vdGVHcm91cE51bWJlcigpO1xuICAgICAgICBjb25zdCBub3RlR3JvdXAgPSBTb25nLmdldE5vdGVHcm91cEZyb21UcmFjayhuLCB0KTtcbiAgICAgICAgaWYgKCFub3RlR3JvdXApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IG5vdGUgb2Ygbm90ZUdyb3VwLm5vdGVzKSB7XG4gICAgICAgICAgICBBcHAucGxheVBpYW5vTm90ZShNSURJVXRpbHMubTJwKG5vdGUubWlkaU5vdGUpLCBub3RlLnZlbG9jaXR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICAgICAgcGF5bG9hZFtLZXlzLlBMQVlFRF9OT1RFR1JPVVBfSURdID0gU29uZy5nZXROb3RlR3JvdXBJRCh0LCBuKTtcbiAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25zLlNvbmcub25QbGF5Tm90ZUdyb3VwLCBwYXlsb2FkOiBwYXlsb2FkIH0pO1xuICAgIH1cblxuICAgIGV4cG9ydCBjb25zdCBwbGF5QW5kR29CYWNrd2FyZE9uQ3VycmVudFRyYWNrID0gdGhyb3R0bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICBwbGF5Q3VycmVudE5vdGVHcm91cCgpO1xuICAgICAgICBIaWdobGlnaHQucHJldk5vdGVHcm91cCgpO1xuICAgIH0sIDE1MCAvKiBtcyAqLyk7XG5cbiAgICBleHBvcnQgY29uc3QgcGxheUFuZEdvRm9yd2FyZE9uQ3VycmVudFRyYWNrID0gdGhyb3R0bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICBwbGF5Q3VycmVudE5vdGVHcm91cCgpO1xuICAgICAgICBIaWdobGlnaHQubmV4dE5vdGVHcm91cCgpO1xuICAgIH0sIDE1MCAvKiBtcyAqLyk7XG59XG5cbm5hbWVzcGFjZSBVSSB7XG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNldHVwQ29weUhhbmRsZXIoKSB7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJodG1sXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjb3B5XCIsIGZ1bmN0aW9uIChlOiBDbGlwYm9hcmRFdmVudCkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDT1BZXCIpO1xuICAgICAgICAgICAgaWYgKGUuY2xpcGJvYXJkRGF0YSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBVSS5UcmFja3MuZ2V0VGV4dEZpbGVGcm9tVHJhY2tzKCk7XG4gICAgICAgICAgICAgICAgZS5jbGlwYm9hcmREYXRhLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIHRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImh0bWxcIikuYWRkRXZlbnRMaXN0ZW5lcihcImN1dFwiLCBmdW5jdGlvbiAoZTogQ2xpcGJvYXJkRXZlbnQpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ1VUXCIpO1xuICAgICAgICAgICAgaWYgKGUuY2xpcGJvYXJkRGF0YSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBVSS5UcmFja3MuZ2V0VGV4dEZpbGVGcm9tVHJhY2tzKCk7XG4gICAgICAgICAgICAgICAgZS5jbGlwYm9hcmREYXRhLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIHRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzZXRFdmVyeXRoaW5nKCk7IC8vIFNldCB0aGUgdGV4dCBmaWVsZHMgdG8gZW1wdHkgc3RyaW5ncy5cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNob3dOb3RlR3JvdXBzRm9yVHJhY2tzKCkge1xuICAgICAgICBVSS5UcmFja3MuY2hlY2tBbGxOb25FbXB0eVRyYWNrcygpO1xuICAgICAgICBIaWdobGlnaHQudXBkYXRlKCk7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICAgICAgcGF5bG9hZFtLZXlzLlVQREFURURfVFJBQ0tTX0xJU1RdID0gU29uZy5nZXRSZWNlbnRseVVwZGF0ZWRUcmFja051bWJlcnNBc0FycmF5KCk7XG4gICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9ucy5Tb25nLm9uVHJhY2tzVXBkYXRlZCwgcGF5bG9hZDogcGF5bG9hZCB9KTtcbiAgICAgICAgU29uZy5yZXNldFJlY2VudGx5VXBkYXRlZFRyYWNrTnVtYmVycygpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBzY3JvbGxOb3RlR3JvdXBJbnRvVmlldyh0cmFja051bWJlcjogbnVtYmVyLCBub3RlR3JvdXBOdW1iZXI6IG51bWJlcikge1xuICAgICAgICBjb25zdCBub3RlR3JvdXBJRCA9IFNvbmcuZ2V0Tm90ZUdyb3VwSUQodHJhY2tOdW1iZXIsIG5vdGVHcm91cE51bWJlcik7XG4gICAgICAgIC8vIFNjcm9sbCB0aGUgZGl2cyBhbGwgdGhlIHdheSB0byB0aGUgcmlnaHQgdG8gbWFrZSBzdXJlIHRoZSBtb3N0IHJlY2VudCBOb3RlR3JvdXBzIGFyZSB2aXNpYmxlLlxuICAgICAgICBjb25zdCBlbGVtZW50ID0gPEhUTUxFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke25vdGVHcm91cElEfWApO1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgZWxlbWVudC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAvLyBNT1VTRSAmIEtFWUJPQVJEXG5cbiAgICBleHBvcnQgZnVuY3Rpb24gb25LZXlEb3duKGUpIHtcbiAgICAgICAgaWYgKCFwaWFubykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJVSS5vbktleURvd246IFBpYW5vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBrZXlDb2RlID0gZS5rZXlDb2RlO1xuICAgICAgICBjb25zdCBtZXRhS2V5SXNEb3duID0gZS5tZXRhS2V5OyAvLyBlLm1ldGFLZXkgPT4gQ01EICg5MSBpcyBMRUZUIENNRCAmIDkzIGlzIFJJR0hUIENNRClcbiAgICAgICAgY29uc3QgY3RybEtleUlzRG93biA9IGUuY3RybEtleTtcbiAgICAgICAgY29uc3Qgc2hpZnRLZXlJc0Rvd24gPSBlLnNoaWZ0S2V5O1xuXG4gICAgICAgIGlmIChtZXRhS2V5SXNEb3duKSB7XG4gICAgICAgICAgICBpZiAoa2V5Q29kZSA9PSAzNyB8fCBrZXlDb2RlID09IDM5KSB7XG4gICAgICAgICAgICAgICAgLy8gRE8gTk9USElORy4gRmFsbCB0aHJvdWdoIHNvIHRoYXQgd2UgY2FuIGRvIENNRCArIExFRlQgQVJST1cgYW5kIENNRCArIFJJR0hUIEFSUk9XLlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgd2hlbiB3ZSBoYXZlIHRoZSBDTUQgcHJlc3NlZCBkb3duLCBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlIGJyb3dzZXIncyBob3RrZXlzLlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENUUkwgPT4gRkxBVCBhbmQgU0hJRlQgPT4gU0hBUlBcbiAgICAgICAgc2hhcnBPckZsYXRNb2RpZmllciA9IDA7XG4gICAgICAgIGlmIChjdHJsS2V5SXNEb3duKSB7XG4gICAgICAgICAgICBzaGFycE9yRmxhdE1vZGlmaWVyID0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoaWZ0S2V5SXNEb3duKSB7XG4gICAgICAgICAgICBzaGFycE9yRmxhdE1vZGlmaWVyID0gKzE7XG4gICAgICAgIH1cblxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHN3aXRjaCAoa2V5Q29kZSkge1xuICAgICAgICAgICAgY2FzZSAxMzogLy8gRU5URVJcbiAgICAgICAgICAgICAgICBQbGF5YmFjay50b2dnbGVQbGF5UGF1c2UoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzM6IC8vIFBBR0UgVVAgfCBmbiArIFVQX0FSUk9XXG4gICAgICAgICAgICAgICAgLy8gVXAgYW4gb2N0YXZlLlxuICAgICAgICAgICAgICAgIG9jdGF2ZU9mZnNldCsrO1xuICAgICAgICAgICAgICAgIGlmIChvY3RhdmVPZmZzZXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG9jdGF2ZU9mZnNldCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFVJLmRyYXdQaWFubygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzNDogLy8gUEFHRSBET1dOIHwgZm4gKyBET1dOX0FSUk9XXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJmbiArIERPV05cIik7XG4gICAgICAgICAgICAgICAgLy8gRG93biBhbiBvY3RhdmUuXG4gICAgICAgICAgICAgICAgb2N0YXZlT2Zmc2V0LS07XG4gICAgICAgICAgICAgICAgaWYgKG9jdGF2ZU9mZnNldCA8IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIG9jdGF2ZU9mZnNldCA9IC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBVSS5kcmF3UGlhbm8oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzY6IC8vIEhPTUUgfCBmbiArIExFRlRfQVJST1dcbiAgICAgICAgICAgICAgICBQbGF5YmFjay5wbGF5Tm90ZUFuZEdvQmFja3dhcmRJblRoZVNvbmcoKTsgLy8gRmluZCB0aGUgcHJldmlvdXMgbm90ZSB0byBwbGF5IHZpYSByb3VuZCByb2Jpbi5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzU6IC8vIEVORCB8IGZuICsgUklHSFRfQVJST1dcbiAgICAgICAgICAgICAgICBQbGF5YmFjay5wbGF5Tm90ZUFuZEdvRm9yd2FyZEluVGhlU29uZygpOyAvLyBGaW5kIHRoZSBuZXh0IG5vdGUgdG8gcGxheSB2aWEgcm91bmQgcm9iaW4uXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkYxXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMTM6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJGMlwiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTE0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRjNcIik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkY0XCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMTY6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJGNVwiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTkyOiAvLyB+ID09IFNISUZUICsgYFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU0hJRlQgKyBgXCIpO1xuICAgICAgICAgICAgICAgIHJlc2V0RXZlcnl0aGluZygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzMjogLy8gU1BBQ0UgQkFSXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTUEFDRVwiKTtcbiAgICAgICAgICAgICAgICAvLyB4eHhcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjc6IC8vIEVTQ1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRVNDXCIpO1xuICAgICAgICAgICAgICAgIGlmIChzaGlmdEtleUlzRG93bikge1xuICAgICAgICAgICAgICAgICAgICAvLyBTSElGVCArIEVTQ1xuICAgICAgICAgICAgICAgICAgICByZXNldEV2ZXJ5dGhpbmcoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBFU0MgcmVzZXRzIHRoZSBvY3RhdmUgb2Zmc2V0c1xuICAgICAgICAgICAgICAgICAgICByZXNldE9mZnNldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgODogLy8gQkFDS1NQQUNFL0RFTFxuICAgICAgICAgICAgICAgIFNvbmcuZGVsZXRlTGFzdEdyb3VwKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDk6IC8vIFRBQlxuICAgICAgICAgICAgICAgIFNvbmcubWVyZ2VMYXN0VHdvR3JvdXBzKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM4OiAvLyBVUFxuICAgICAgICAgICAgICAgIEhpZ2hsaWdodC5wcmV2VHJhY2soKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNDA6IC8vIERPV05cbiAgICAgICAgICAgICAgICBIaWdobGlnaHQubmV4dFRyYWNrKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM3OiAvLyBMRUZUXG4gICAgICAgICAgICAgICAgaWYgKG1ldGFLZXlJc0Rvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ01EICsgTEVGVCBqdW1wcyB0byB0aGUgZmlyc3Qgbm90ZWdyb3VwIG9mIHRoZSBjdXJyZW50bHkgaGlnaGxpZ2h0ZWQgdHJhY2suXG4gICAgICAgICAgICAgICAgICAgIEhpZ2hsaWdodC5maXJzdE5vdGVHcm91cCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hpZnRLZXlJc0Rvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU0hJRlQgKyBMRUZUXG4gICAgICAgICAgICAgICAgICAgIFBsYXliYWNrLnBsYXlBbmRHb0JhY2t3YXJkT25DdXJyZW50VHJhY2soKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBIaWdobGlnaHQucHJldk5vdGVHcm91cCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzk6IC8vIFJJR0hUXG4gICAgICAgICAgICAgICAgaWYgKG1ldGFLZXlJc0Rvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ01EICsgUklHSFQganVtcHMgdG8gdGhlIGxhc3Qgbm90ZWdyb3VwIG9mIHRoZSBjdXJyZW50bHkgaGlnaGxpZ2h0ZWQgdHJhY2suXG4gICAgICAgICAgICAgICAgICAgIEhpZ2hsaWdodC5sYXN0Tm90ZUdyb3VwKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzaGlmdEtleUlzRG93bikge1xuICAgICAgICAgICAgICAgICAgICAvLyBTSElGVCArIFJJR0hUXG4gICAgICAgICAgICAgICAgICAgIFBsYXliYWNrLnBsYXlBbmRHb0ZvcndhcmRPbkN1cnJlbnRUcmFjaygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIEhpZ2hsaWdodC5uZXh0Tm90ZUdyb3VwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAoS2V5Ym9hcmQua2V5Q29kZVRvUGlhbm9LZXlOdW1iZXIuaGFzT3duUHJvcGVydHkoa2V5Q29kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgQXBwLnBsYXlPbmVOb3RlKEtleWJvYXJkLmtleUNvZGVUb1BpYW5vS2V5TnVtYmVyW2tleUNvZGVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gb25LZXlVcChlKSB7XG4gICAgICAgIC8vIFJlbGVhc2VkIENUUkwgb3IgU0hJRlRcbiAgICAgICAgaWYgKGUuY3RybEtleSkge1xuICAgICAgICAgICAgc2hhcnBPckZsYXRNb2RpZmllciA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgc2hhcnBPckZsYXRNb2RpZmllciA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIC8vIFRoZSBQaWFubyBWaXN1YWxpemF0aW9uIChDYW52YXMgMkQpXG4gICAgZXhwb3J0IGNvbnN0IFdISVRFX0tFWV9XSURUSCA9IDIwO1xuICAgIGV4cG9ydCBjb25zdCBXSElURV9LRVlfSEVJR0hUID0gMTIwO1xuICAgIGV4cG9ydCBjb25zdCBCTEFDS19LRVlfV0lEVEggPSAxNjtcbiAgICBleHBvcnQgY29uc3QgQkxBQ0tfS0VZX0hFSUdIVCA9IDcyO1xuXG4gICAgbGV0IGNvbnRleHQyZCA9IG51bGw7XG4gICAgbGV0IGNvbnRleHQyZFdpZHRoID0gMDtcbiAgICBsZXQgY29udGV4dDJkSGVpZ2h0ID0gMDtcblxuICAgIGV4cG9ydCBmdW5jdGlvbiBzZXRDYW52YXNDb250ZXh0KGMyZCwgYzJkV2lkdGg6IG51bWJlciwgYzJkSGVpZ2h0OiBudW1iZXIpIHtcbiAgICAgICAgY29udGV4dDJkID0gYzJkO1xuICAgICAgICBjb250ZXh0MmRXaWR0aCA9IGMyZFdpZHRoO1xuICAgICAgICBjb250ZXh0MmRIZWlnaHQgPSBjMmRIZWlnaHQ7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRyYXdQaWFubygpIHtcbiAgICAgICAgaWYgKCFjb250ZXh0MmQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYyA9IGNvbnRleHQyZDtcblxuICAgICAgICAvLyBjbGVhciB0aGUgYmFja2dyb3VuZFxuICAgICAgICBjLmZpbGxTdHlsZSA9IFwiIzMzM1wiO1xuICAgICAgICBjLmZpbGxSZWN0KDAsIDAsIGNvbnRleHQyZFdpZHRoLCBjb250ZXh0MmRIZWlnaHQpO1xuXG4gICAgICAgIGRyYXdXaGl0ZUtleXMoYyk7XG4gICAgICAgIGRyYXdCbGFja0tleXMoYyk7XG4gICAgICAgIGRyYXdLZXlMYWJlbHMoYyk7XG4gICAgICAgIGRyYXdNb3N0UmVjZW50R3JvdXAoYyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZHJhd1doaXRlS2V5cyhjKSB7XG4gICAgICAgIGMuc3Ryb2tlU3R5bGUgPSBcIiMwMDBcIjtcbiAgICAgICAgYy5saW5lV2lkdGggPSAwLjI7XG4gICAgICAgIGMuZmlsbFN0eWxlID0gXCIjRkZGXCI7XG5cbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCA1MjsgaysrKSB7XG4gICAgICAgICAgICBjLmZpbGxSZWN0KGsgKiBXSElURV9LRVlfV0lEVEgsIDAsIFdISVRFX0tFWV9XSURUSCwgV0hJVEVfS0VZX0hFSUdIVCk7XG4gICAgICAgICAgICBjLnN0cm9rZVJlY3QoayAqIFdISVRFX0tFWV9XSURUSCwgMCwgV0hJVEVfS0VZX1dJRFRILCBXSElURV9LRVlfSEVJR0hUKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhpZ2hsaWdodCBNaWRkbGUgQyBpbiBmYWludCByZWQuXG4gICAgICAgIGMuZmlsbFN0eWxlID0gXCIjRkNDXCI7XG4gICAgICAgIGMuZmlsbFJlY3QoMjMgKiBXSElURV9LRVlfV0lEVEgsIDAsIFdISVRFX0tFWV9XSURUSCwgV0hJVEVfS0VZX0hFSUdIVCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZHJhd0JsYWNrS2V5cyhjKSB7XG4gICAgICAgIGMuZmlsbFN0eWxlID0gXCIjMzIzMjMyXCI7XG5cbiAgICAgICAgZm9yIChsZXQgb2N0YXZlID0gMDsgb2N0YXZlIDwgNzsgb2N0YXZlKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGtleSA9IDA7IGtleSA8IDc7IGtleSsrKSB7XG4gICAgICAgICAgICAgICAgLy8gQSMgPSBrZXkgMDsgQyMgPSBrZXkgMjsgRyMgPSBrZXkgNlxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT0gMSB8fCBrZXkgPT0gNCkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsgLy8gc2tpcCBCIyBhbmQgRSNcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjLmZpbGxSZWN0KDEyICsgMjAgKiAoa2V5ICsgb2N0YXZlICogNyksIDAsIEJMQUNLX0tFWV9XSURUSCwgQkxBQ0tfS0VZX0hFSUdIVCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoaWdoZXN0IGJsYWNrIGtleVxuICAgICAgICBjLmZpbGxSZWN0KDEyICsgNyAqIDcgKiAyMCwgMCwgMTYsIDcyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkcmF3S2V5TGFiZWxzKGMpIHtcbiAgICAgICAgYy50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xuXG4gICAgICAgIC8vIGRyYXcgdGhlIHBpYW5vIGtleSBudW1iZXJzIGZvciB0aGUgd2hpdGUga2V5c1xuICAgICAgICAvLyBhbHNvIGRyYXcgdGhlIG5vdGUgbmFtZVxuICAgICAgICBmb3IgKGxldCBrID0gMTsgayA8PSA4ODsgaysrKSB7XG4gICAgICAgICAgICBsZXQgcmVtYWluZGVyID0gayAlIDEyO1xuICAgICAgICAgICAgaWYgKHdoaXRlS2V5cy5pbmNsdWRlcyhyZW1haW5kZXIpKSB7XG4gICAgICAgICAgICAgICAgbGV0IG9jdGF2ZSA9IE1hdGguZmxvb3IoayAvIDEyKTtcbiAgICAgICAgICAgICAgICBsZXQgd2hpdGVLZXlOb3RlSW5kZXggPSB3aGl0ZUtleXMuaW5kZXhPZihyZW1haW5kZXIpO1xuICAgICAgICAgICAgICAgIGxldCB3aGl0ZUtleUluZGV4ID0gb2N0YXZlICogNyArIHdoaXRlS2V5Tm90ZUluZGV4O1xuICAgICAgICAgICAgICAgIGxldCBub3RlTGFiZWwgPSBub3RlTGFiZWxzW3doaXRlS2V5Tm90ZUluZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAobm90ZUxhYmVsID09IFwiY1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGMuZm9udCA9IFwiYm9sZCAxM3B4IFRhaG9tYVwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGMuZm9udCA9IFwiMTNweCBUYWhvbWFcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYy5maWxsU3R5bGUgPSBcIiM3NzdcIjtcbiAgICAgICAgICAgICAgICBjLmZpbGxUZXh0KG5vdGVMYWJlbCwgd2hpdGVLZXlJbmRleCAqIDIwICsgMTAsIDEwMCk7XG4gICAgICAgICAgICAgICAgYy5mb250ID0gXCIxMnB4IENvbnNvbGFzXCI7XG4gICAgICAgICAgICAgICAgYy5maWxsU3R5bGUgPSBcIiM5OTlcIjtcbiAgICAgICAgICAgICAgICBjLmZpbGxUZXh0KGssIHdoaXRlS2V5SW5kZXggKiAyMCArIDEwLCAxMTUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYy5mb250ID0gXCIxNXB4IENvbnNvbGFzXCI7XG4gICAgICAgIGMuZmlsbFN0eWxlID0gXCIjRkZGXCI7XG4gICAgICAgIGMudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcblxuICAgICAgICAvLyBkcmF3IHRoZSBjdXJyZW50IGNoYXJhY3RlciB0byBwcmVzcywgdW5kZXIgdGhlIGNvcnJlY3Qga2V5IVxuICAgICAgICBjb25zdCBvZmZzZXQgPSAob2N0YXZlT2Zmc2V0ICsgMSkgKiA3OyAvLyBzdGFydCBvbiBBIChrZXkgMTMpXG4gICAgICAgIGNvbnN0IGxlbiA9IEtleWJvYXJkLmxhYmVscy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGMuZmlsbFRleHQoS2V5Ym9hcmQubGFiZWxzW2ldLCAoaSArIG9mZnNldCkgKiAyMCArIDEwLCAxNDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZHJhdyB0aGUgaGlnaGxpZ2h0ZWQgZ3JvdXA/XG4gICAgZnVuY3Rpb24gZHJhd01vc3RSZWNlbnRHcm91cChjKSB7XG4gICAgICAgIGNvbnN0IHRyYWNrTnVtYmVyID0gSGlnaGxpZ2h0LmdldEN1cnJlbnRUcmFja051bWJlcigpO1xuICAgICAgICBjb25zdCBub3RlR3JvdXBOdW1iZXIgPSBIaWdobGlnaHQuZ2V0Q3VycmVudE5vdGVHcm91cE51bWJlcigpO1xuXG4gICAgICAgIGNvbnN0IGxhc3RHcm91cCA9IFNvbmcuZ2V0Tm90ZUdyb3VwRnJvbVRyYWNrKG5vdGVHcm91cE51bWJlciwgdHJhY2tOdW1iZXIpO1xuICAgICAgICBpZiAoIWxhc3RHcm91cCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5vdGVzOiBBcnJheTxOb3RlPiA9IGxhc3RHcm91cC5ub3RlcztcbiAgICAgICAgZm9yIChsZXQgbiBvZiBub3Rlcykge1xuICAgICAgICAgICAgbGV0IHJlbWFpbmRlciA9IG4ucGlhbm9Ob3RlICUgMTI7XG5cbiAgICAgICAgICAgIGxldCBvY3RhdmVJbmRleCA9IE1hdGguZmxvb3IoKG4ucGlhbm9Ob3RlIC0gMSkgLyAxMik7XG5cbiAgICAgICAgICAgIGMuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBpZiAoYmxhY2tLZXlzLmluY2x1ZGVzKHJlbWFpbmRlcikpIHtcbiAgICAgICAgICAgICAgICAvLyBpcyBpdCBhIGJsYWNrIGtleT9cbiAgICAgICAgICAgICAgICBsZXQgYmxhY2tLZXlJbmRleCA9IG9jdGF2ZUluZGV4ICogNyArIGJsYWNrS2V5cy5pbmRleE9mKHJlbWFpbmRlcik7XG4gICAgICAgICAgICAgICAgLy8gYmxhY2sga2V5cyBhcmUgMTZweCB3aWRlXG4gICAgICAgICAgICAgICAgYy5hcmMoYmxhY2tLZXlJbmRleCAqIDIwICsgMjAsIDYwLCA2LCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB3aGl0ZSwgd2UgbWFwIGl0IHRvIG9uZSBvZiB0aGUgNTIgd2hpdGUga2V5c1xuICAgICAgICAgICAgICAgIGxldCB3aGl0ZUtleUluZGV4ID0gb2N0YXZlSW5kZXggKiA3ICsgd2hpdGVLZXlzLmluZGV4T2YocmVtYWluZGVyKTtcblxuICAgICAgICAgICAgICAgIC8vIHdoaXRlIGtleXMgYXJlIDIwcHggd2lkZVxuICAgICAgICAgICAgICAgIGMuYXJjKHdoaXRlS2V5SW5kZXggKiAyMCArIDEwLCA5NiwgNywgMCwgMiAqIE1hdGguUEksIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGMuZmlsbFN0eWxlID0gXCJyZ2JhKDIyMCwyMjAsMTAsLjgyKVwiOyAvLyBmaWxsIHRoZSB5ZWxsb3cgY2lyY2xlXG4gICAgICAgICAgICBjLmZpbGwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBUcmFja3Mge1xuICAgICAgICAvLyBCaW5kaW5ncyB0byBvdXIgUmVhY3QgY29tcG9uZW50IHN0YXRlLlxuICAgICAgICAvLyBXZSBjYW4gcXVlcnkgd2hldGhlciBhIHRyYWNrJ3MgY2hlY2tib3ggaXNDaGVja2VkLlxuICAgICAgICAvLyBXZSBjYW4gY2FsbCBzZXRDaGVja2VkIHRvIGNoYW5nZSB0aGUgdHJhY2sncyBjaGVja2VkIHN0YXRlLlxuICAgICAgICBsZXQgaXNDaGVja2VkQ2FsbGJhY2tzOiBGdW5jdGlvbltdID0gbnVsbDtcbiAgICAgICAgbGV0IHNldENoZWNrZWRDYWxsYmFja3M6IEZ1bmN0aW9uW10gPSBudWxsO1xuXG4gICAgICAgIGNvbnN0IGRlZmF1bHRJc0NoZWNrZWRDQiA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiREVGQVVMVCBJUy1DSEVDS0VELiBSRVRVUk4gVFJVRS5cIik7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZGVmYXVsdFNldENoZWNrZWRDQiA9IChjaGVja2VkOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRFRkFVTFQgU0VUIENIRUNLRUQ6IFwiICsgY2hlY2tlZCk7XG4gICAgICAgICAgICAvKiBOTy1PUCAqL1xuICAgICAgICB9O1xuXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBzZXR1cChudW1UcmFja3M6IG51bWJlcikge1xuICAgICAgICAgICAgaXNDaGVja2VkQ2FsbGJhY2tzID0gbmV3IEFycmF5KG51bVRyYWNrcyk7XG4gICAgICAgICAgICBzZXRDaGVja2VkQ2FsbGJhY2tzID0gbmV3IEFycmF5KG51bVRyYWNrcyk7XG4gICAgICAgICAgICBpc0NoZWNrZWRDYWxsYmFja3MuZmlsbChkZWZhdWx0SXNDaGVja2VkQ0IpO1xuICAgICAgICAgICAgc2V0Q2hlY2tlZENhbGxiYWNrcy5maWxsKGRlZmF1bHRTZXRDaGVja2VkQ0IpO1xuXG4gICAgICAgICAgICBTb25nLnJlc2V0KCk7XG4gICAgICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IG51bVRyYWNrczsgdCsrKSB7XG4gICAgICAgICAgICAgICAgU29uZy5hZGRUcmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSGlnaGxpZ2h0LnNldHVwSW5kZXhlcyhudW1UcmFja3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGFkZE5ld1RyYWNrKCkge31cblxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gZ2V0VGV4dEZpbGVGcm9tVHJhY2tzKCk6IHN0cmluZyB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImdldFRleHRGaWxlRnJvbVRyYWNrcyBTb25nIFZlcnNpb246IFwiICsgQXBwLmdldFNvbmdWZXJzaW9uKCkpO1xuICAgICAgICAgICAgY29uc3Qgbm90ZUdyb3VwcyA9IFNvbmcuZ2V0Tm90ZUdyb3Vwc0Zyb21UcmFja3MoKTtcbiAgICAgICAgICAgIGlmIChBcHAuZ2V0U29uZ1ZlcnNpb24oKSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGxldCBub3RlR3JvdXBWMVN0cmluZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBub3RlR3JvdXBzLmZvckVhY2goKG5vdGVHcm91cCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBub3RlR3JvdXBWMVN0cmluZ3MucHVzaChub3RlR3JvdXAudG9TdHJpbmdWMSgpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm90ZUdyb3VwVjFTdHJpbmdzLmpvaW4oXCIgXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBzb25nVmVyc2lvbiA9PT0gMlxuICAgICAgICAgICAgICAgIHJldHVybiBub3RlR3JvdXBzLmpvaW4oXCIgXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRUcmFja051bWJlcnNUb0luY2x1ZGVJbk1JRElGaWxlKCk6IG51bWJlcltdIHtcbiAgICAgICAgICAgIGNvbnN0IHRyYWNrTnVtYmVyc1RvSW5jbHVkZTogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IG51bVRyYWNrcyA9IFNvbmcuZ2V0TnVtVHJhY2tzKCk7XG4gICAgICAgICAgICBmb3IgKGxldCB0cmFja051bWJlciA9IDA7IHRyYWNrTnVtYmVyIDwgbnVtVHJhY2tzOyB0cmFja051bWJlcisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKFRyYWNrcy5pc0NoZWNrZWQodHJhY2tOdW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYWNrTnVtYmVyc1RvSW5jbHVkZS5wdXNoKHRyYWNrTnVtYmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJhY2tOdW1iZXJzVG9JbmNsdWRlO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBzZXRUcmFja0NoZWNrZWRDYWxsYmFja3ModHJhY2tOdW1iZXI6IG51bWJlciwgaXNUcmFja0NoZWNrZWQ6IEZ1bmN0aW9uLCBzZXRUcmFja0NoZWNrZWQ6IEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInNldFRyYWNrQ2hlY2tlZENhbGxiYWNrcyBcIiArIHRyYWNrTnVtYmVyICsgXCIgXCIgKyB0eXBlb2YgaXNUcmFja0NoZWNrZWQgKyBcIiBcIiArIHR5cGVvZiBzZXRUcmFja0NoZWNrZWQpO1xuICAgICAgICAgICAgaWYgKCFpc0NoZWNrZWRDYWxsYmFja3MpIHtcbiAgICAgICAgICAgICAgICBpc0NoZWNrZWRDYWxsYmFja3MgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlzQ2hlY2tlZENhbGxiYWNrc1t0cmFja051bWJlcl0gPSBpc1RyYWNrQ2hlY2tlZDtcbiAgICAgICAgICAgIGlmICghc2V0Q2hlY2tlZENhbGxiYWNrcykge1xuICAgICAgICAgICAgICAgIHNldENoZWNrZWRDYWxsYmFja3MgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldENoZWNrZWRDYWxsYmFja3NbdHJhY2tOdW1iZXJdID0gc2V0VHJhY2tDaGVja2VkO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIHNldENoZWNrZWQodHJhY2tOdW1iZXI6IG51bWJlciwgY2hlY2tlZDogYm9vbGVhbikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJzZXRDaGVja2VkIFwiICsgdHJhY2tOdW1iZXIgKyBcIiA9PiBcIiArIGNoZWNrZWQpO1xuXG4gICAgICAgICAgICBjb25zdCBzZXRDaGVja2VkQ0IgPSBzZXRDaGVja2VkQ2FsbGJhY2tzW3RyYWNrTnVtYmVyXTtcbiAgICAgICAgICAgIGlmICghc2V0Q2hlY2tlZENCKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJOVUxMIFNFVENIRUNLRUQgQ0FMTEJBQ0tcIik7XG4gICAgICAgICAgICAgICAgLy8gRE8gTk9USElOR1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAjVE9ETzogSWYgdGhlIHZhbHVlIGhhcyBub3QgY2hhbmdlZCwgZG8gbm90aGluZy5cbiAgICAgICAgICAgICAgICBzZXRDaGVja2VkQ0IoY2hlY2tlZCk7XG4gICAgICAgICAgICAgICAgTG9jYWxTdG9yYWdlLnNhdmVDaGVja0JveGVzKCk7XG4gICAgICAgICAgICAgICAgU29uZy5yZXNldENhY2hlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gaXNDaGVja2VkKHRyYWNrTnVtYmVyOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgICAgIGNvbnN0IGlzQ2hlY2tlZENCID0gaXNDaGVja2VkQ2FsbGJhY2tzW3RyYWNrTnVtYmVyXTtcbiAgICAgICAgICAgIGlmICghaXNDaGVja2VkQ0IpIHtcbiAgICAgICAgICAgICAgICAvLyBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzQ2hlY2tlZENCKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gY2hlY2tBbGxOb25FbXB0eVRyYWNrcygpIHtcbiAgICAgICAgICAgIGNvbnN0IG51bVRyYWNrcyA9IFNvbmcuZ2V0TnVtVHJhY2tzKCk7XG4gICAgICAgICAgICBmb3IgKGxldCB0cmFja051bWJlciA9IDA7IHRyYWNrTnVtYmVyIDwgbnVtVHJhY2tzOyB0cmFja051bWJlcisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKFNvbmcuZ2V0TnVtTm90ZUdyb3Vwc0luVHJhY2sodHJhY2tOdW1iZXIpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBUcmFja3Muc2V0Q2hlY2tlZCh0cmFja051bWJlciwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgVHJhY2tzLnNldENoZWNrZWQodHJhY2tOdW1iZXIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGdldENoZWNrZWRTdGF0ZUZvckFsbFRyYWNrcygpOiBib29sZWFuW10ge1xuICAgICAgICAgICAgcmV0dXJuIGlzQ2hlY2tlZENhbGxiYWNrcy5tYXAoKGlzQ2hlY2tlZENCKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0NoZWNrZWRDQikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIElmIHRoZSBjYWxsYmFjayBpcyB1bmRlZmluZWQgb3IgbnVsbCwgd2UgY29uc2lkZXIgdGhhdCB0cmFjayBcIk5PVCBDSEVDS0VEXCIuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoZWNrZWQgPSBpc0NoZWNrZWRDQigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjaGVja2VkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrZWQ7IC8vIE90aGVyd2lzZSwgd2UgY2FsbCB0aGUgY2FsbGJhY2sgdG8gZGV0ZXJtaW5lIHRoZSBjdXJyZW50IGNoZWNrZWQgc3RhdGUuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIHNldENoZWNrZWRTdGF0ZUZvckFsbFRyYWNrcyhjaGVja2VkU3RhdGVGb3JBbGxUcmFja3M6IGJvb2xlYW5bXSk6IHZvaWQge1xuICAgICAgICAgICAgZm9yIChsZXQgdHJhY2tOdW1iZXIgPSAwOyB0cmFja051bWJlciA8IGNoZWNrZWRTdGF0ZUZvckFsbFRyYWNrcy5sZW5ndGg7IHRyYWNrTnVtYmVyKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGVja2VkU3RhdGUgPSBjaGVja2VkU3RhdGVGb3JBbGxUcmFja3NbdHJhY2tOdW1iZXJdO1xuICAgICAgICAgICAgICAgIFRyYWNrcy5zZXRDaGVja2VkKHRyYWNrTnVtYmVyLCBjaGVja2VkU3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxubmFtZXNwYWNlIFNvbmcge1xuICAgIC8vIFN1cHBvcnQgbXVsdGkgdHJhY2sgTUlESSBzb25ncy5cbiAgICAvLyBXaGVuIHdlIGNvbXBvc2UgYnkgaGFuZCwgc3RpY2sgZXZlcnl0aGluZyBpbiB0cmFjayAwLlxuICAgIGNvbnN0IHRyYWNrczogQXJyYXk8VHJhY2s+ID0gW107XG5cbiAgICBsZXQgY2FjaGVkTm90ZUdyb3VwczogTm90ZUdyb3VwW10gPSBudWxsO1xuXG4gICAgY29uc3QgcmVjZW50bHlVcGRhdGVkVHJhY2tOdW1iZXJzOiBTZXQ8bnVtYmVyPiA9IG5ldyBTZXQoKTtcblxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgICAgdHJhY2tzLmxlbmd0aCA9IDA7XG4gICAgICAgIFNvbmcucmVzZXRSZWNlbnRseVVwZGF0ZWRUcmFja051bWJlcnMoKTtcbiAgICAgICAgU29uZy5yZXNldENhY2hlKCk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlc2V0Q2FjaGUoKSB7XG4gICAgICAgIGNhY2hlZE5vdGVHcm91cHMgPSBudWxsO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBhZGRUcmFjaygpIHtcbiAgICAgICAgY29uc3QgdHJhY2sgPSBuZXcgVHJhY2soKTtcbiAgICAgICAgdHJhY2sudHJhY2tOdW1iZXIgPSB0cmFja3MubGVuZ3RoO1xuICAgICAgICB0cmFja3MucHVzaCh0cmFjayk7XG4gICAgICAgIHJlY2VudGx5VXBkYXRlZFRyYWNrTnVtYmVycy5hZGQodHJhY2sudHJhY2tOdW1iZXIpO1xuICAgIH1cblxuICAgIC8vIFJldHVybjogdGhlIG5ldyBsZW5ndGggb2YgdGhlIHNwZWNpZmllZCB0cmFjay5cbiAgICBleHBvcnQgZnVuY3Rpb24gYWRkTm90ZUdyb3VwVG9UcmFjayhub3RlR3JvdXA6IE5vdGVHcm91cCwgdHJhY2tOdW1iZXI6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIFNvbmcucmVzZXRDYWNoZSgpOyAvLyBFdmVyeSB0aW1lIHdlIG1vZGlmeSB0aGUgdHJhY2tzLCB3ZSBuZWVkIHRvIGludmFsaWRhdGUgdGhlIGNhY2hlLlxuXG4gICAgICAgIGNvbnN0IHRyYWNrID0gdHJhY2tzW3RyYWNrTnVtYmVyXTtcbiAgICAgICAgbm90ZUdyb3VwLnRyYWNrTnVtYmVyID0gdHJhY2tOdW1iZXI7XG4gICAgICAgIG5vdGVHcm91cC5ub3RlTnVtYmVyID0gdHJhY2subGVuZ3RoO1xuICAgICAgICB0cmFjay5wdXNoKG5vdGVHcm91cCk7XG5cbiAgICAgICAgcmVjZW50bHlVcGRhdGVkVHJhY2tOdW1iZXJzLmFkZCh0cmFja051bWJlcik7XG4gICAgICAgIHJldHVybiB0cmFja3NbdHJhY2tOdW1iZXJdLmxlbmd0aDtcblxuICAgICAgICAvLyBXZSBjYWxsIHNhdmVBbmRTaG93RGF0YSgpIGVsc2V3aGVyZSFcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gZ2V0TnVtVHJhY2tzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0cmFja3MubGVuZ3RoO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXROdW1Ob3RlR3JvdXBzSW5UcmFjayh0cmFja051bWJlcjogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0cmFja051bWJlciA8IDAgfHwgdHJhY2tOdW1iZXIgPj0gdHJhY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdHJhY2tzW3RyYWNrTnVtYmVyXS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gaXNUcmFja0VtcHR5KHRyYWNrTnVtYmVyOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIGdldE51bU5vdGVHcm91cHNJblRyYWNrKHRyYWNrTnVtYmVyKSA9PT0gMDtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gZ2V0VHJhY2tzQXNKU09OKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0cmFja3MpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBtZXJnZUxhc3RUd29Hcm91cHMoKSB7XG4gICAgICAgIGNvbnN0IHRyYWNrTnVtYmVyID0gSGlnaGxpZ2h0LmdldEN1cnJlbnRUcmFja051bWJlcigpO1xuICAgICAgICBjb25zdCBjdXJyVHJhY2sgPSB0cmFja3NbdHJhY2tOdW1iZXJdO1xuICAgICAgICBpZiAoY3VyclRyYWNrLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgICBsZXQgbWVyZ2VkTm90ZUdyb3VwOiBOb3RlR3JvdXAgPSBOb3RlR3JvdXAubWVyZ2UoY3VyclRyYWNrLnBvcCgpLCBjdXJyVHJhY2sucG9wKCkpO1xuICAgICAgICAgICAgU29uZy5hZGROb3RlR3JvdXBUb1RyYWNrKG1lcmdlZE5vdGVHcm91cCwgdHJhY2tOdW1iZXIpO1xuICAgICAgICAgICAgSGlnaGxpZ2h0LnNldFRyYWNrQW5kTm90ZUdyb3VwKHRyYWNrTnVtYmVyLCBjdXJyVHJhY2subGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICByZWNlbnRseVVwZGF0ZWRUcmFja051bWJlcnMuYWRkKHRyYWNrTnVtYmVyKTtcbiAgICAgICAgICAgIHNhdmVBbmRTaG93RGF0YSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZUxhc3RHcm91cCgpIHtcbiAgICAgICAgY29uc3QgdHJhY2tOdW1iZXIgPSBIaWdobGlnaHQuZ2V0Q3VycmVudFRyYWNrTnVtYmVyKCk7XG4gICAgICAgIHRyYWNrc1t0cmFja051bWJlcl0ucG9wKCk7XG4gICAgICAgIEhpZ2hsaWdodC5zZXRUcmFja0FuZE5vdGVHcm91cCh0cmFja051bWJlciwgdHJhY2tzW3RyYWNrTnVtYmVyXS5sZW5ndGggLSAxKTtcbiAgICAgICAgcmVjZW50bHlVcGRhdGVkVHJhY2tOdW1iZXJzLmFkZCh0cmFja051bWJlcik7XG4gICAgICAgIHNhdmVBbmRTaG93RGF0YSgpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXROb3RlR3JvdXBGcm9tVHJhY2sobm90ZUdyb3VwTnVtYmVyOiBudW1iZXIsIHRyYWNrTnVtYmVyOiBudW1iZXIpOiBOb3RlR3JvdXAge1xuICAgICAgICBpZiAodHJhY2tOdW1iZXIgPCAwIHx8IHRyYWNrTnVtYmVyID49IHRyYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRyYWNrID0gdHJhY2tzW3RyYWNrTnVtYmVyXTtcbiAgICAgICAgaWYgKG5vdGVHcm91cE51bWJlciA8IDAgfHwgbm90ZUdyb3VwTnVtYmVyID49IHRyYWNrLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRyYWNrW25vdGVHcm91cE51bWJlcl07XG4gICAgfVxuXG4gICAgLy8gUmV0cmlldmUgdGhlIG5vdGVncm91cHMgdG8gcGxheSBvciBzYXZlIHRvIGZpbGUuXG4gICAgLy8gVGhlIHJlc3VsdHMgYXJlIGNhY2hlZCEgV2UgaW52YWxpZGF0ZSB0aGUgY2FjaGUgYW55dGltZSB3ZSBhZGQgb3Igc3VidHJhY3Qgbm90ZXMsIG9yIGNoYW5nZSB0aGUgc3RhdGUgb2YgdGhlIGNoZWNrYm94ZXMuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldE5vdGVHcm91cHNGcm9tVHJhY2tzKCk6IE5vdGVHcm91cFtdIHtcbiAgICAgICAgaWYgKGNhY2hlZE5vdGVHcm91cHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWROb3RlR3JvdXBzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKFwiUmVjb21wdXRlIENhY2hlZCBOb3RlR3JvdXBzISEhXCIpO1xuXG4gICAgICAgIGNvbnN0IG5vdGVHcm91cHM6IE5vdGVHcm91cFtdID0gW107XG4gICAgICAgIGxldCBjdXJyVGltZU1pbGxpcyA9IDA7IC8vIFVzZWQgd2hlbiBvdXIgTm90ZUdyb3VwcyBkb24ndCBoYXZlIHZhbGlkIHRpbWluZyBpbmZvcm1hdGlvbiAoaS5lLiwgbWFudWFsIGVudHJ5KS5cblxuICAgICAgICBjb25zdCBub3RlR3JvdXBQb2ludGVyRm9yVHJhY2s6IG51bWJlcltdID0gW107IC8vIEtlZXAgcG9pbnRlcnMgdG8gdGhlIGN1cnJlbnQgTm90ZUdyb3VwcyB3ZSBhcmUgbG9va2luZyBhdC4gT25lIHBvaW50ZXIvY3Vyc29yIHBlciB0cmFjay5cbiAgICAgICAgY29uc3QgbnVtVHJhY2tzID0gdHJhY2tzLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgdHJhY2tOdW1iZXIgPSAwOyB0cmFja051bWJlciA8IG51bVRyYWNrczsgdHJhY2tOdW1iZXIrKykge1xuICAgICAgICAgICAgbm90ZUdyb3VwUG9pbnRlckZvclRyYWNrLnB1c2goMCk7IC8vIFN0YXJ0IGEgaW5kZXggMCAodGhlIGZpcnN0IE5vdGVHcm91cCBvZiBlYWNoIHRyYWNrKS5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJvdW5kIHJvYmluIGJldHdlZW4gdGhlIHRyYWNrcyB1bnRpbCB3ZSBpbnNlcnQgYWxsIHRoZSBOb3RlR3JvdXBzIHByb3Blcmx5LiBBbHdheXMgY2hvb3NlIHRoZSBOb3RlR3JvdXAgd2l0aCB0aGUgbWluaW11bSBwbGF5VGltZS5cbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGxldCBtaW5QbGF5VGltZSA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgICAgICBsZXQgbmV4dE5vdGVHcm91cDogTm90ZUdyb3VwID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBuZXh0Tm90ZUdyb3VwVHJhY2s6IFRyYWNrID0gbnVsbDsgLy8gV2hpY2ggdHJhY2sgY29udGFpbnMgdGhlIG5leHQgbm90ZSBncm91cCB0byBwbGF5P1xuXG4gICAgICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIHRoZSB0cmFja3MgdG8gZmluZCB0aGUgbmV4dCBOb3RlR3JvdXAgdG8gcGxheS5cbiAgICAgICAgICAgIGZvciAobGV0IHRyYWNrTnVtYmVyID0gMDsgdHJhY2tOdW1iZXIgPCBudW1UcmFja3M7IHRyYWNrTnVtYmVyKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyVHJhY2sgPSB0cmFja3NbdHJhY2tOdW1iZXJdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJUcmFja0xlbmd0aCA9IGN1cnJUcmFjay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgY29uc3QgY3Vyck5vdGVHcm91cFBvaW50ZXIgPSBub3RlR3JvdXBQb2ludGVyRm9yVHJhY2tbdHJhY2tOdW1iZXJdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJUcmFja0xlbmd0aCA9PT0gMCB8fCAhVUkuVHJhY2tzLmlzQ2hlY2tlZCh0cmFja051bWJlcikgfHwgY3Vyck5vdGVHcm91cFBvaW50ZXIgPj0gY3VyclRyYWNrTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElnbm9yZSB0aGlzIHRyYWNrIGlmOlxuICAgICAgICAgICAgICAgICAgICAvLyAgIGl0IGlzIGVtcHR5XG4gICAgICAgICAgICAgICAgICAgIC8vICAgaXQgaXMgbm90IGNoZWNrZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gICB3ZSBoYXZlIGFscmVhZHkgZmluaXNoZWQgbG9va2luZyBhdCBpdFxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub3RlR3JvdXAgPSBjdXJyVHJhY2tbY3Vyck5vdGVHcm91cFBvaW50ZXJdO1xuICAgICAgICAgICAgICAgICAgICBpZiAobm90ZUdyb3VwLnBsYXlUaW1lTWlsbGlzIDwgbWluUGxheVRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pblBsYXlUaW1lID0gbm90ZUdyb3VwLnBsYXlUaW1lTWlsbGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vdGVHcm91cCA9IG5vdGVHcm91cDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb3RlR3JvdXBUcmFjayA9IGN1cnJUcmFjaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgd2UgZGlkIG5vdCBmaW5kIGFueSBOb3RlR3JvdXBzLCB3ZSdyZSBkb25lIVxuICAgICAgICAgICAgaWYgKCFuZXh0Tm90ZUdyb3VwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIGJyZWFrIG91dCBvZiB0aGUgd2hpbGUodHJ1ZSkgbG9vcC5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbmc6IE5vdGVHcm91cCA9IG5leHROb3RlR3JvdXAuY29weSgpO1xuICAgICAgICAgICAgICAgIGlmIChuZy5wbGF5VGltZU1pbGxpcyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgbmcucGxheVRpbWVNaWxsaXMgPSBjdXJyVGltZU1pbGxpcztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gbmV4dE5vdGVHcm91cFRyYWNrLnRyYWNrTnVtYmVyO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vdGVOdW1iZXIgPSBub3RlR3JvdXBQb2ludGVyRm9yVHJhY2tbdF07XG4gICAgICAgICAgICAgICAgbmcubm90ZU51bWJlciA9IG5vdGVOdW1iZXI7XG5cbiAgICAgICAgICAgICAgICBub3RlR3JvdXBQb2ludGVyRm9yVHJhY2tbdF0rKztcblxuICAgICAgICAgICAgICAgIG5vdGVHcm91cHMucHVzaChuZyk7XG4gICAgICAgICAgICAgICAgY3VyclRpbWVNaWxsaXMgPSBuZy5wbGF5VGltZU1pbGxpcyArIFRJTUVfQkVUV0VFTl9OT1RFR1JPVVBTO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2FjaGVkTm90ZUdyb3VwcyA9IG5vdGVHcm91cHM7XG4gICAgICAgIHJldHVybiBub3RlR3JvdXBzO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXROb3RlR3JvdXBJRCh0cmFja051bWJlciwgbm90ZUdyb3VwTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBgdCR7dHJhY2tOdW1iZXJ9X24ke25vdGVHcm91cE51bWJlcn1gO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRSZWNlbnRseVVwZGF0ZWRUcmFja051bWJlcnNBc0FycmF5KCk6IG51bWJlcltdIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20ocmVjZW50bHlVcGRhdGVkVHJhY2tOdW1iZXJzKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gcmVzZXRSZWNlbnRseVVwZGF0ZWRUcmFja051bWJlcnMoKSB7XG4gICAgICAgIHJlY2VudGx5VXBkYXRlZFRyYWNrTnVtYmVycy5jbGVhcigpO1xuICAgIH1cbn1cblxuY29uc3QgX1BsYXliYWNrX05TID0gUGxheWJhY2s7XG5jb25zdCBfU29uZ19OUyA9IFNvbmc7XG5jb25zdCBfVUlfTlMgPSBVSTtcbmNvbnN0IF9UcmFja3NfTlMgPSBVSS5UcmFja3M7XG5cbm5hbWVzcGFjZSBBcHAge1xuICAgIGV4cG9ydCBjb25zdCBQbGF5YmFjayA9IF9QbGF5YmFja19OUztcbiAgICBleHBvcnQgY29uc3QgU29uZyA9IF9Tb25nX05TO1xuICAgIGV4cG9ydCBjb25zdCBVSSA9IF9VSV9OUztcbiAgICBleHBvcnQgY29uc3QgVHJhY2tzID0gX1RyYWNrc19OUztcblxuICAgIGxldCBzb25nVmVyc2lvbjogbnVtYmVyID0gQ29uc3RhbnRzLk1JTl9TT05HX1ZFUlNJT047IC8vIFdlIG5lZWQgdG8gdXBkYXRlIHRoaXMgZXZlcnkgdGltZSB0aGUgcmVkdXggc3RvcmUgY2hhbmdlcyFcbiAgICBleHBvcnQgZnVuY3Rpb24gZ2V0U29uZ1ZlcnNpb24oKSB7XG4gICAgICAgIHJldHVybiBzb25nVmVyc2lvbjtcbiAgICB9XG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNldFNvbmdWZXJzaW9uKHY6IG51bWJlcikge1xuICAgICAgICBzb25nVmVyc2lvbiA9IHY7XG4gICAgfVxuXG4gICAgLy8gRGlzcGF0Y2ggZXZlbnRzIHRvIG1vZGlmeSBSZWR1eCBzdG9yZS5cbiAgICBleHBvcnQgZnVuY3Rpb24gc2V0RGlzcGF0Y2hGdW5jdGlvbihkOiBGdW5jdGlvbikge1xuICAgICAgICBkaXNwYXRjaCA9IGQ7XG4gICAgfVxuXG4gICAgLy8gT25jZSB0aGUgRE9NIGlzIHJlYWR5LCBjYWxsIEFwcC5zdGFydCgpXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkFwcC5zdGFydCgpXCIpO1xuICAgICAgICBNSURJUGlhbm9JbnB1dC5zZXR1cCgpO1xuICAgICAgICBMb2NhbFN0b3JhZ2UubG9hZCgpO1xuICAgICAgICBVSS5zaG93Tm90ZUdyb3Vwc0ZvclRyYWNrcygpO1xuICAgICAgICBVSS5zZXR1cENvcHlIYW5kbGVyKCk7XG4gICAgICAgIFVJLmRyYXdQaWFubygpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBzdGFydEF1ZGlvKCkge1xuICAgICAgICBwaWFubyA9IG5ldyBJbnN0cnVtZW50KCk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNhdmVTb25nVmVyc2lvblRvTG9jYWxTdG9yYWdlKHZlcjogbnVtYmVyKSB7XG4gICAgICAgIEFwcC5zZXRTb25nVmVyc2lvbih2ZXIpO1xuICAgICAgICBjb25zb2xlLmxvZyhcInNhdmVTb25nVmVyc2lvblRvTG9jYWxTdG9yYWdlIFwiICsgdmVyKTtcbiAgICAgICAgTG9jYWxTdG9yYWdlLnNhdmVWZXJzaW9uVG9nZ2xlKHZlcik7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGZpbGxUcmFja3NXaXRoTm90ZUdyb3Vwc0V4dHJhY3RlZEZyb21NSURJRXZlbnRzKG1pZGlGaWxlLCBtaWRpRXZlbnRzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTUlESSBGaWxlIFBhc3NlZCBJbjogXCIgKyBtaWRpRmlsZSk7XG4gICAgICAgIGlmICghbWlkaUZpbGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIFVJLlRyYWNrcy5zZXR1cChtaWRpRmlsZS50cmFja3MubGVuZ3RoKTtcblxuICAgICAgICAvLyBSZW1lbWJlciB0aGUgbW9zdCByZWNlbnRseSBwcm9jZXNzZWQgZXZlbnQgc28gdGhhdCB3ZSBjYW4gbWVyZ2Ugbm90ZXMgdGhhdCBhcmUgcGxheWVkIGF0IHRoZSBzYW1lIHRpbWUgYW5kIG9uIHRoZSBzYW1lIHRyYWNrLlxuICAgICAgICBsZXQgbGFzdE5vdGVHcm91cDogTm90ZUdyb3VwID0gbnVsbDtcbiAgICAgICAgbGV0IGxhc3RQbGF5VGltZSA9IC0xO1xuICAgICAgICBsZXQgbGFzdFRyYWNrTnVtYmVyID0gLTE7XG5cbiAgICAgICAgLy8gQ29udmVydCBmcm9tIE1JREkgZXZlbnRzIHRvIE5vdGVHcm91cHNcbiAgICAgICAgZm9yIChjb25zdCBldmVudCBvZiBtaWRpRXZlbnRzKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gZXZlbnQudHlwZTtcbiAgICAgICAgICAgIGNvbnN0IHN1YnR5cGUgPSBldmVudC5zdWJ0eXBlO1xuICAgICAgICAgICAgLy8gbGV0IHN0YXR1cyA9IChldmVudC5zdWJ0eXBlIDw8IDQpICsgZXZlbnQuY2hhbm5lbDtcbiAgICAgICAgICAgIC8vIGxldCBzdGF0dXNDb2RlSGV4U3RyaW5nID0gJzB4JyArIHN0YXR1cy50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIGxldCBwbGF5VGltZSA9IGV2ZW50LnBsYXlUaW1lOyAvLyB0aW1lIGluIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgcGxheVRpbWUgPSBNYXRoLnJvdW5kKHBsYXlUaW1lICogMTAwMCkgLyAxMDAwOyAvLyByb3VuZCBpdCB0byB0aGUgbmVhcmVzdCAwLjAwMVxuICAgICAgICAgICAgY29uc3QgbWlkaU5vdGVOdW0gPSBldmVudC5wYXJhbTE7XG4gICAgICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IGV2ZW50LnBhcmFtMjtcbiAgICAgICAgICAgIGNvbnN0IHBpYW5vTm90ZU51bSA9IE1JRElVdGlscy5tMnAobWlkaU5vdGVOdW0pO1xuICAgICAgICAgICAgY29uc3Qgbm90ZVRvUGxheSA9IG5ldyBOb3RlKHBpYW5vTm90ZU51bSwgMS4wIC8qIGR1cmF0aW9uICovLCB2ZWxvY2l0eSk7IC8vIFRPRE86IFN1cHBvcnQgZHVyYXRpb24gc29tZWRheT9cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVkVMT0NJVFkgXCIgKyB2ZWxvY2l0eSk7XG4gICAgICAgICAgICBsZXQgdHJhY2tOdW1iZXIgPSBldmVudC50cmFjazsgLy8gcG9zc2libHkgdW5kZWZpbmVkIVxuICAgICAgICAgICAgaWYgKCF0cmFja051bWJlcikge1xuICAgICAgICAgICAgICAgIHRyYWNrTnVtYmVyID0gMDsgLy8gV2Ugd2lsbCBhc3NpZ24gZXZlbnRzIHdpdGggdW5kZWZpbmVkIHRyYWNrTnVtYmVycyB0byB0cmFjayAwLlxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3VidHlwZSA9PT0gTUlESUV2ZW50cy5FVkVOVF9NSURJX05PVEVfT04pIHtcbiAgICAgICAgICAgICAgICBpZiAocGxheVRpbWUgPD0gbGFzdFBsYXlUaW1lICsgVElNRV9USFJFU0hPTERfRk9SX0dST1VQSU5HX05FQVJCWV9OT1RFUyAmJiB0cmFja051bWJlciA9PT0gbGFzdFRyYWNrTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1lcmdlIGFsbCBub3RlcyBzdGFydGluZyBhdCB0aGUgc2FtZSB0aW1lIGFuZCBvbiB0aGUgc2FtZSB0cmFjayBpbnRvIGEgc2luZ2xlIE5vdGVHcm91cC5cbiAgICAgICAgICAgICAgICAgICAgbGFzdE5vdGVHcm91cC5hZGROb3RlKG5vdGVUb1BsYXkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBub3RlR3JvdXAgPSBuZXcgTm90ZUdyb3VwKG5vdGVUb1BsYXksIHBsYXlUaW1lLCB0cmFja051bWJlcik7XG4gICAgICAgICAgICAgICAgICAgIFNvbmcuYWRkTm90ZUdyb3VwVG9UcmFjayhub3RlR3JvdXAsIHRyYWNrTnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdE5vdGVHcm91cCA9IG5vdGVHcm91cDtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFRyYWNrTnVtYmVyID0gdHJhY2tOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RQbGF5VGltZSA9IHBsYXlUaW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gT1RIRVIgRVZFTlRTXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJVbmhhbmRsZWQgRXZlbnQ6XCIpO1xuICAgICAgICAgICAgICAgIE1JRElGaWxlSU8ucHJpbnRUeXBlQW5kU3VidHlwZSh0eXBlLCBzdWJ0eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNhdmVBbmRTaG93RGF0YSgpO1xuICAgIH1cblxuICAgIC8vIFdoZW4gd2UgaG92ZXIgb3ZlciB0aGUgRG93bmxvYWQgTUlESSB8IFRFWFQgbGlua3MsIHdlIHVwZGF0ZVxuICAgIC8vIHRoZSBocmVmIGF0dHJpYnV0ZXMgc28gdGhhdCB3ZSBkb3dubG9hZCB0aGUgY29ycmVjdCBkYXRhLlxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXREb3dubG9hZERhdGFfVEVYVCgpOiBzdHJpbmcge1xuICAgICAgICAvLyBHRU5FUkFURSBUSEUgVEVYVCBGSUxFIEZST00gT1VSIFRSQUNLUy4gQkFTRSA2NCBFTkNPREUgSVQuXG4gICAgICAgIC8vIEEgdGV4dHVhbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgc29uZzpcbiAgICAgICAgLy8gICBWMSA9PiBlLmcuLCA0MCA0MiA0NCA0NSA0MC40N1xuICAgICAgICAvLyAgIFYyID0+IGUuZy4sIFsyNC4zNiBAIDBdIFsxNy4yOSBAIDI3MzBdIFszNiBAIDI5MDRdIFs0MSBAIDMwMjldIFs0NCBAIDMxNTJdXG4gICAgICAgIGNvbnN0IHRleHQgPSBUcmFja3MuZ2V0VGV4dEZpbGVGcm9tVHJhY2tzKCk7XG4gICAgICAgIGNvbnN0IGJhc2U2NFRleHQgPSBidG9hKHRleHQpOyAvLyBiYXNlIDY0IGVuY29kaW5nXG4gICAgICAgIHJldHVybiBiYXNlNjRUZXh0O1xuICAgIH1cblxuICAgIC8vIFdoZW4gd2UgaG92ZXIgb3ZlciB0aGUgRG93bmxvYWQgTUlESSB8IFRFWFQgbGlua3MsIHdlIHVwZGF0ZVxuICAgIC8vIHRoZSBocmVmIGF0dHJpYnV0ZXMgc28gdGhhdCB3ZSBkb3dubG9hZCB0aGUgY29ycmVjdCBkYXRhLlxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXREb3dubG9hZERhdGFfTUlESSgpOiBzdHJpbmcge1xuICAgICAgICAvLyBHRU5FUkFURSBUSEUgTUlESSBGSUxFIEZST00gT1VSIFRSQUNLUy4gQkFTRSA2NCBFTkNPREUgSVQuXG4gICAgICAgIGNvbnN0IHRyYWNrTnVtYmVyc1RvSW5jbHVkZSA9IFRyYWNrcy5nZXRUcmFja051bWJlcnNUb0luY2x1ZGVJbk1JRElGaWxlKCk7XG4gICAgICAgIGNvbnN0IG1pZGlGaWxlID0gTUlESUZpbGVJTy5jcmVhdGVGaWxlRnJvbVRyYWNrcyh0cmFja051bWJlcnNUb0luY2x1ZGUsIFNvbmcuZ2V0Tm90ZUdyb3Vwc0Zyb21UcmFja3MoKSk7XG4gICAgICAgIGNvbnN0IGJhc2U2NFRleHQgPSBidG9hKG1pZGlGaWxlKTsgLy8gYmFzZSA2NCBlbmNvZGluZ1xuICAgICAgICByZXR1cm4gYmFzZTY0VGV4dDtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gcGxheU9uZU5vdGUocGlhbm9LZXlCZWZvcmVNb2RpZmllcnMsIGFwcGx5TW9kaWZpZXJzOiBib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICAvLyBnZXQgdGhlIG5hbWUgb2YgdGhlIG5vdGUgd2UgYXJlIGFib3V0IHRvIHBsYXlcbiAgICAgICAgY29uc3QgcmVtYWluZGVyID0gcGlhbm9LZXlCZWZvcmVNb2RpZmllcnMgJSAxMjtcbiAgICAgICAgY29uc3Qgd2hpdGVLZXlOb3RlSW5kZXggPSB3aGl0ZUtleXMuaW5kZXhPZihyZW1haW5kZXIpO1xuICAgICAgICBjb25zdCBub3RlTGFiZWwgPSBub3RlTGFiZWxzW3doaXRlS2V5Tm90ZUluZGV4XTtcblxuICAgICAgICBsZXQgbW9kaWZpZXIgPSAwO1xuICAgICAgICBpZiAoYXBwbHlNb2RpZmllcnMpIHtcbiAgICAgICAgICAgIG1vZGlmaWVyID0gc2hhcnBPckZsYXRNb2RpZmllcjsgLy8gVGhlIHVzZXIgaXMgaG9sZGluZyBkb3duIFNISUZUIG9yIENUUkxcblxuICAgICAgICAgICAgLy8gaXMgdGhpcyBub3RlIGF1dG8tc2hhcnBlZCwgZHVlIHRvIHRoZSBrZXkgc2lnbmF0dXJlP1xuICAgICAgICAgICAgaWYgKFNoYXJwc0FuZEZsYXRzTWFuYWdlci5pc05vdGVTaGFycChub3RlTGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgbW9kaWZpZXIrKzsgLy8gcmFpc2UgdGhlIHNoYXJwIGEgaGFsZi1zdGVwIVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaXMgdGhpcyBub3RlIGF1dG8tZmxhdHRlZCwgZHVlIHRvIHRoZSBrZXkgc2lnbmF0dXJlP1xuICAgICAgICAgICAgaWYgKFNoYXJwc0FuZEZsYXRzTWFuYWdlci5pc05vdGVGbGF0KG5vdGVMYWJlbCkpIHtcbiAgICAgICAgICAgICAgICBtb2RpZmllci0tOyAvLyBsb3dlciB0aGUgbm90ZSBhIGhhbGYtc3RlcCFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBpYW5vS2V5TnVtYmVyID0gcGlhbm9LZXlCZWZvcmVNb2RpZmllcnMgKyBtb2RpZmllciArIG9jdGF2ZU9mZnNldCAqIDEyO1xuICAgICAgICBpZiAocGlhbm9LZXlOdW1iZXIgPCAxIHx8IHBpYW5vS2V5TnVtYmVyID4gODgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRyYWNrTnVtYmVyOiBudW1iZXIgPSBIaWdobGlnaHQuZ2V0Q3VycmVudFRyYWNrTnVtYmVyKCk7XG4gICAgICAgIGNvbnN0IHRyYWNrTGVuZ3RoOiBudW1iZXIgPSBTb25nLmFkZE5vdGVHcm91cFRvVHJhY2sobmV3IE5vdGVHcm91cChuZXcgTm90ZShwaWFub0tleU51bWJlcikpLCB0cmFja051bWJlcik7XG4gICAgICAgIFRyYWNrcy5zZXRDaGVja2VkKHRyYWNrTnVtYmVyLCB0cnVlKTtcblxuICAgICAgICBBcHAucGxheVBpYW5vTm90ZShwaWFub0tleU51bWJlcik7XG5cbiAgICAgICAgSGlnaGxpZ2h0LnNldFRyYWNrQW5kTm90ZUdyb3VwKHRyYWNrTnVtYmVyLCB0cmFja0xlbmd0aCAtIDEpO1xuICAgICAgICBzYXZlQW5kU2hvd0RhdGEoKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gcGxheVBpYW5vTm90ZShwaWFub0tleU51bWJlciwgdmVsb2NpdHkgPSAxMjcuMCkge1xuICAgICAgICBpZiAocGlhbm8gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicGxheVBpYW5vTm90ZTogUGlhbm8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkLlwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IDEuMDsgLy8gMC4xMjUsIDAuMjUsIDAuNSwgMS4wLCAyLjA7XG4gICAgICAgIHBpYW5vLnBsYXkocGlhbm9LZXlOdW1iZXIsIGR1cmF0aW9uLCB2ZWxvY2l0eSAvIDEyNy4wKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gbG9hZEZpcnN0RmlsZShmaWxlTGlzdDogYW55KSB7XG4gICAgICAgIGlmIChmaWxlTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gZmlsZUxpc3RbMF07IC8vIFJlYWQgdGhlIGZpcnN0IGZpbGUuXG4gICAgICAgICAgICBNSURJRmlsZUlPLnJlYWRGaWxlQXN5bmMoZmlsZSkudGhlbigoZmlsZU5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvbnMuRmlsZUNob29zZXIub25GaWxlTG9hZGVkIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xufVxuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./apps/author/piano/v2/App.ts\n");

/***/ })

})