webpackHotUpdate_N_E("pages/midi",{

/***/ "./apps/shared/sound/Musical.ts":
/*!**************************************!*\
  !*** ./apps/shared/sound/Musical.ts ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global, module) {/* harmony import */ var _Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n\n\n\n// musical.js\n// https://github.com/PencilCode/musical.js\nvar Musical;\n\n(function (_Musical) {\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n  // WAVETABLE-BUILDER\n  // wavetable is a table of names for nonstandard waveforms.\n  // The table maps names to objects that have wave: and freq:\n  // properties. The wave: property is a PeriodicWave to use\n  // for the oscillator.  The freq: property, if present,\n  // is a map from higher frequencies to more PeriodicWave\n  // objects; when a frequency higher than the given threshold\n  // is requested, the alternate PeriodicWave is used.\n  var makeWavetable = function makeWavetable(ac) {\n    return function (wavedata) {\n      function makePeriodicWave(data) {\n        var n = data.real.length,\n            real = new Float32Array(n),\n            imag = new Float32Array(n),\n            j;\n\n        for (j = 0; j < n; ++j) {\n          real[j] = data.real[j];\n          imag[j] = data.imag[j];\n        }\n\n        try {\n          // Latest API naming.\n          return ac.createPeriodicWave(real, imag);\n        } catch (e) {}\n\n        try {\n          // Earlier API naming.\n          return ac.createWaveTable(real, imag);\n        } catch (e) {}\n\n        return null;\n      }\n\n      function makeMultiple(data, mult, amt) {\n        var result = {\n          real: [],\n          imag: []\n        },\n            j,\n            n = data.real.length,\n            m;\n\n        for (j = 0; j < n; ++j) {\n          m = Math.log(mult[Math.min(j, mult.length - 1)]);\n          result.real.push(data.real[j] * Math.exp(amt * m));\n          result.imag.push(data.imag[j] * Math.exp(amt * m));\n        }\n\n        return result;\n      }\n\n      var result = {},\n          k,\n          d,\n          n,\n          j,\n          ff,\n          record,\n          wave,\n          pw;\n\n      for (k in wavedata) {\n        d = wavedata[k];\n        wave = makePeriodicWave(d);\n\n        if (!wave) {\n          continue;\n        }\n\n        record = {\n          wave: wave\n        }; // A strategy for computing higher frequency waveforms: apply\n        // multipliers to each harmonic according to d.mult.  These\n        // multipliers can be interpolated and applied at any number\n        // of transition frequencies.\n\n        if (d.mult) {\n          ff = wavedata[k].freq;\n          record.freq = {};\n\n          for (j = 0; j < ff.length; ++j) {\n            wave = makePeriodicWave(makeMultiple(d, d.mult, (j + 1) / ff.length));\n\n            if (wave) {\n              record.freq[ff[j]] = wave;\n            }\n          }\n        } // This wave has some default filter settings.\n\n\n        if (d.defs) {\n          record.defs = d.defs;\n        }\n\n        result[k] = record;\n      }\n\n      return result;\n    }({\n      // Currently the only nonstandard waveform is \"piano\".\n      // It is based on the first 32 harmonics from the example:\n      // https://github.com/GoogleChrome/web-audio-samples\n      // /blob/gh-pages/samples/audio/wave-tables/Piano\n      // That is a terrific sound for the lowest piano tones.\n      // For higher tones, interpolate to a customzed wave\n      // shape created by hand, and apply a lowpass filter.\n      piano: {\n        real: [0, 0, -0.203569, 0.5, -0.401676, 0.137128, -0.104117, 0.115965, -0.004413, 0.067884, -0.00888, 0.0793, -0.038756, 0.011882, -0.030883, 0.027608, -0.013429, 0.00393, -0.014029, 0.00972, -0.007653, 0.007866, -0.032029, 0.046127, -0.024155, 0.023095, -0.005522, 0.004511, -0.003593, 0.011248, -0.004919, 0.008505],\n        imag: [0, 0.147621, 0, 0.000007, -0.00001, 0.000005, -0.000006, 0.000009, 0, 0.000008, -0.000001, 0.000014, -0.000008, 0.000003, -0.000009, 0.000009, -0.000005, 0.000002, -0.000007, 0.000005, -0.000005, 0.000005, -0.000023, 0.000037, -0.000021, 0.000022, -0.000006, 0.000005, -0.000004, 0.000014, -0.000007, 0.000012],\n        // How to adjust the harmonics for the higest notes.\n        mult: [1, 1, 0.18, 0.016, 0.01, 0.01, 0.01, 0.004, 0.014, 0.02, 0.014, 0.004, 0.002, 0.00001],\n        // The frequencies at which to interpolate the harmonics.\n        freq: [65, 80, 100, 135, 180, 240, 620, 1360],\n        // The default filter settings to use for the piano wave.\n        // TODO: this approach attenuates low notes too much -\n        // this should be fixed.\n        defs: {\n          wave: \"piano\",\n          gain: 0.5,\n          attack: 0.002,\n          decay: 0.25,\n          sustain: 0.03,\n          release: 0.1,\n          decayfollow: 0.7,\n          cutoff: 800,\n          cutfollow: 0.1,\n          resonance: 1,\n          detune: 0.9994\n        }\n      }\n    });\n  }; // END WAVETABLE-BUILDER\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n  // UTILS\n\n\n  var Utils = /*#__PURE__*/function () {\n    function Utils() {\n      Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, Utils);\n    }\n\n    Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Utils, null, [{\n      key: \"isAudioPresent\",\n      // Tests for the presence of HTML5 Web Audio (or webkit's version).\n      value: function isAudioPresent() {\n        return !!(global.AudioContext || global.webkitAudioContext);\n      } // All our audio funnels through the same AudioContext with a\n      // DynamicsCompressorNode used as the main output, to compress the\n      // dynamic range of all audio.  getAudioTop sets this up.\n\n    }, {\n      key: \"getAudioTop\",\n      value: function getAudioTop() {\n        if (Utils._audioTop) {\n          return Utils._audioTop;\n        }\n\n        if (!Utils.isAudioPresent()) {\n          return null;\n        }\n\n        var ac = new (global.AudioContext || global.webkitAudioContext)();\n        Utils._audioTop = {\n          ac: ac,\n          wavetable: makeWavetable(ac),\n          out: null,\n          currentStart: null\n        };\n        Utils.resetAudio();\n        return Utils._audioTop;\n      } // When audio needs to be interrupted globally (e.g., when you press the\n      // stop button in the IDE), resetAudio does the job.\n\n    }, {\n      key: \"resetAudio\",\n      value: function resetAudio() {\n        if (Utils._audioTop) {\n          var atop = Utils._audioTop; // Disconnect the top-level node and make a new one.\n\n          if (atop.out) {\n            atop.out.disconnect();\n            atop.out = null;\n            atop.currentStart = null;\n          }\n\n          var dcn = atop.ac.createDynamicsCompressor();\n          dcn.ratio.setValueAtTime(16, 0);\n          dcn.attack.setValueAtTime(0.0005, 0); // dcn.ratio = 16; // RONYEH: .ratio is a READ ONLY property.\n          // dcn.attack = 0.0005; // RONYEH: .ratio is a READ ONLY property.\n\n          dcn.connect(atop.ac.destination);\n          atop.out = dcn;\n        }\n      } // For precise scheduling of future notes, the AudioContext currentTime is\n      // cached and is held constant until the script releases to the event loop.\n\n    }, {\n      key: \"audioCurrentStartTime\",\n      value: function audioCurrentStartTime() {\n        var atop = Utils.getAudioTop();\n\n        if (atop.currentStart != null) {\n          return atop.currentStart;\n        } // A delay could be added below to introduce a universal delay in\n        // all beginning sounds (without skewing durations for scheduled\n        // sequences).\n\n\n        atop.currentStart = Math.max(0.25, atop.ac.currentTime\n        /* + 0.0 delay */\n        );\n        setTimeout(function () {\n          atop.currentStart = null;\n        }, 0);\n        return atop.currentStart;\n      } // Converts a midi note number to a frequency in Hz.\n\n    }, {\n      key: \"midiToFrequency\",\n      value: function midiToFrequency(midi) {\n        return 440 * Math.pow(2, (midi - 69) / 12);\n      } // Some constants.\n\n    }, {\n      key: \"frequencyToMidi\",\n      // Converts a frequency in Hz to the closest midi number.\n      value: function frequencyToMidi(freq) {\n        return Math.round(69 + Math.log(freq / 440) * 12 / Math.LN2);\n      } // Converts an ABC pitch (such as \"^G,,\") to a midi note number.\n\n    }, {\n      key: \"pitchToMidi\",\n      value: function pitchToMidi(pitch) {\n        var m = /^(\\^+|_+|=|)([A-Ga-g])([,']*)$/.exec(pitch);\n\n        if (!m) {\n          return null;\n        }\n\n        var octave = m[3].replace(/,/g, \"\").length - m[3].replace(/'/g, \"\").length;\n        var semitone = Utils.noteNum[m[2]] + Utils.accSym[m[1].charAt(0)] * m[1].length + 12 * octave;\n        return semitone + 60; // 60 = midi code middle \"C\".\n      } // Converts a midi number to an ABC notation pitch.\n\n    }, {\n      key: \"midiToPitch\",\n      value: function midiToPitch(midi) {\n        var index = (midi - 72) % 12;\n\n        if (midi > 60 || index != 0) {\n          index += 12;\n        }\n\n        var octaves = Math.round((midi - index - 60) / 12),\n            result = Utils.noteName[index];\n\n        while (octaves != 0) {\n          result += octaves > 0 ? \"'\" : \",\";\n          octaves += octaves > 0 ? -1 : 1;\n        }\n\n        return result;\n      } // Converts an ABC pitch to a frequency in Hz.\n\n    }, {\n      key: \"pitchToFrequency\",\n      value: function pitchToFrequency(pitch) {\n        return Utils.midiToFrequency(Utils.pitchToMidi(pitch));\n      } // The default sound is a square wave with a pretty quick decay to zero.\n\n    }, {\n      key: \"makeTimbre\",\n      // Norrmalizes a timbre object by making a copy that has exactly\n      // the right set of timbre fields, defaulting when needed.\n      // A timbre can specify any of the fields of defaultTimbre; any\n      // unspecified fields are treated as they are set in defaultTimbre.\n      value: function makeTimbre(options, atop) {\n        if (!options) {\n          options = {};\n        }\n\n        if (typeof options == \"string\") {\n          // Abbreviation: name a wave to get a default timbre for that wave.\n          options = {\n            wave: options\n          };\n        }\n\n        var result = {},\n            key,\n            wt = atop && atop.wavetable && atop.wavetable[options.wave];\n\n        for (key in Utils.defaultTimbre) {\n          if (options.hasOwnProperty(key)) {\n            result[key] = options[key];\n          } else if (wt && wt.defs && wt.defs.hasOwnProperty(key)) {\n            result[key] = wt.defs[key];\n          } else {\n            result[key] = Utils.defaultTimbre[key];\n          }\n        }\n\n        return result;\n      }\n    }, {\n      key: \"getWhiteNoiseBuf\",\n      // cache\n      value: function getWhiteNoiseBuf() {\n        if (whiteNoiseBuf == null) {\n          var ac = Utils.getAudioTop().ac,\n              bufferSize = 2 * ac.sampleRate,\n              whiteNoiseBuf = ac.createBuffer(1, bufferSize, ac.sampleRate),\n              output = whiteNoiseBuf.getChannelData(0);\n\n          for (var i = 0; i < bufferSize; i++) {\n            output[i] = Math.random() * 2 - 1;\n          }\n        }\n\n        return whiteNoiseBuf;\n      } // This utility function creates an oscillator at the given frequency\n      // and the given wavename.  It supports lookups in a static wavetable,\n      // defined right below.\n\n    }, {\n      key: \"makeOscillator\",\n      value: function makeOscillator(atop, wavename, freq) {\n        if (wavename == \"noise\") {\n          var whiteNoise = atop.ac.createBufferSource();\n          whiteNoise.buffer = Utils.getWhiteNoiseBuf();\n          whiteNoise.loop = true;\n          return whiteNoise;\n        }\n\n        var wavetable = atop.wavetable,\n            o = atop.ac.createOscillator(),\n            k,\n            pwave,\n            bwf,\n            wf;\n\n        try {\n          if (wavetable.hasOwnProperty(wavename)) {\n            // Use a customized wavetable.\n            pwave = wavetable[wavename].wave;\n\n            if (wavetable[wavename].freq) {\n              bwf = 0; // Look for a higher-frequency variant.\n\n              for (k in wavetable[wavename].freq) {\n                wf = Number(k);\n\n                if (freq > wf && wf > bwf) {\n                  bwf = wf;\n                  pwave = wavetable[wavename].freq[bwf];\n                }\n              }\n            }\n\n            if (!o.setPeriodicWave && o.setWaveTable) {\n              // The old API name: Safari 7 still uses this.\n              o.setWaveTable(pwave);\n            } else {\n              // The new API name.\n              o.setPeriodicWave(pwave);\n            }\n          } else {\n            o.type = wavename;\n          }\n        } catch (e) {\n          if (window.console) {\n            window.console.log(e);\n          } // If unrecognized, just use square.\n          // TODO: support \"noise\" or other wave shapes.\n\n\n          o.type = \"square\";\n        } // o.frequency.value = freq; // RONYEH REMOVED DUE TO SOME BUG.\n\n\n        o.frequency.setTargetAtTime(freq, atop.ac.currentTime, 0.001); // RONYEH ADDED\n\n        return o;\n      }\n    }]);\n\n    return Utils;\n  }(); // END UTILS\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n  // Parses an ABC file to an object with the following structure:\n  // {\n  //   X: value from the X: lines in header (\\n separated for multiple values)\n  //   V: value from the V:myname lines that appear before K:\n  //   (etc): for all the one-letter header-names.\n  //   K: value from the K: lines in header.\n  //   tempo: Q: line parsed as beatsecs\n  //   timbre: ... I:timbre line as parsed by makeTimbre\n  //   voice: {\n  //     myname: { // voice with id \"myname\"\n  //       V: value from the V:myname lines (from the body)\n  //       stems: [...] as parsed by parseABCstems\n  //    }\n  //  }\n  // }\n  // ABC files are idiosyncratic to parse: the written specifications\n  // do not necessarily reflect the defacto standard implemented by\n  // ABC content on the web.  This implementation is designed to be\n  // practical, working on content as it appears on the web, and only\n  // using the written standard as a guideline.\n\n\n  Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Utils, \"_audioTop\", null);\n\n  Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Utils, \"noteNum\", {\n    C: 0,\n    D: 2,\n    E: 4,\n    F: 5,\n    G: 7,\n    A: 9,\n    B: 11,\n    c: 12,\n    d: 14,\n    e: 16,\n    f: 17,\n    g: 19,\n    a: 21,\n    b: 23\n  });\n\n  Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Utils, \"accSym\", {\n    \"^\": 1,\n    \"\": 0,\n    \"=\": 0,\n    _: -1\n  });\n\n  Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Utils, \"noteName\", [\"C\", \"^C\", \"D\", \"_E\", \"E\", \"F\", \"^F\", \"G\", \"_A\", \"A\", \"_B\", \"B\", \"c\", \"^c\", \"d\", \"_e\", \"e\", \"f\", \"^f\", \"g\", \"_a\", \"a\", \"_b\", \"b\"]);\n\n  Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Utils, \"defaultTimbre\", {\n    wave: \"square\",\n    // Oscillator type.\n    gain: 0.1,\n    // Overall gain at maximum attack.\n    attack: 0.002,\n    // Attack time at the beginning of a tone.\n    decay: 0.4,\n    // Rate of exponential decay after attack.\n    decayfollow: 0,\n    // Amount of decay shortening for higher notes.\n    sustain: 0,\n    // Portion of gain to sustain indefinitely.\n    release: 0.1,\n    // Release time after a tone is done.\n    cutoff: 0,\n    // Low-pass filter cutoff frequency.\n    cutfollow: 0,\n    // Cutoff adjustment, a multiple of oscillator freq.\n    resonance: 0,\n    // Low-pass filter resonance.\n    detune: 0 // Detune factor for a second oscillator.\n\n  });\n\n  Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Utils, \"whiteNoiseBuf\", null);\n\n  var ABCheader = /^([A-Za-z]):\\s*(.*)$/;\n  var ABCtoken = /(?:\\[[A-Za-z]:[^\\]]*\\])|\\s+|%[^\\n]*|![^\\s!:|\\[\\]]*!|\\+[^+|!]*\\+|[_<>@^]?\"[^\"]*\"|\\[|\\]|>+|<+|(?:(?:\\^+|_+|=|)[A-Ga-g](?:,+|'+|))|\\(\\d+(?::\\d+){0,2}|\\d*\\/\\d+|\\d+\\/?|\\/+|[xzXZ]|\\[?\\|\\]?|:?\\|:?|::|./g;\n\n  function parseABCFile(str) {\n    var lines = str.split(\"\\n\"),\n        result = {},\n        context = result,\n        timbre,\n        j,\n        k,\n        header,\n        stems,\n        key = {},\n        accent = {\n      slurred: 0\n    },\n        voiceid,\n        out; // ABC files are parsed one line at a time.\n\n    for (j = 0; j < lines.length; ++j) {\n      // First, check to see if the line is a header line.\n      header = ABCheader.exec(lines[j]);\n\n      if (header) {\n        handleInformation(header[1], header[2].trim());\n      } else if (/^\\s*(?:%.*)?$/.test(lines[j])) {\n        // Skip blank and comment lines.\n        continue;\n      } else {\n        // Parse the notes.\n        parseABCNotes(lines[j]);\n      }\n    }\n\n    var infer = [\"unitnote\", \"unitbeat\", \"tempo\"];\n\n    if (result.hasOwnProperty(\"voice\") && result.voice !== null) {\n      out = [];\n\n      for (j in result.voice) {\n        if (result.voice[j].stems && result.voice[j].stems.length) {\n          // Calculate times for all the tied notes.  This happens at the end\n          // because in principle, the first note of a song could be tied all\n          // the way through to the last note.\n          processTies(result.voice[j].stems); // Bring up inferred tempo values from voices if not specified\n          // in the header.\n\n          for (k = 0; k < infer.length; ++k) {\n            if (!(infer[k] in result) && infer[k] in result.voice[j]) {\n              result[infer[k]] = result.voice[j][infer[k]];\n            }\n          } // Remove this internal state variable;\n\n\n          delete result.voice[j].accent;\n        } else {\n          out.push(j);\n        }\n      } // Delete any voices that had no stems.\n\n\n      for (j = 0; j < out.length; ++j) {\n        delete result.voice[out[j]];\n      }\n    }\n\n    return result; ////////////////////////////////////////////////////////////////////////\n    // Parsing helper functions below.\n    ////////////////////////////////////////////////////////////////////////\n    // Processes header fields such as V: voice, which may appear at the\n    // top of the ABC file, or in the ABC body in a [V:voice] directive.\n\n    function handleInformation(field, value) {\n      // The following headers are recognized and processed.\n      switch (field) {\n        case \"V\":\n          // A V: header switches voices if in the body.\n          // If in the header, then it is just advisory.\n          if (context !== result) {\n            startVoiceContext(value.split(\" \")[0]);\n          }\n\n          break;\n\n        case \"M\":\n          parseMeter(value, context);\n          break;\n\n        case \"L\":\n          parseUnitNote(value, context);\n          break;\n\n        case \"Q\":\n          parseTempo(value, context);\n          break;\n      } // All headers (including unrecognized ones) are\n      // just accumulated as properties. Repeated header\n      // lines are accumulated as multiline properties.\n\n\n      if (context.hasOwnProperty(field)) {\n        context[field] += \"\\n\" + value;\n      } else {\n        context[field] = value;\n      } // The K header is special: it should be the last one\n      // before the voices and notes begin.\n\n\n      if (field == \"K\") {\n        key = keysig(value);\n\n        if (context === result) {\n          startVoiceContext(firstVoiceName());\n        }\n      }\n    } // Shifts context to a voice with the given id given.  If no id\n    // given, then just sticks with the current voice.  If the current\n    // voice is unnamed and empty, renames the current voice.\n\n\n    function startVoiceContext(id) {\n      id = id || \"\";\n\n      if (!id && context !== result) {\n        return;\n      }\n\n      if (!result.voice) {\n        result.voice = {};\n      }\n\n      if (result.voice.hasOwnProperty(id)) {\n        // Resume a named voice.\n        context = result.voice[id];\n        accent = context.accent;\n      } else {\n        // Start a new voice.\n        context = {\n          id: id,\n          accent: {\n            slurred: 0\n          }\n        };\n        result.voice[id] = context;\n        accent = context.accent;\n      }\n    } // For picking a default voice, looks for the first voice name.\n\n\n    function firstVoiceName() {\n      if (result.V) {\n        return result.V.split(/\\s+/)[0];\n      } else {\n        return \"\";\n      }\n    } // Parses a single line of ABC notes (i.e., not a header line).\n    //\n    // We process an ABC song stream by dividing it into tokens, each of\n    // which is a pitch, duration, or special decoration symbol; then\n    // we process each decoration individually, and we process each\n    // stem as a group using parseStem.\n    // The structure of a single ABC note is something like this:\n    //\n    // NOTE -> STACCATO? PITCH DURATION? TIE?\n    //\n    // I.e., it always has a pitch, and it is prefixed by some optional\n    // decorations such as a (.) staccato marking, and it is suffixed by\n    // an optional duration and an optional tie (-) marking.\n    //\n    // A stem is either a note or a bracketed series of notes, followed\n    // by duration and tie.\n    //\n    // STEM -> NOTE   OR    '[' NOTE * ']' DURAITON? TIE?\n    //\n    // Then a song is just a sequence of stems interleaved with other\n    // decorations such as dynamics markings and measure delimiters.\n\n\n    function parseABCNotes(str) {\n      var tokens = str.match(ABCtoken),\n          parsed = null,\n          index = 0,\n          dotted = 0,\n          beatlet = null,\n          t;\n\n      if (!tokens) {\n        return null;\n      }\n\n      while (index < tokens.length) {\n        // Ignore %comments and !markings!\n        if (/^[\\s%]/.test(tokens[index])) {\n          index++;\n          continue;\n        } // Handle inline [X:...] information fields\n\n\n        if (/^\\[[A-Za-z]:[^\\]]*\\]$/.test(tokens[index])) {\n          handleInformation(tokens[index].substring(1, 2), tokens[index].substring(3, tokens[index].length - 1).trim());\n          index++;\n          continue;\n        } // Handled dotted notation abbreviations.\n\n\n        if (/</.test(tokens[index])) {\n          dotted = -tokens[index++].length;\n          continue;\n        }\n\n        if (/>/.test(tokens[index])) {\n          dotted = tokens[index++].length;\n          continue;\n        }\n\n        if (/^\\(\\d+(?::\\d+)*/.test(tokens[index])) {\n          beatlet = parseBeatlet(tokens[index++]);\n          continue;\n        }\n\n        if (/^[!+].*[!+]$/.test(tokens[index])) {\n          parseDecoration(tokens[index++], accent);\n          continue;\n        }\n\n        if (/^.?\".*\"$/.test(tokens[index])) {\n          // Ignore double-quoted tokens (chords and general text annotations).\n          index++;\n          continue;\n        }\n\n        if (/^[()]$/.test(tokens[index])) {\n          if (tokens[index++] == \"(\") {\n            accent.slurred += 1;\n          } else {\n            accent.slurred -= 1;\n\n            if (accent.slurred <= 0) {\n              accent.slurred = 0;\n\n              if (context.stems && context.stems.length >= 1) {\n                // The last notes in a slur are not slurred.\n                slurStem(context.stems[context.stems.length - 1], false);\n              }\n            }\n          }\n\n          continue;\n        } // Handle measure markings by clearing accidentals.\n\n\n        if (/\\|/.test(tokens[index])) {\n          for (t in accent) {\n            if (t.length == 1) {\n              // Single-letter accent properties are note accidentals.\n              delete accent[t];\n            }\n          }\n\n          index++;\n          continue;\n        }\n\n        parsed = parseStem(tokens, index, key, accent); // Skip unparsable bits\n\n        if (parsed === null) {\n          index++;\n          continue;\n        } // Process a parsed stem.\n\n\n        if (beatlet) {\n          scaleStem(parsed.stem, beatlet.time);\n          beatlet.count -= 1;\n\n          if (!beatlet.count) {\n            beatlet = null;\n          }\n        } // If syncopated with > or < notation, shift part of a beat\n        // between this stem and the previous one.\n\n\n        if (dotted && context.stems && context.stems.length) {\n          if (dotted > 0) {\n            t = (1 - Math.pow(0.5, dotted)) * parsed.stem.time;\n          } else {\n            t = (Math.pow(0.5, -dotted) - 1) * context.stems[context.stems.length - 1].time;\n          }\n\n          syncopateStem(context.stems[context.stems.length - 1], t);\n          syncopateStem(parsed.stem, -t);\n        }\n\n        dotted = 0; // Slur all the notes contained within a strem.\n\n        if (accent.slurred) {\n          slurStem(parsed.stem, true);\n        } // Start a default voice if we're not in a voice yet.\n\n\n        if (context === result) {\n          startVoiceContext(firstVoiceName());\n        }\n\n        if (!(\"stems\" in context)) {\n          context.stems = [];\n        } // Add the stem to the sequence of stems for this voice.\n\n\n        context.stems.push(parsed.stem); // Advance the parsing index since a stem is multiple tokens.\n\n        index = parsed.index;\n      }\n    } // Parse M: lines.  \"3/4\" is 3/4 time and \"C\" is 4/4 (common) time.\n\n\n    function parseMeter(mline, beatinfo) {\n      var d = /^C/.test(mline) ? 4 / 4 : durationToTime(mline);\n\n      if (!d) {\n        return;\n      }\n\n      if (!beatinfo.unitnote) {\n        if (d < 0.75) {\n          beatinfo.unitnote = 1 / 16;\n        } else {\n          beatinfo.unitnote = 1 / 8;\n        }\n      }\n    } // Parse L: lines, e.g., \"1/8\".\n\n\n    function parseUnitNote(lline, beatinfo) {\n      var d = durationToTime(lline);\n\n      if (!d) {\n        return;\n      }\n\n      beatinfo.unitnote = d;\n    } // Parse Q: line, e.g., \"1/4=66\".\n\n\n    function parseTempo(qline, beatinfo) {\n      var parts = qline.split(/\\s+|=/),\n          j,\n          unit = null,\n          tempo = null;\n\n      for (j = 0; j < parts.length; ++j) {\n        // It could be reversed, like \"66=1/4\", or just \"120\", so\n        // determine what is going on by looking for a slash etc.\n        if (parts[j].indexOf(\"/\") >= 0 || /^[1-4]$/.test(parts[j])) {\n          // The note-unit (e.g., 1/4).\n          unit = unit || durationToTime(parts[j]);\n        } else {\n          // The tempo-number (e.g., 120)\n          tempo = tempo || Number(parts[j]);\n        }\n      }\n\n      if (unit) {\n        beatinfo.unitbeat = unit;\n      }\n\n      if (tempo) {\n        beatinfo.tempo = tempo;\n      }\n    } // Run through all the notes, adding up time for tied notes,\n    // and marking notes that were held over with holdover = true.\n\n\n    function processTies(stems) {\n      var tied = {},\n          nextTied,\n          j,\n          k,\n          note,\n          firstNote;\n\n      for (j = 0; j < stems.length; ++j) {\n        nextTied = {};\n\n        for (k = 0; k < stems[j].notes.length; ++k) {\n          firstNote = note = stems[j].notes[k];\n\n          if (tied.hasOwnProperty(note.pitch)) {\n            // Pitch was tied from before.\n            firstNote = tied[note.pitch]; // Get the earliest note in the tie.\n\n            firstNote.time += note.time; // Extend its time.\n\n            note.holdover = true; // Silence this note as a holdover.\n          }\n\n          if (note.tie) {\n            // This note is tied with the next.\n            nextTied[note.pitch] = firstNote; // Save it away.\n          }\n        }\n\n        tied = nextTied;\n      }\n    } // Returns a map of A-G -> accidentals, according to the key signature.\n    // When n is zero, there are no accidentals (e.g., C major or A minor).\n    // When n is positive, there are n sharps (e.g., for G major, n = 1).\n    // When n is negative, there are -n flats (e.g., for F major, n = -1).\n\n\n    function accidentals(n) {\n      var sharps = \"FCGDAEB\",\n          result = {},\n          j;\n\n      if (!n) {\n        return result;\n      }\n\n      if (n > 0) {\n        // Handle sharps.\n        for (j = 0; j < n && j < 7; ++j) {\n          result[sharps.charAt(j)] = \"^\";\n        }\n      } else {\n        // Flats are in the opposite order.\n        for (j = 0; j > n && j > -7; --j) {\n          result[sharps.charAt(6 + j)] = \"_\";\n        }\n      }\n\n      return result;\n    } // Decodes the key signature line (e.g., K: C#m) at the front of an ABC tune.\n    // Supports the whole range of scale systems listed in the ABC spec.\n\n\n    function keysig(keyname) {\n      if (!keyname) {\n        return {};\n      }\n\n      var kkey,\n          sigcodes = {\n        // Major\n        \"c#\": 7,\n        \"f#\": 6,\n        b: 5,\n        e: 4,\n        a: 3,\n        d: 2,\n        g: 1,\n        c: 0,\n        f: -1,\n        bb: -2,\n        eb: -3,\n        ab: -4,\n        db: -5,\n        gb: -6,\n        cb: -7,\n        // Minor\n        \"a#m\": 7,\n        \"d#m\": 6,\n        \"g#m\": 5,\n        \"c#m\": 4,\n        \"f#m\": 3,\n        bm: 2,\n        em: 1,\n        am: 0,\n        dm: -1,\n        gm: -2,\n        cm: -3,\n        fm: -4,\n        bbm: -5,\n        ebm: -6,\n        abm: -7,\n        // Mixolydian\n        \"g#mix\": 7,\n        \"c#mix\": 6,\n        \"f#mix\": 5,\n        bmix: 4,\n        emix: 3,\n        amix: 2,\n        dmix: 1,\n        gmix: 0,\n        cmix: -1,\n        fmix: -2,\n        bbmix: -3,\n        ebmix: -4,\n        abmix: -5,\n        dbmix: -6,\n        gbmix: -7,\n        // Dorian\n        \"d#dor\": 7,\n        \"g#dor\": 6,\n        \"c#dor\": 5,\n        \"f#dor\": 4,\n        bdor: 3,\n        edor: 2,\n        ador: 1,\n        ddor: 0,\n        gdor: -1,\n        cdor: -2,\n        fdor: -3,\n        bbdor: -4,\n        ebdor: -5,\n        abdor: -6,\n        dbdor: -7,\n        // Phrygian\n        \"e#phr\": 7,\n        \"a#phr\": 6,\n        \"d#phr\": 5,\n        \"g#phr\": 4,\n        \"c#phr\": 3,\n        \"f#phr\": 2,\n        bphr: 1,\n        ephr: 0,\n        aphr: -1,\n        dphr: -2,\n        gphr: -3,\n        cphr: -4,\n        fphr: -5,\n        bbphr: -6,\n        ebphr: -7,\n        // Lydian\n        \"f#lyd\": 7,\n        blyd: 6,\n        elyd: 5,\n        alyd: 4,\n        dlyd: 3,\n        glyd: 2,\n        clyd: 1,\n        flyd: 0,\n        bblyd: -1,\n        eblyd: -2,\n        ablyd: -3,\n        dblyd: -4,\n        gblyd: -5,\n        cblyd: -6,\n        fblyd: -7,\n        // Locrian\n        \"b#loc\": 7,\n        \"e#loc\": 6,\n        \"a#loc\": 5,\n        \"d#loc\": 4,\n        \"g#loc\": 3,\n        \"c#loc\": 2,\n        \"f#loc\": 1,\n        bloc: 0,\n        eloc: -1,\n        aloc: -2,\n        dloc: -3,\n        gloc: -4,\n        cloc: -5,\n        floc: -6,\n        bbloc: -7\n      };\n      var k = keyname.replace(/\\s+/g, \"\").toLowerCase().substr(0, 5);\n      var scale = k.match(/maj|min|mix|dor|phr|lyd|loc|m/);\n\n      if (scale) {\n        if (scale == \"maj\") {\n          kkey = k.substr(0, scale.index);\n        } else if (scale == \"min\") {\n          kkey = k.substr(0, scale.index + 1);\n        } else {\n          kkey = k.substr(0, scale.index + scale[0].length);\n        }\n      } else {\n        kkey = /^[a-g][#b]?/.exec(k) || \"\";\n      }\n\n      var result = accidentals(sigcodes[kkey]);\n      var extras = keyname.substr(kkey.length).match(/(_+|=|\\^+)[a-g]/gi);\n\n      if (extras) {\n        for (var j = 0; j < extras.length; ++j) {\n          var note = extras[j].charAt(extras[j].length - 1).toUpperCase();\n\n          if (extras[j].charAt(0) == \"=\") {\n            delete result[note];\n          } else {\n            result[note] = extras[j].substr(0, extras[j].length - 1);\n          }\n        }\n      }\n\n      return result;\n    } // Additively adjusts the beats for a stem and the contained notes.\n\n\n    function syncopateStem(stem, t) {\n      var j,\n          note,\n          stemtime = stem.time,\n          newtime = stemtime + t;\n      stem.time = newtime;\n      syncopateStem;\n\n      for (j = 0; j < stem.notes.length; ++j) {\n        note = stem.notes[j]; // Only adjust a note's duration if it matched the stem's duration.\n\n        if (note.time == stemtime) {\n          note.time = newtime;\n        }\n      }\n    } // Marks everything in the stem with the slur attribute (or deletes it).\n\n\n    function slurStem(stem, addSlur) {\n      var j, note;\n\n      for (j = 0; j < stem.notes.length; ++j) {\n        note = stem.notes[j];\n\n        if (addSlur) {\n          note.slurred = true;\n        } else if (note.slurred) {\n          delete note.slurred;\n        }\n      }\n    } // Scales the beats for a stem and the contained notes.\n\n\n    function scaleStem(stem, s) {\n      var j;\n      stem.time *= s;\n\n      for (j = 0; j < stem.notes.length; ++j) {\n        stem.notes[j].time *= s;\n      }\n    } // Parses notation of the form (3 or (5:2:10, which means to do\n    // the following 3 notes in the space of 2 notes, or to do the following\n    // 10 notes at the rate of 5 notes per 2 beats.\n\n\n    function parseBeatlet(token) {\n      var m = /^\\((\\d+)(?::(\\d+)(?::(\\d+))?)?$/.exec(token);\n\n      if (!m) {\n        return null;\n      }\n\n      var count = Number(m[1]),\n          beats = Number(m[2]) || 2,\n          duration = Number(m[3]) || count;\n      return {\n        time: beats / count,\n        count: duration\n      };\n    } // Parse !ppp! markings.\n\n\n    function parseDecoration(token, accent) {\n      if (token.length < 2) {\n        return;\n      }\n\n      token = token.substring(1, token.length - 1);\n\n      switch (token) {\n        case \"pppp\":\n        case \"ppp\":\n          accent.dynamics = 0.2;\n          break;\n\n        case \"pp\":\n          accent.dynamics = 0.4;\n          break;\n\n        case \"p\":\n          accent.dynamics = 0.6;\n          break;\n\n        case \"mp\":\n          accent.dynamics = 0.8;\n          break;\n\n        case \"mf\":\n          accent.dynamics = 1.0;\n          break;\n\n        case \"f\":\n          accent.dynamics = 1.2;\n          break;\n\n        case \"ff\":\n          accent.dynamics = 1.4;\n          break;\n\n        case \"fff\":\n        case \"ffff\":\n          accent.dynamics = 1.5;\n          break;\n      }\n    } // Parses a stem, which may be a single note, or which may be\n    // a chorded note.\n\n\n    function parseStem(tokens, index, key, accent) {\n      var notes = [],\n          duration = \"\",\n          staccato = false,\n          noteDuration,\n          noteTime,\n          velocity,\n          lastNote = null,\n          minStemTime = Infinity,\n          j; // A single staccato marking applies to the entire stem.\n\n      if (index < tokens.length && \".\" == tokens[index]) {\n        staccato = true;\n        index++;\n      }\n\n      if (index < tokens.length && tokens[index] == \"[\") {\n        // Deal with [CEG] chorded notation.\n        index++; // Scan notes within the chord.\n\n        while (index < tokens.length) {\n          // Ignore and space and %comments.\n          if (/^[\\s%]/.test(tokens[index])) {\n            index++;\n            continue;\n          }\n\n          if (/[A-Ga-g]/.test(tokens[index])) {\n            // Grab a pitch.\n            lastNote = {\n              pitch: applyAccent(tokens[index++], key, accent),\n              tie: false\n            };\n            lastNote.frequency = Utils.pitchToFrequency(lastNote.pitch);\n            notes.push(lastNote);\n          } else if (/[xzXZ]/.test(tokens[index])) {\n            // Grab a rest.\n            lastNote = null;\n            index++;\n          } else if (\".\" == tokens[index]) {\n            // A staccato mark applies to the entire stem.\n            staccato = true;\n            index++;\n            continue;\n          } else {\n            // Stop parsing the stem if something is unrecognized.\n            break;\n          } // After a pitch or rest, look for a duration.\n\n\n          if (index < tokens.length && /^(?![\\s%!]).*[\\d\\/]/.test(tokens[index])) {\n            noteDuration = tokens[index++];\n            noteTime = durationToTime(noteDuration);\n          } else {\n            noteDuration = \"\";\n            noteTime = 1;\n          } // If it's a note (not a rest), store the duration\n\n\n          if (lastNote) {\n            lastNote.duration = noteDuration;\n            lastNote.time = noteTime;\n          } // When a stem has more than one duration, use the shortest\n          // one for timing. The standard says to pick the first one,\n          // but in practice, transcribed music online seems to\n          // follow the rule that the stem's duration is determined\n          // by the shortest contained duration.\n\n\n          if (noteTime && noteTime < minStemTime) {\n            duration = noteDuration;\n            minStemTime = noteTime;\n          } // After a duration, look for a tie mark.  Individual notes\n          // within a stem can be tied.\n\n\n          if (index < tokens.length && \"-\" == tokens[index]) {\n            if (lastNote) {\n              notes[notes.length - 1].tie = true;\n            }\n\n            index++;\n          }\n        } // The last thing in a chord should be a ].  If it isn't, then\n        // this doesn't look like a stem after all, and return null.\n\n\n        if (tokens[index] != \"]\") {\n          return null;\n        }\n\n        index++;\n      } else if (index < tokens.length && /[A-Ga-g]/.test(tokens[index])) {\n        // Grab a single note.\n        lastNote = {\n          pitch: applyAccent(tokens[index++], key, accent),\n          tie: false,\n          duration: \"\",\n          time: 1\n        };\n        lastNote.frequency = Utils.pitchToFrequency(lastNote.pitch);\n        notes.push(lastNote);\n      } else if (index < tokens.length && /^[xzXZ]$/.test(tokens[index])) {\n        // Grab a rest - no pitch.\n        index++;\n      } else {\n        // Something we don't recognize - not a stem.\n        return null;\n      } // Right after a [chord], note, or rest, look for a duration marking.\n\n\n      if (index < tokens.length && /^(?![\\s%!]).*[\\d\\/]/.test(tokens[index])) {\n        duration = tokens[index++];\n        noteTime = durationToTime(duration); // Apply the duration to all the ntoes in the stem.\n        // NOTE: spec suggests multiplying this duration, but that\n        // idiom is not seen (so far) in practice.\n\n        for (j = 0; j < notes.length; ++j) {\n          notes[j].duration = duration;\n          notes[j].time = noteTime;\n        }\n      } // Then look for a trailing tie marking.  Will tie every note in a chord.\n\n\n      if (index < tokens.length && \"-\" == tokens[index]) {\n        index++;\n\n        for (j = 0; j < notes.length; ++j) {\n          notes[j].tie = true;\n        }\n      }\n\n      if (accent.dynamics) {\n        velocity = accent.dynamics;\n\n        for (j = 0; j < notes.length; ++j) {\n          notes[j].velocity = velocity;\n        }\n      }\n\n      return {\n        index: index,\n        stem: {\n          notes: notes,\n          duration: duration,\n          staccato: staccato,\n          time: durationToTime(duration)\n        }\n      };\n    } // Normalizes pitch markings by stripping leading = if present.\n\n\n    function stripNatural(pitch) {\n      if (pitch.length > 0 && pitch.charAt(0) == \"=\") {\n        return pitch.substr(1);\n      }\n\n      return pitch;\n    } // Processes an accented pitch, automatically applying accidentals\n    // that have accumulated within the measure, and also saving\n    // explicit accidentals to continue to apply in the measure.\n\n\n    function applyAccent(pitch, key, accent) {\n      var m = /^(\\^+|_+|=|)([A-Ga-g])(.*)$/.exec(pitch),\n          letter;\n\n      if (!m) {\n        return pitch;\n      } // Note that an accidental in one octave applies in other octaves.\n\n\n      letter = m[2].toUpperCase();\n\n      if (m[1].length > 0) {\n        // When there is an explicit accidental, then remember it for\n        // the rest of the measure.\n        accent[letter] = m[1];\n        return stripNatural(pitch);\n      }\n\n      if (accent.hasOwnProperty(letter)) {\n        // Accidentals from this measure apply to unaccented notes.\n        return stripNatural(accent[letter] + m[2] + m[3]);\n      }\n\n      if (key.hasOwnProperty(letter)) {\n        // Key signatures apply by default.\n        return stripNatural(key[letter] + m[2] + m[3]);\n      }\n\n      return stripNatural(pitch);\n    } // Converts an ABC duration to a number (e.g., \"/3\"->0.333 or \"11/2\"->1.5).\n\n\n    function durationToTime(duration) {\n      var m = /^(\\d*)(?:\\/(\\d*))?$|^(\\/+)$/.exec(duration),\n          n,\n          d,\n          i = 0,\n          ilen;\n      if (!m) return;\n      if (m[3]) return Math.pow(0.5, m[3].length);\n      d = m[2] ? parseFloat(m[2]) : /\\//.test(duration) ? 2 : 1; // Handle mixed frations:\n\n      ilen = 0;\n      n = m[1] ? parseFloat(m[1]) : 1;\n\n      if (m[2]) {\n        while (ilen + 1 < m[1].length && n > d) {\n          ilen += 1;\n          i = parseFloat(m[1].substring(0, ilen));\n          n = parseFloat(m[1].substring(ilen));\n        }\n      }\n\n      return i + n / d;\n    }\n  } //////////////////////////////////////////////////////////////////////////////////////////////////\n  // INSTRUMENTS\n  //\n  // All further details of audio handling are encapsulated in the Instrument\n  // class, which knows how to synthesize a basic timbre; how to play and\n  // schedule a tone; and how to parse and sequence a song written in ABC\n  // notation.\n  // The constructor accepts a timbre string or object, specifying\n  // its default sound.  The main mechanisms in Instrument are for handling\n  // sequencing of a (potentially large) set of notes over a (potentially\n  // long) period of time.  The overall strategy:\n  //\n  //                       Events:      'noteon'        'noteoff'\n  //                                      |               |\n  // tone()-(quick tones)->| _startSet -->| _finishSet -->| _cleanupSet -->|\n  //   \\                   |  /           | Playing tones | Done tones     |\n  //    \\---- _queue ------|-/                                             |\n  //      of future tones  |3 secs ahead sent to WebAudio, removed when done\n  //\n  // The reason for this queuing is to reduce the complexity of the\n  // node graph sent to WebAudio: at any time, WebAudio is only\n  // responsible for about 2 seconds of music.  If a graph with too\n  // too many nodes is sent to WebAudio at once, output distorts badly.\n\n\n  var Instrument = /*#__PURE__*/function () {\n    Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Instrument, null, [{\n      key: \"pitchToMidi\",\n      // Seconds to delay all audiable timing.\n      // Seconds before an event to reexamine queue.\n      // Seconds ahead to put notes in WebAudio.\n      // Default duration of a tone.\n      // Silent time before disconnecting nodes.\n      // Accepts either an ABC pitch or a midi number and converts to midi.\n      value: function pitchToMidi(n) {\n        if (typeof n == \"string\") {\n          return Utils.pitchToMidi(n);\n        }\n\n        return n;\n      } // Accepts either an ABC pitch or a midi number and converts to ABC pitch.\n\n    }, {\n      key: \"midiToPitch\",\n      value: function midiToPitch(n) {\n        if (typeof n == \"number\") {\n          return Utils.midiToPitch(n);\n        }\n\n        return n;\n      }\n    }]);\n\n    function Instrument(options) {\n      Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, Instrument);\n\n      Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"_out\", void 0);\n\n      Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"_atop\", void 0);\n\n      Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"_timbre\", void 0);\n\n      Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"_queue\", void 0);\n\n      Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"_minQueueTime\", void 0);\n\n      Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"_maxScheduledTime\", void 0);\n\n      Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"_unsortedQueue\", void 0);\n\n      Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"_startSet\", void 0);\n\n      Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"_finishSet\", void 0);\n\n      Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"_cleanupSet\", void 0);\n\n      Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"_callbackSet\", void 0);\n\n      Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"_handlers\", void 0);\n\n      Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"_now\", void 0);\n\n      Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"_pollTimer\", void 0);\n\n      this._atop = Utils.getAudioTop(); // Audio context.\n\n      this._timbre = Utils.makeTimbre(options, this._atop); // The instrument's timbre.\n\n      this._queue = []; // A queue of future tones to play.\n\n      this._minQueueTime = Infinity; // The earliest time in _queue.\n\n      this._maxScheduledTime = 0; // The latest time in _queue.\n\n      this._unsortedQueue = false; // True if _queue is unsorted.\n\n      this._startSet = []; // Unstarted tones already sent to WebAudio.\n\n      this._finishSet = {}; // Started tones playing in WebAudio.\n\n      this._cleanupSet = []; // Tones waiting for cleanup.\n\n      this._callbackSet = []; // A set of scheduled callbacks.\n\n      this._handlers = {}; // 'noteon' and 'noteoff' handlers.\n\n      this._now = null; // A cached current-time value.\n\n      if (Utils.isAudioPresent()) {\n        this.silence(); // Initializes top-level audio node.\n      }\n    } // Sets the default timbre for the instrument.  See defaultTimbre.\n\n\n    Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Instrument, [{\n      key: \"setTimbre\",\n      value: function setTimbre(t) {\n        this._timbre = Utils.makeTimbre(t, this._atop); // Saves a copy.\n      } // Returns the default timbre for the instrument as an object.\n\n    }, {\n      key: \"getTimbre\",\n      value: function getTimbre(t) {\n        return Utils.makeTimbre(this._timbre, this._atop); // Makes a copy.\n      } // Sets the overall volume for the instrument immediately.\n\n    }, {\n      key: \"setVolume\",\n      value: function setVolume(v) {\n        // Without an audio system, volume cannot be set.\n        if (!this._out) {\n          return;\n        }\n\n        if (!isNaN(v)) {\n          this._out.gain.value = v;\n        }\n      } // Sets the overall volume for the instrument.\n\n    }, {\n      key: \"getVolume\",\n      value: function getVolume(v) {\n        // Without an audio system, volume is stuck at zero.\n        if (!this._out) {\n          return 0.0;\n        }\n\n        return this._out.gain.value;\n      } // Silences the instrument immediately by reinitializing the audio\n      // graph for this instrument and emptying or flushing all queues in the\n      // scheduler.  Carefully notifies all notes that have started but not\n      // yet finished, and sequences that are awaiting scheduled callbacks.\n      // Does not notify notes that have not yet started.\n\n    }, {\n      key: \"silence\",\n      value: function silence() {\n        var j,\n            finished,\n            callbacks,\n            initvolume = 1; // Clear future notes.\n\n        this._queue.length = 0;\n        this._minQueueTime = Infinity;\n        this._maxScheduledTime = 0; // Don't notify notes that haven't started yet.\n\n        this._startSet.length = 0; // Flush finish callbacks that are promised.\n\n        finished = this._finishSet;\n        this._finishSet = {}; // Flush one-time callacks that are promised.\n\n        callbacks = this._callbackSet;\n        this._callbackSet = []; // Disconnect the audio graph for this instrument.\n\n        if (this._out) {\n          this._out.disconnect();\n\n          initvolume = this._out.gain.value;\n        } // Reinitialize the audio graph: all audio for the instrument\n        // multiplexes through a single gain node with a master volume.\n\n\n        this._atop = Utils.getAudioTop();\n        this._out = this._atop.ac.createGain(); // this._out.gain.value = initvolume; // RONYEH REMOVED DUE TO BUG.\n\n        this._out.gain.setTargetAtTime(initvolume, this._atop.ac.currentTime, 0.001); // RONYEH ADDED\n\n\n        this._out.connect(this._atop.out); // As a last step, call all promised notifications.\n\n\n        for (j in finished) {\n          this._trigger(\"noteoff\", finished[j]);\n        }\n\n        for (j = 0; j < callbacks.length; ++j) {\n          callbacks[j].callback();\n        }\n      } // Future notes are scheduled relative to now(), which provides\n      // access to audioCurrentStartTime(), a time that holds steady\n      // until the script releases to the event loop.  When _now is\n      // non-null, it indicates that scheduling is already in progress.\n      // The timer-driven _doPoll function clears the cached _now.\n\n    }, {\n      key: \"now\",\n      value: function now() {\n        if (this._now != null) {\n          return this._now;\n        }\n\n        this._startPollTimer(true); // passing (true) sets this._now.\n\n\n        return this._now;\n      } // Register an event handler.  Done without jQuery to reduce dependencies.\n\n    }, {\n      key: \"on\",\n      value: function on(eventname, cb) {\n        if (!this._handlers.hasOwnProperty(eventname)) {\n          this._handlers[eventname] = [];\n        }\n\n        this._handlers[eventname].push(cb);\n      } // Unregister an event handler.  Done without jQuery to reduce dependencies.\n\n    }, {\n      key: \"off\",\n      value: function off(eventname, cb) {\n        if (this._handlers.hasOwnProperty(eventname)) {\n          if (!cb) {\n            this._handlers[eventname] = [];\n          } else {\n            var j,\n                hunt = this._handlers[eventname];\n\n            for (j = 0; j < hunt.length; ++j) {\n              if (hunt[j] === cb) {\n                hunt.splice(j, 1);\n                j -= 1;\n              }\n            }\n          }\n        }\n      } // Trigger an event, notifying any registered handlers.\n\n    }, {\n      key: \"_trigger\",\n      value: function _trigger(eventname, record) {\n        var cb = this._handlers[eventname],\n            j;\n\n        if (!cb) {\n          return;\n        }\n\n        if (cb.length == 1) {\n          // Special, common case of one handler: no copy needed.\n          cb[0](record);\n          return;\n        } // Copy the array of callbacks before iterating, because the\n        // main this._handlers copy could be changed by a handler.\n        // You get notified if-and-only-if you are registered\n        // at the starting moment of _trigger.\n\n\n        cb = cb.slice();\n\n        for (j = 0; j < cb.length; ++j) {\n          cb[j](record);\n        }\n      } // Tells the WebAudio API to play a tone (now or soon).  The passed\n      // record specifies a start time and release time, an ADSR envelope,\n      // and other timbre parameters.  This function sets up a WebAudio\n      // node graph for the tone generators and filters for the tone.\n\n    }, {\n      key: \"_makeSound\",\n      value: function _makeSound(record) {\n        var timbre = record.timbre || this._timbre,\n            starttime = record.time + Instrument.timeOffset,\n            releasetime = starttime + record.duration,\n            attacktime = Math.min(releasetime, starttime + timbre.attack),\n            decaytime = timbre.decay * Math.pow(440 / record.frequency, timbre.decayfollow),\n            decaystarttime = attacktime,\n            stoptime = releasetime + timbre.release,\n            doubled = timbre.detune && timbre.detune != 1.0,\n            amp = timbre.gain * record.velocity * (doubled ? 0.5 : 1.0),\n            ac = this._atop.ac,\n            g,\n            f,\n            o,\n            o2,\n            pwave,\n            k,\n            wf,\n            bwf; // Only hook up tone generators if it is an audible sound.\n\n        if (record.duration > 0 && record.velocity > 0) {\n          g = ac.createGain();\n          g.gain.setValueAtTime(0, starttime);\n          g.gain.linearRampToValueAtTime(amp, attacktime); // For the beginning of the decay, use linearRampToValue instead\n          // of setTargetAtTime, because it avoids http://crbug.com/254942.\n\n          while (decaystarttime < attacktime + 1 / 32 && decaystarttime + 1 / 256 < releasetime) {\n            // Just trace out the curve in increments of 1/256 sec\n            // for up to 1/32 seconds.\n            decaystarttime += 1 / 256;\n            g.gain.linearRampToValueAtTime(amp * (timbre.sustain + (1 - timbre.sustain) * Math.exp((attacktime - decaystarttime) / decaytime)), decaystarttime);\n          } // For the rest of the decay, use setTargetAtTime.\n\n\n          g.gain.setTargetAtTime(amp * timbre.sustain, decaystarttime, decaytime); // Then at release time, mark the value and ramp to zero.\n\n          g.gain.setValueAtTime(amp * (timbre.sustain + (1 - timbre.sustain) * Math.exp((attacktime - releasetime) / decaytime)), releasetime);\n          g.gain.linearRampToValueAtTime(0, stoptime);\n          g.connect(this._out); // Hook up a low-pass filter if cutoff is specified.\n\n          if (!timbre.cutoff && !timbre.cutfollow || timbre.cutoff == Infinity) {\n            f = g;\n          } else {\n            // Apply the cutoff frequency adjusted using cutfollow.\n            f = ac.createBiquadFilter(); // f.frequency.value = timbre.cutoff + record.frequency * timbre.cutfollow; // RONYEH REMOVED DUE TO BUG.\n            // f.Q.value = timbre.resonance; // RONYEH REMOVED DUE TO BUG.\n\n            f.frequency.setTargetAtTime(timbre.cutoff + record.frequency * timbre.cutfollow, this._atop.ac.currentTime, 0.001); // RONYEH ADDED\n\n            f.Q.setTargetAtTime(timbre.resonance, this._atop.ac.currentTime, 0.001); // RONYEH ADDED\n\n            f.connect(g);\n          } // Hook up the main oscillator.\n\n\n          o = Utils.makeOscillator(this._atop, timbre.wave, record.frequency);\n          o.connect(f);\n          o.start(starttime);\n          o.stop(stoptime); // Hook up a detuned oscillator.\n\n          if (doubled) {\n            o2 = Utils.makeOscillator(this._atop, timbre.wave, record.frequency * timbre.detune);\n            o2.connect(f);\n            o2.start(starttime);\n            o2.stop(stoptime);\n          } // Store nodes in the record so that they can be modified\n          // in case the tone is truncated later.\n\n\n          record.gainNode = g;\n          record.oscillators = [o];\n\n          if (doubled) {\n            record.oscillators.push(o2);\n          }\n\n          record.cleanuptime = stoptime;\n        } else {\n          // Inaudible sounds are scheduled: their purpose is to truncate\n          // audible tones at the same pitch.  But duration is set to zero\n          // so that they are cleaned up quickly.\n          record.duration = 0;\n        }\n\n        this._startSet.push(record);\n      } // Truncates a sound previously scheduled by _makeSound by using\n      // cancelScheduledValues and directly ramping down to zero.\n      // Can only be used to shorten a sound.\n\n    }, {\n      key: \"_truncateSound\",\n      value: function _truncateSound(record, truncatetime) {\n        if (truncatetime < record.time + record.duration) {\n          record.duration = Math.max(0, truncatetime - record.time);\n\n          if (record.gainNode) {\n            var timbre = record.timbre || this._timbre,\n                starttime = record.time + Instrument.timeOffset,\n                releasetime = truncatetime + Instrument.timeOffset,\n                attacktime = Math.min(releasetime, starttime + timbre.attack),\n                decaytime = timbre.decay * Math.pow(440 / record.frequency, timbre.decayfollow),\n                stoptime = releasetime + timbre.release,\n                cleanuptime = stoptime + Instrument.cleanupDelay,\n                doubled = timbre.detune && timbre.detune != 1.0,\n                amp = timbre.gain * record.velocity * (doubled ? 0.5 : 1.0),\n                j,\n                g = record.gainNode; // Cancel any envelope points after the new releasetime.\n\n            g.gain.cancelScheduledValues(releasetime);\n\n            if (releasetime <= starttime) {\n              // Release before start?  Totally silence the note.\n              g.gain.setValueAtTime(0, releasetime);\n            } else if (releasetime <= attacktime) {\n              // Release before attack is done?  Interrupt ramp up.\n              // g.gain.linearRampToValueAtTime((amp * (releasetime - starttime)) / (attacktime - starttime));\n              g.gain.linearRampToValueAtTime(amp * (releasetime - starttime) / (attacktime - starttime), starttime); // RONYEH ADDED SECOND PARAM \"starttime\".\n            } else {\n              // Release during decay?  Interrupt decay down.\n              g.gain.setValueAtTime(amp * (timbre.sustain + (1 - timbre.sustain) * Math.exp((attacktime - releasetime) / decaytime)), releasetime);\n            } // Then ramp down to zero according to record.release.\n\n\n            g.gain.linearRampToValueAtTime(0, stoptime); // After stoptime, stop the oscillators.  This is necessary to\n            // eliminate extra work for WebAudio for no-longer-audible notes.\n\n            if (record.oscillators) {\n              for (j = 0; j < record.oscillators.length; ++j) {\n                record.oscillators[j].stop(stoptime);\n              }\n            } // Schedule disconnect.\n\n\n            record.cleanuptime = cleanuptime;\n          }\n        }\n      } // The core scheduling loop is managed by Instrument._doPoll.  It reads\n      // the audiocontext's current time and pushes tone records from one\n      // stage to the next.\n      //\n      // 1. The first stage is the _queue, which has tones that have not\n      //    yet been given to WebAudio. This loop scans _queue to find\n      //    notes that need to begin in the next few seconds; then it\n      //    sends those to WebAduio and moves them to _startSet. Because\n      //    scheduled songs can be long, _queue can be large.\n      //\n      // 2. Second is _startSet, which has tones that have been given to\n      //    WebAudio, but whose start times have not yet elapsed. When\n      //    the time advances past the start time of a record, a 'noteon'\n      //    notification is fired for the tone, and it is moved to\n      //    _finishSet.\n      //\n      // 3. _finishSet represents the notes that are currently sounding.\n      //    The programming model for Instrument is that only one tone of\n      //    a specific frequency may be played at once within a Instrument,\n      //    so only one tone of a given frequency may exist in _finishSet\n      //    at once.  When there is a conflict, the sooner-to-end-note\n      //    is truncated.\n      //\n      // 4. After a note is released, it may have a litle release time\n      //    (depending on timbre.release), after which the nodes can\n      //    be totally disconnected and cleaned up.  _cleanupSet holds\n      //    notes for which we are awaiting cleanup.\n\n    }, {\n      key: \"_doPoll\",\n      value: function _doPoll() {\n        this._pollTimer = null;\n        this._now = null;\n\n        if (window.hasOwnProperty(\"interrupted\") && window[\"interrupted\"] === true) {\n          this.silence();\n          return;\n        } // The shortest time we can delay is 1 / 1000 secs, so if an event\n        // is within the next 0.5 ms, now is the closest moment, and we go\n        // ahead and process it.\n\n\n        var instant = this._atop.ac.currentTime + 1 / 2000,\n            callbacks = [],\n            j,\n            work,\n            when,\n            freq,\n            record,\n            conflict,\n            save,\n            cb; // Schedule a batch of notes\n\n        if (this._minQueueTime - instant <= Instrument.bufferSecs) {\n          if (this._unsortedQueue) {\n            this._queue.sort(function (a, b) {\n              if (a.time != b.time) {\n                return a.time - b.time;\n              }\n\n              if (a.duration != b.duration) {\n                return a.duration - b.duration;\n              }\n\n              return a.frequency - b.frequency;\n            });\n\n            this._unsortedQueue = false;\n          }\n\n          for (j = 0; j < this._queue.length; ++j) {\n            if (this._queue[j].time - instant > Instrument.bufferSecs) {\n              break;\n            }\n          }\n\n          if (j > 0) {\n            work = this._queue.splice(0, j);\n\n            for (j = 0; j < work.length; ++j) {\n              this._makeSound(work[j]);\n            }\n\n            this._minQueueTime = this._queue.length > 0 ? this._queue[0].time : Infinity;\n          }\n        } // Disconnect notes from the cleanup set.\n\n\n        for (j = 0; j < this._cleanupSet.length; ++j) {\n          record = this._cleanupSet[j];\n\n          if (record.cleanuptime < instant) {\n            if (record.gainNode) {\n              // This explicit disconnect is needed or else Chrome's WebAudio\n              // starts getting overloaded after a couple thousand notes.\n              record.gainNode.disconnect();\n              record.gainNode = null;\n            }\n\n            this._cleanupSet.splice(j, 1);\n\n            j -= 1;\n          }\n        } // Notify about any notes finishing.\n\n\n        for (freq in this._finishSet) {\n          record = this._finishSet[freq];\n          when = record.time + record.duration;\n\n          if (when <= instant) {\n            callbacks.push({\n              order: [when, 0],\n              f: this._trigger,\n              t: this,\n              a: [\"noteoff\", record]\n            });\n\n            if (record.cleanuptime != Infinity) {\n              this._cleanupSet.push(record);\n            }\n\n            delete this._finishSet[freq];\n          }\n        } // Call any specific one-time callbacks that were registered.\n\n\n        for (j = 0; j < this._callbackSet.length; ++j) {\n          cb = this._callbackSet[j];\n          when = cb.time;\n\n          if (when <= instant) {\n            callbacks.push({\n              order: [when, 1],\n              f: cb.callback,\n              t: null,\n              a: []\n            });\n\n            this._callbackSet.splice(j, 1);\n\n            j -= 1;\n          }\n        } // Notify about any notes starting.\n\n\n        for (j = 0; j < this._startSet.length; ++j) {\n          if (this._startSet[j].time <= instant) {\n            save = record = this._startSet[j];\n            freq = record.frequency;\n            conflict = null;\n\n            if (this._finishSet.hasOwnProperty(freq)) {\n              // If there is already a note at the same frequency playing,\n              // then release the one that starts first, immediately.\n              conflict = this._finishSet[freq];\n\n              if (conflict.time < record.time || conflict.time == record.time && conflict.duration < record.duration) {\n                // Our new sound conflicts with an old one: end the old one\n                // and notify immediately of its noteoff event.\n                this._truncateSound(conflict, record.time);\n\n                callbacks.push({\n                  order: [record.time, 0],\n                  f: this._trigger,\n                  t: this,\n                  a: [\"noteoff\", conflict]\n                });\n                delete this._finishSet[freq];\n              } else {\n                // A conflict from the future has already scheduled,\n                // so our own note shouldn't sound.  Truncate ourselves\n                // immediately, and suppress our own noteon and noteoff.\n                this._truncateSound(record, conflict.time);\n\n                conflict = record;\n              }\n            }\n\n            this._startSet.splice(j, 1);\n\n            j -= 1;\n\n            if (record.duration > 0 && record.velocity > 0 && conflict !== record) {\n              this._finishSet[freq] = record;\n              callbacks.push({\n                order: [record.time, 2],\n                f: this._trigger,\n                t: this,\n                a: [\"noteon\", record]\n              });\n            }\n          }\n        } // Schedule the next _doPoll.\n\n\n        this._startPollTimer(); // Sort callbacks according to the \"order\" tuple, so earlier events\n        // are notified first.\n\n\n        callbacks.sort(function (a, b) {\n          if (a.order[0] != b.order[0]) {\n            return a.order[0] - b.order[0];\n          } // tiebreak by notifying 'noteoff' first and 'noteon' last.\n\n\n          return a.order[1] - b.order[1];\n        }); // At the end, call all the callbacks without depending on \"this\" state.\n\n        for (j = 0; j < callbacks.length; ++j) {\n          cb = callbacks[j];\n          cb.f.apply(cb.t, cb.a);\n        }\n      } // Schedules the next _doPoll call by examining times in the various\n      // sets and determining the soonest event that needs _doPoll processing.\n\n    }, {\n      key: \"_startPollTimer\",\n      value: function _startPollTimer() {\n        var setnow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        // If we have already done a \"setnow\", then pollTimer is zero-timeout\n        // and cannot be faster.\n        if (this._pollTimer && this._now != null) {\n          return;\n        }\n\n        var self = this,\n            poll = function poll() {\n          self._doPoll();\n        },\n            earliest = Infinity,\n            j,\n            delay;\n\n        if (this._pollTimer) {\n          // Clear any old timer\n          clearTimeout(this._pollTimer);\n          this._pollTimer = null;\n        }\n\n        if (setnow) {\n          // When scheduling tones, cache _now and keep a zero-timeout poll.\n          // _now will be cleared the next time we execute _doPoll.\n          this._now = Utils.audioCurrentStartTime();\n          this._pollTimer = setTimeout(poll, 0);\n          return;\n        } // Timer due to notes starting: wake up for 'noteon' notification.\n\n\n        for (j = 0; j < this._startSet.length; ++j) {\n          earliest = Math.min(earliest, this._startSet[j].time);\n        } // Timer due to notes finishing: wake up for 'noteoff' notification.\n\n\n        for (j in this._finishSet) {\n          earliest = Math.min(earliest, this._finishSet[j].time + this._finishSet[j].duration);\n        } // Timer due to scheduled callback.\n\n\n        for (j = 0; j < this._callbackSet.length; ++j) {\n          earliest = Math.min(earliest, this._callbackSet[j].time);\n        } // Timer due to cleanup: add a second to give some time to batch up.\n\n\n        if (this._cleanupSet.length > 0) {\n          earliest = Math.min(earliest, this._cleanupSet[0].cleanuptime + 1);\n        } // Timer due to sequencer events: subtract a little time to stay ahead.\n\n\n        earliest = Math.min(earliest, this._minQueueTime - Instrument.dequeueTime);\n        delay = Math.max(0.001, earliest - this._atop.ac.currentTime); // If there are no future events, then we do not need a timer.\n\n        if (isNaN(delay) || delay == Infinity) {\n          return;\n        } // Use the Javascript timer to wake up at the right moment.\n\n\n        this._pollTimer = setTimeout(poll, Math.round(delay * 1000));\n      } // The low-level tone function.\n\n    }, {\n      key: \"tone\",\n      value: function tone(pitch, duration, velocity, delay, timbre, origin) {\n        // If audio is not present, this is a no-op.\n        if (!this._atop) {\n          return;\n        } // Called with an object instead of listed args.\n\n\n        if (typeof pitch == \"object\") {\n          if (velocity == null) velocity = pitch.velocity;\n          if (duration == null) duration = pitch.duration;\n          if (delay == null) delay = pitch.delay;\n          if (timbre == null) timbre = pitch.timbre;\n          if (origin == null) origin = pitch.origin;\n          pitch = pitch.pitch;\n        } // Convert pitch from various formats to Hz frequency and a midi num.\n\n\n        var midi, frequency;\n\n        if (!pitch) {\n          pitch = \"C\";\n        }\n\n        if (isNaN(pitch)) {\n          midi = Utils.pitchToMidi(pitch);\n          frequency = Utils.midiToFrequency(midi);\n        } else {\n          frequency = Number(pitch);\n\n          if (frequency < 0) {\n            midi = -frequency;\n            frequency = Utils.midiToFrequency(midi);\n          } else {\n            midi = Utils.frequencyToMidi(frequency);\n          }\n        }\n\n        if (!timbre) {\n          timbre = this._timbre;\n        } // If there is a custom timbre, validate and copy it.\n\n\n        if (timbre !== this._timbre) {\n          var given = timbre,\n              key;\n          timbre = {};\n\n          for (key in Utils.defaultTimbre) {\n            if (key in given) {\n              timbre[key] = given[key];\n            } else {\n              timbre[key] = Utils.defaultTimbre[key]; // RONYEH: There was a typo bug in the original Musical.js. It was caught by our TypeScript compiler.\n            }\n          }\n        } // Create the record for a tone.\n\n\n        var ac = this._atop.ac,\n            now = this.now(),\n            time = now + (delay || 0),\n            record = {\n          time: time,\n          on: false,\n          frequency: frequency,\n          midi: midi,\n          velocity: velocity == null ? 1 : velocity,\n          duration: duration == null ? Instrument.toneLength : duration,\n          timbre: timbre,\n          instrument: this,\n          gainNode: null,\n          oscillators: null,\n          cleanuptime: Infinity,\n          origin: origin // save the origin of the tone for visible feedback\n\n        };\n\n        if (time < now + Instrument.bufferSecs) {\n          // The tone starts soon!  Give it directly to WebAudio.\n          this._makeSound(record);\n        } else {\n          // The tone is later: queue it.\n          if (!this._unsortedQueue && this._queue.length && time < this._queue[this._queue.length - 1].time) {\n            this._unsortedQueue = true;\n          }\n\n          this._queue.push(record);\n\n          this._minQueueTime = Math.min(this._minQueueTime, record.time);\n        }\n      } // The low-level callback scheduling method.\n\n    }, {\n      key: \"schedule\",\n      value: function schedule(delay, callback) {\n        this._callbackSet.push({\n          time: this.now() + delay,\n          callback: callback\n        });\n      } // The high-level sequencing method.\n\n    }, {\n      key: \"play\",\n      value: function play(abcstring) {\n        var args = Array.prototype.slice.call(arguments),\n            done = null,\n            opts = {},\n            subfile,\n            abcfile,\n            argindex,\n            tempo,\n            timbre,\n            k,\n            delay,\n            maxdelay = 0,\n            attenuate,\n            voicename,\n            stems,\n            ni,\n            vn,\n            j,\n            stem,\n            note,\n            beatsecs,\n            secs,\n            v,\n            files = []; // Look for continuation as last argument.\n\n        if (args.length && \"function\" == typeof args[args.length - 1]) {\n          done = args.pop();\n        }\n\n        if (!this._atop) {\n          if (done) {\n            done();\n          }\n\n          return;\n        } // Look for options as first object.\n\n\n        argindex = 0;\n\n        if (\"object\" == typeof args[0]) {\n          // Copy own properties into an options object.\n          for (k in args[0]) {\n            if (args[0].hasOwnProperty(k)) {\n              opts[k] = args[0][k];\n            }\n          }\n\n          argindex = 1; // If a song is supplied by options object, process it.\n\n          if (opts.hasOwnProperty(\"song\")) {\n            args.push(opts[\"song\"]);\n          }\n        } // Parse any number of ABC files as input.\n\n\n        for (; argindex < args.length; ++argindex) {\n          // Handle splitting of ABC subfiles at X: lines.\n          subfile = args[argindex].split(/\\n(?=X:)/);\n\n          for (k = 0; k < subfile.length; ++k) {\n            abcfile = parseABCFile(subfile[k]);\n            if (!abcfile) continue; // Take tempo markings from the first file, and share them.\n\n            if (!opts.hasOwnProperty(\"tempo\") && abcfile.tempo) {\n              opts[\"tempo\"] = abcfile.tempo;\n\n              if (abcfile.unitbeat) {\n                opts[\"tempo\"] = opts[\"tempo\"] * abcfile.unitbeat / (abcfile.unitnote || 1);\n              }\n            } // Ignore files without songs.\n\n\n            if (!abcfile.voice) continue;\n            files.push(abcfile);\n          }\n        } // Default tempo to 120 if nothing else is specified.\n\n\n        if (!opts.hasOwnProperty(\"tempo\")) {\n          opts[\"tempo\"] = 120;\n        } // Default volume to 1 if nothing is specified.\n\n\n        if (!opts.hasOwnProperty(\"volume\")) {\n          opts[\"volume\"] = 1;\n        }\n\n        beatsecs = 60.0 / opts[\"tempo\"]; // Schedule all notes from all the files.\n\n        for (k = 0; k < files.length; ++k) {\n          abcfile = files[k]; // Each file can have multiple voices (e.g., left and right hands)\n\n          for (vn in abcfile.voice) {\n            // Each voice could have a separate timbre.\n            timbre = Utils.makeTimbre(opts[\"timbre\"] || abcfile.voice[vn].timbre || abcfile.timbre || this._timbre, this._atop); // Each voice has a series of stems (notes or chords).\n\n            stems = abcfile.voice[vn].stems;\n            if (!stems) continue; // Starting at delay zero (now), schedule all tones.\n\n            delay = 0;\n\n            for (ni = 0; ni < stems.length; ++ni) {\n              stem = stems[ni]; // Attenuate chords to reduce clipping.\n\n              attenuate = 1 / Math.sqrt(stem.notes.length); // Schedule every note inside a stem.\n\n              for (j = 0; j < stem.notes.length; ++j) {\n                note = stem.notes[j];\n\n                if (note.holdover) {\n                  // Skip holdover notes from ties.\n                  continue;\n                }\n\n                secs = (note.time || stem.time) * beatsecs;\n\n                if (stem.staccato) {\n                  // Shorten staccato notes.\n                  secs = Math.min(Math.min(secs, beatsecs / 16), timbre.attack + timbre.decay);\n                } else if (!note.slurred && secs >= 1 / 8) {\n                  // Separate unslurred notes by about a 30th of a second.\n                  secs -= 1 / 32;\n                }\n\n                v = (note.velocity || 1) * attenuate * opts[\"volume\"]; // This is innsermost part of the inner loop!\n\n                this.tone( // Play the tone:\n                note.pitch, // at the given pitch\n                secs, // for the given duration\n                v, // with the given volume\n                delay, // starting at the proper time\n                timbre, // with the selected timbre\n                note // the origin object for visual feedback\n                );\n              }\n\n              delay += stem.time * beatsecs; // Advance the sequenced time.\n            }\n\n            maxdelay = Math.max(delay, maxdelay);\n          }\n        }\n\n        this._maxScheduledTime = Math.max(this._maxScheduledTime, this.now() + maxdelay);\n\n        if (done) {\n          // Schedule a \"done\" callback after all sequencing is complete.\n          this.schedule(maxdelay, done);\n        }\n      }\n    }]);\n\n    return Instrument;\n  }(); //\n  // END INSTRUMENT\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n  Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Instrument, \"timeOffset\", 0.0625);\n\n  Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Instrument, \"dequeueTime\", 0.5);\n\n  Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Instrument, \"bufferSecs\", 2);\n\n  Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Instrument, \"toneLength\", 1);\n\n  Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Instrument, \"cleanupDelay\", 0.1);\n})(Musical || (Musical = {})); //////////////////////////////////////////////////////////////////////////////////////////////////\n// Musical JS\n\n\nvar _parseABCFile = parseABCFile;\n\n(function (_Musical2) {\n  var parseABCFile = _Musical2.parseABCFile = _parseABCFile;\n})(Musical || (Musical = {}));\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Musical);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./apps/shared/sound/Musical.ts\n");

/***/ })

})