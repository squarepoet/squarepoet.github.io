webpackHotUpdate_N_E("pages/midi",{

/***/ "./apps/shared/midi/LUMIKeys.ts":
/*!**************************************!*\
  !*** ./apps/shared/midi/LUMIKeys.ts ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var webmidi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webmidi */ \"./node_modules/webmidi/webmidi.min.js\");\n/* harmony import */ var webmidi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webmidi__WEBPACK_IMPORTED_MODULE_0__);\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n // This approach was informed by:\n// https://github.com/benob/LUMI-lights/blob/master/SYSEX.txt\n// https://github.com/WeAreROLI/roli_blocks_basics/blob/main/blocks/roli_BlockConfigId.h\n// Note: You can drag *.littlefoot programs into the ROLI Dashboard to customize the program running on the LUMI Keys.\n\nvar LUMIKeys;\n\n(function (_LUMIKeys) {\n  // https://github.com/juce-framework/JUCE/blob/master/modules/juce_blocks_basics/protocol/juce_BitPackingUtilities.h\n  // static const uint8 roliSysexHeader[] = { 0xf0, 0x00, 0x21, 0x10, 0x77 };\n  var ROLI_MANUFACTURER_ID = [0x00, 0x21, 0x10];\n  var inputs = [];\n  var outputs = [];\n  var logOutput = null; // The DEVICE_ID might be different!\n  // We should allow the user of this page to customize the device ID.\n  // Maybe 0x37 was the kickstarter version of LUMI? How do we query the device ID?\n  // 0x00    => Works 100% for ronyeh's LUMI.\n  // 0x07    => Works 100% for ronyeh's LUMI.\n  // 0x37    => Works for benob's LUMI, but NOT for ronyeh's LUMI.\n  //\n  // This might have something to do with topology.\n  // See: https://github.com/juce-framework/JUCE/blob/master/modules/juce_blocks_basics/protocol/juce_BitPackingUtilities.h#L34\n  //\n  // When LUMI Keys responds with a SysEx, the deviceID (or topology ID?) is 47.\n  //\n  // let deviceID = 0x07;\n\n  var deviceID = 0x00;\n\n  function setDeviceID(devID) {\n    deviceID = devID;\n  }\n\n  function isLUMIKeys(io) {\n    return io.manufacturer.toUpperCase().startsWith(\"ROLI\") && io.name.toUpperCase().startsWith(\"LUMI\");\n  }\n\n  function messageMatches(msgData, msgString) {\n    return getDataAsHexString(msgData) === msgString;\n  } // Return MIDI data as an uppercase string of hex numbers, space delimited.\n  // We do not include the prefix 0x.\n  // Example:\n  //     \"F0 00 21 10 77 47 00 00 00 00 00 04 00 00 2C F7\"\n\n\n  function getDataAsHexString(msgData) {\n    if (!msgData || msgData.length === 0) {\n      return \"\";\n    }\n\n    var hexStrings = [];\n\n    var _iterator = _createForOfIteratorHelper(msgData),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _byte = _step.value;\n        hexStrings.push(_byte.toString(16).padStart(2, \"0\").toUpperCase());\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return hexStrings.join(\" \");\n  }\n\n  function logMessageAsHex(msgData) {\n    logOutput(getDataAsHexString(msgData));\n  }\n\n  function logMessageAsUTF8(msgData) {\n    var dataString = new TextDecoder(\"utf-8\").decode(msgData);\n    logOutput(dataString);\n  }\n\n  function connect() {\n    var _iterator2 = _createForOfIteratorHelper(webmidi__WEBPACK_IMPORTED_MODULE_0___default.a.inputs),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var i = _step2.value;\n\n        if (isLUMIKeys(i)) {\n          inputs.push(i);\n          i.addListener(\"midimessage\", \"all\", function (e) {\n            logMessageAsHex(e.data); // logMessageAsUTF8(e.data);\n\n            if (messageMatches(e.data, \"F0 00 21 10 77 47 00 00 00 00 00 04 00 00 2C F7\")) {\n              logOutput(\"POWER BUTTON PRESSED\");\n            }\n\n            if (messageMatches(e.data, \"F0 00 21 10 77 47 00 00 00 00 00 04 04 00 38 F7\")) {\n              logOutput(\"OCTAVE DOWN PRESSED\");\n            }\n\n            if (messageMatches(e.data, \"F0 00 21 10 77 47 00 00 00 00 00 04 08 00 44 F7\")) {\n              logOutput(\"OCTAVE UP PRESSED\");\n            }\n          });\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var _iterator3 = _createForOfIteratorHelper(webmidi__WEBPACK_IMPORTED_MODULE_0___default.a.outputs),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var o = _step3.value;\n\n        if (isLUMIKeys(o)) {\n          logOutput(\"Found LUMI Keys with output port ID: \" + o.id);\n          outputs.push(o);\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  _LUMIKeys.connect = connect;\n\n  function sendSysExToAllDevices(sysexCMD) {\n    var _iterator4 = _createForOfIteratorHelper(outputs),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var output = _step4.value;\n        output.sendSysex(ROLI_MANUFACTURER_ID, sysexCMD);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  } // Convert to hex for console.log()\n  // console.log(num.toString(16));\n\n\n  function sendCommandToAllDevices(command) {\n    var header = [0x77, deviceID];\n    var commandWithHeader = header.concat(command);\n    var checksum = createChecksum(command);\n    var commandWithHeaderAndCheckSum = commandWithHeader.concat(checksum);\n    console.log(\"sendCommandToAllDevices: \".concat(header, \" -- \").concat(command, \" -- \").concat(checksum));\n    sendSysExToAllDevices(commandWithHeaderAndCheckSum);\n  }\n\n  function createChecksum(values) {\n    var sum = values.length;\n\n    for (var i = 0; i < values.length; i++) {\n      sum = sum * 3 + values[i] & 0xff;\n    }\n\n    return sum & 0x7f;\n  }\n\n  function getClickHandler_SetScaleRoot(rootNote) {\n    return function () {\n      var command = [0x10, 0x30];\n\n      switch (rootNote) {\n        case \"C\":\n        default:\n          command.push.apply(command, [0x03, 0x00]);\n          break;\n\n        case \"C#/Db\":\n          command.push.apply(command, [0x23, 0x00]);\n          break;\n\n        case \"D\":\n          command.push.apply(command, [0x43, 0x00]);\n          break;\n\n        case \"D#/Eb\":\n          command.push.apply(command, [0x63, 0x00]);\n          break;\n\n        case \"E\":\n          command.push.apply(command, [0x03, 0x01]);\n          break;\n\n        case \"F\":\n          command.push.apply(command, [0x23, 0x01]);\n          break;\n\n        case \"F#/Gb\":\n          command.push.apply(command, [0x43, 0x01]);\n          break;\n\n        case \"G\":\n          command.push.apply(command, [0x63, 0x01]);\n          break;\n\n        case \"G#/Ab\":\n          command.push.apply(command, [0x03, 0x02]);\n          break;\n\n        case \"A\":\n          command.push.apply(command, [0x23, 0x02]);\n          break;\n\n        case \"A#/Bb\":\n          command.push.apply(command, [0x43, 0x02]);\n          break;\n\n        case \"B\":\n          command.push.apply(command, [0x63, 0x02]);\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetScaleRoot = getClickHandler_SetScaleRoot;\n\n  function getClickHandler_SetBrightness(brightnessValue) {\n    return function () {\n      console.log(\"Set Brightness Level to \" + brightnessValue + \"%\");\n      var command = [0x10, 0x40];\n\n      switch (brightnessValue) {\n        case 0:\n          command.push.apply(command, [0x04, 0x00]);\n          break;\n\n        case 1:\n          command.push.apply(command, [0x24, 0x00]);\n          break;\n\n        case 10:\n          command.push.apply(command, [0x44, 0x02]);\n          break;\n\n        case 20:\n          command.push.apply(command, [0x04, 0x05]);\n          break;\n\n        case 25:\n          command.push.apply(command, [0x24, 0x06]);\n          break;\n\n        case 50:\n          command.push.apply(command, [0x44, 0x0c]);\n          break;\n\n        case 75:\n          command.push.apply(command, [0x64, 0x12]);\n          break;\n\n        case 100:\n        default:\n          command.push.apply(command, [0x04, 0x19]);\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetBrightness = getClickHandler_SetBrightness;\n\n  function getClickHandler_ResetToFactorySettings() {\n    return function () {\n      logOutput(\"Factory Reset!\"); // ROLI Dashboard sends the following:\n      // F0 00 21 10 77 07 11 14 F7\n      // F0 00 21 10 49 F7\n      // F0 00 21 10 78 3F F7\n      // F0 00 21 10 78 3F F7\n\n      sendCommandToAllDevices([0x11]); // See: https://github.com/juce-framework/JUCE/blob/master/modules/juce_blocks_basics/protocol/juce_BlocksProtocolDefinitions.h\n      // constexpr uint8 resetMaster[6] = { 0xf0, 0x00, 0x21, 0x10, 0x49, 0xf7 };\n\n      sendSysExToAllDevices([0x49]); // Who knows what this does?\n\n      sendSysExToAllDevices([0x78, 0x3f]);\n      sendSysExToAllDevices([0x78, 0x3f]);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_ResetToFactorySettings = getClickHandler_ResetToFactorySettings;\n\n  function getClickHandler_SwitchToMode(modeNumber) {\n    return function () {\n      logOutput(\"Switch to Mode \" + modeNumber);\n      var command = [0x10, 0x40];\n\n      switch (modeNumber) {\n        case 1:\n        default:\n          command.push(0x02); // Activate Mode 1\n\n          break;\n\n        case 2:\n          command.push(0x22); // Activate Mode 2\n\n          break;\n\n        case 3:\n          command.push(0x42); // Activate Mode 3\n\n          break;\n\n        case 4:\n          command.push(0x62); // Activate Mode 4\n\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SwitchToMode = getClickHandler_SwitchToMode;\n\n  function getClickHandler_SetColorMode(modeNumber, modeType) {\n    return function () {\n      logOutput(\"Set color of mode: \" + modeNumber + \" to \" + modeType);\n      var command = [0x10];\n\n      switch (modeType) {\n        case \"pro\":\n          switch (modeNumber) {\n            case 1:\n            default:\n              command.push.apply(command, [0x40, 0x0c, 0x00]); // Mode 1 => pro\n\n              break;\n\n            case 2:\n              command.push.apply(command, [0x30, 0x0d, 0x00]); // Mode 2 => pro\n\n              break;\n\n            case 3:\n              command.push.apply(command, [0x20, 0x0e, 0x00]); // Mode 3 => pro\n\n              break;\n\n            case 4:\n              command.push.apply(command, [0x10, 0x0f, 0x00]); // Mode 4 => pro\n\n              break;\n          }\n\n          break;\n\n        case \"user\":\n          switch (modeNumber) {\n            case 1:\n            default:\n              command.push.apply(command, [0x40, 0x2c, 0x00]); // Mode 1\n\n              break;\n\n            case 2:\n              command.push.apply(command, [0x30, 0x2d, 0x00]); // Mode 2\n\n              break;\n\n            case 3:\n              command.push.apply(command, [0x20, 0x2e, 0x00]); // Mode 3\n\n              break;\n\n            case 4:\n              command.push.apply(command, [0x10, 0x2f, 0x00]); // Mode 4\n\n              break;\n          }\n\n          break;\n\n        case \"piano\":\n          switch (modeNumber) {\n            case 1:\n            default:\n              command.push.apply(command, [0x40, 0x4c, 0x00]); // Mode 1\n\n              break;\n\n            case 2:\n              command.push.apply(command, [0x30, 0x4d, 0x00]); // Mode 2\n\n              break;\n\n            case 3:\n              command.push.apply(command, [0x20, 0x4e, 0x00]); // Mode 3\n\n              break;\n\n            case 4:\n              command.push.apply(command, [0x10, 0x4f, 0x00]); // Mode 4\n\n              break;\n          }\n\n          break;\n\n        case \"stage\":\n          switch (modeNumber) {\n            case 1:\n            default:\n              command.push.apply(command, [0x40, 0x6c, 0x00]); // Mode 1\n\n              break;\n\n            case 2:\n              command.push.apply(command, [0x30, 0x6d, 0x00]); // Mode 2\n\n              break;\n\n            case 3:\n              command.push.apply(command, [0x20, 0x6e, 0x00]); // Mode 3\n\n              break;\n\n            case 4:\n              command.push.apply(command, [0x10, 0x6f, 0x00]); // Mode 4\n\n              break;\n          }\n\n          break;\n\n        case \"rainbow\":\n        default:\n          switch (modeNumber) {\n            case 1:\n            default:\n              command.push.apply(command, [0x40, 0x0c, 0x01]); // Mode 1\n\n              break;\n\n            case 2:\n              command.push.apply(command, [0x30, 0x0d, 0x01]); // Mode 2\n\n              break;\n\n            case 3:\n              command.push.apply(command, [0x20, 0x0e, 0x01]); // Mode 3\n\n              break;\n\n            case 4:\n              command.push.apply(command, [0x10, 0x0f, 0x01]); // Mode 4\n\n              break;\n          }\n\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetColorMode = getClickHandler_SetColorMode;\n\n  function getClickHandler_SetScaleType(rootNote) {\n    return function () {\n      var command = [0x10, 0x60];\n\n      switch (rootNote) {\n        case \"chromatic\":\n          command.push.apply(command, [0x42, 0x04]); // chromatic\n\n          break;\n\n        case \"major\":\n        default:\n          command.push.apply(command, [0x02, 0x00]); // major\n\n          break;\n\n        case \"minor\":\n          command.push.apply(command, [0x22, 0x00]); // minor\n\n          break;\n\n        case \"neutral-pentatonic\":\n          command.push.apply(command, [0x62, 0x00]); // neutral pentatonic\n\n          break;\n\n        case \"major-pentatonic\":\n          command.push.apply(command, [0x02, 0x01]); // major pentatonic\n\n          break;\n\n        case \"minor-pentatonic\":\n          command.push.apply(command, [0x22, 0x01]); // minor pentatonic\n\n          break;\n\n        case \"blues\":\n          command.push.apply(command, [0x42, 0x01]); // blues\n\n          break;\n\n        case \"harmonic-minor\":\n          command.push.apply(command, [0x42, 0x00]); // harmonic minor\n\n          break;\n\n        case \"dorian\":\n          command.push.apply(command, [0x62, 0x01]); // dorian\n\n          break;\n\n        case \"phrygian\":\n          command.push.apply(command, [0x02, 0x02]); // phrygian\n\n          break;\n\n        case \"lydian\":\n          command.push.apply(command, [0x22, 0x02]); // lydian\n\n          break;\n\n        case \"mixolydian\":\n          command.push.apply(command, [0x42, 0x02]); // mixolydian\n\n          break;\n\n        case \"locrian\":\n          command.push.apply(command, [0x62, 0x02]); // locrian\n\n          break;\n\n        case \"whole-tone\":\n          command.push.apply(command, [0x02, 0x03]); // whole tone\n\n          break;\n\n        case \"arabic-a\":\n          command.push.apply(command, [0x22, 0x02]); // arabic (a)\n\n          break;\n\n        case \"arabic-b\":\n          command.push.apply(command, [0x42, 0x03]); // arabic (b)\n\n          break;\n\n        case \"japanese\":\n          command.push.apply(command, [0x62, 0x03]); // japanese\n\n          break;\n\n        case \"ryukyu\":\n          command.push.apply(command, [0x02, 0x04]); // ryukyu\n\n          break;\n\n        case \"8-tone-spanish\":\n          command.push.apply(command, [0x22, 0x04]); // 8-tone spanish\n\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetScaleType = getClickHandler_SetScaleType;\n\n  function getClickHandler_GetSerialNumber() {\n    return function () {\n      sendSysExToAllDevices([0x78, 0x3f]);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_GetSerialNumber = getClickHandler_GetSerialNumber;\n\n  function getClickHandler_Highlight(noteName) {\n    return function () {\n      console.log(\"Highlight \" + noteName);\n\n      var _iterator5 = _createForOfIteratorHelper(outputs),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var output = _step5.value;\n          output.playNote(noteName, \"all\", {\n            duration: 1200\n            /* ms */\n\n          });\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    };\n  }\n\n  _LUMIKeys.getClickHandler_Highlight = getClickHandler_Highlight;\n\n  function getClickHandler_SetColorGlobalKey(color, red, green, blue) {\n    return function () {\n      setColorGlobalKey(color, red, green, blue);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetColorGlobalKey = getClickHandler_SetColorGlobalKey;\n\n  function setColorGlobalKey(color, red, green, blue) {\n    var command = [0x10, 0x20];\n\n    switch (color) {\n      case \"rgb\":\n        var v1 = (blue & 0x3) << 5 | 0x4;\n        var v2 = blue >> 2 & 0x3f | green & 1;\n        var v3 = green >> 1;\n        var v4 = red & 0x7f;\n        var v5 = red >> 7 | 0x7e;\n        command.push.apply(command, [v1, v2, v3, v4, v5]);\n        break;\n\n      case \"blue\":\n        command.push.apply(command, [0x64, 0x3f, 0x00, 0x00, 0x7e]); // blue\n\n        break;\n\n      case \"green\":\n        command.push.apply(command, [0x04, 0x40, 0x7f, 0x00, 0x7e]); // green\n\n        break;\n\n      case \"red\":\n        command.push.apply(command, [0x04, 0x00, 0x00, 0x7f, 0x7f]); // red\n\n        break;\n\n      case \"yellow\":\n        command.push.apply(command, [0x04, 0x40, 0x7f, 0x7f, 0x7f]); // yellow\n\n        break;\n\n      case \"magenta\":\n        command.push.apply(command, [0x64, 0x3f, 0x00, 0x7f, 0x7f]); // magenta\n\n        break;\n\n      case \"cyan\":\n        command.push.apply(command, [0x64, 0x7f, 0x7f, 0x00, 0x7e]); // cyan\n\n        break;\n\n      case \"black\":\n        command.push.apply(command, [0x04, 0x00, 0x00, 0x00, 0x7e]); // black\n\n        break;\n\n      case \"white\":\n      default:\n        command.push.apply(command, [0x64, 0x7f, 0x7f, 0x7f, 0x7f]); // white\n\n        break;\n    }\n\n    command.push(0x03);\n    sendCommandToAllDevices(command);\n  }\n\n  _LUMIKeys.setColorGlobalKey = setColorGlobalKey;\n\n  function getClickHandler_SetColorRootKey(color, red, green, blue) {\n    return function () {\n      setColorRootKey(color, red, green, blue);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetColorRootKey = getClickHandler_SetColorRootKey;\n\n  function setColorRootKey(color, red, green, blue) {\n    var command = [0x10, 0x30];\n\n    switch (color) {\n      case \"rgb\":\n        var v1 = (blue & 0x3) << 5 | 0x4;\n        var v2 = blue >> 2 & 0x3f | green & 1;\n        var v3 = green >> 1;\n        var v4 = red & 0x7f;\n        var v5 = red >> 7 | 0x7e;\n        command.push.apply(command, [v1, v2, v3, v4, v5]);\n        break;\n\n      case \"blue\":\n        command.push.apply(command, [0x64, 0x3f, 0x00, 0x00, 0x7e]); // blue\n\n        break;\n\n      case \"green\":\n        command.push.apply(command, [0x04, 0x40, 0x7f, 0x00, 0x7e]); // green\n\n        break;\n\n      case \"red\":\n        command.push.apply(command, [0x04, 0x00, 0x00, 0x7f, 0x7f]); // red\n\n        break;\n\n      case \"yellow\":\n        command.push.apply(command, [0x04, 0x40, 0x7f, 0x7f, 0x7f]); // yellow\n\n        break;\n\n      case \"magenta\":\n        command.push.apply(command, [0x64, 0x3f, 0x00, 0x7f, 0x7f]); // magenta\n\n        break;\n\n      case \"cyan\":\n        command.push.apply(command, [0x64, 0x7f, 0x7f, 0x00, 0x7e]); // cyan\n\n        break;\n\n      case \"black\":\n        command.push.apply(command, [0x04, 0x00, 0x00, 0x00, 0x7e]); // black\n\n        break;\n\n      case \"white\":\n      default:\n        command.push.apply(command, [0x64, 0x7f, 0x7f, 0x7f, 0x7f]); // white\n\n        break;\n    }\n\n    command.push(0x03);\n    sendCommandToAllDevices(command);\n  }\n\n  _LUMIKeys.setColorRootKey = setColorRootKey;\n\n  function getClickHandler_SetOctave(octaveNumber) {\n    return function () {\n      console.log(\"Set Octave Offset to \" + octaveNumber);\n      var command = [0x10, 0x40];\n\n      switch (octaveNumber) {\n        case 0:\n        default:\n          command.push.apply(command, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case 1:\n          command.push.apply(command, [0x20, 0x00, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case 2:\n          command.push.apply(command, [0x40, 0x00, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case 3:\n          command.push.apply(command, [0x60, 0x00, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case 4:\n          command.push.apply(command, [0x00, 0x01, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case 5:\n          command.push.apply(command, [0x20, 0x01, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case -1:\n          command.push.apply(command, [0x60, 0x7f, 0x7f, 0x7f, 0x7f, 0x03]);\n          break;\n\n        case -2:\n          command.push.apply(command, [0x40, 0x7f, 0x7f, 0x7f, 0x7f, 0x03]);\n          break;\n\n        case -3:\n          command.push.apply(command, [0x20, 0x7f, 0x7f, 0x7f, 0x7f, 0x03]);\n          break;\n\n        case -4:\n          command.push.apply(command, [0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x03]);\n          break;\n      }\n\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetOctave = getClickHandler_SetOctave;\n\n  function getClickHandler_PitchBend(modeNumber, enableFlag) {\n    return function () {\n      console.log(\"Set Pitch Bend for Mode \" + modeNumber + \" to \" + enableFlag);\n      var command = [0x10];\n\n      switch (modeNumber) {\n        case 1:\n        default:\n          if (enableFlag) {\n            command.push.apply(command, [0x60, 0x2c]); // Mode 1 Pitch Bend ON\n          } else {\n            command.push.apply(command, [0x60, 0x0c]); // Mode 1 Pitch Bend OFF\n          }\n\n          break;\n\n        case 2:\n          if (enableFlag) {\n            command.push.apply(command, [0x50, 0x2d]); // Mode 1 Pitch Bend ON\n          } else {\n            command.push.apply(command, [0x50, 0x0d]); // Mode 1 Pitch Bend OFF\n          }\n\n          break;\n\n        case 3:\n          if (enableFlag) {\n            command.push.apply(command, [0x40, 0x2e]); // Mode 1 Pitch Bend ON\n          } else {\n            command.push.apply(command, [0x40, 0x0e]); // Mode 1 Pitch Bend OFF\n          }\n\n          break;\n\n        case 4:\n          if (enableFlag) {\n            command.push.apply(command, [0x30, 0x2f]); // Mode 1 Pitch Bend ON\n          } else {\n            command.push.apply(command, [0x30, 0x0f]); // Mode 1 Pitch Bend OFF\n          }\n\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_PitchBend = getClickHandler_PitchBend;\n\n  function getClickHandler_PingDevice() {\n    return function () {\n      var command = [0x01, 0x03, 0x00];\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_PingDevice = getClickHandler_PingDevice;\n\n  function runCommand_001() {\n    setTimeout(function () {\n      // Highlight G ... D\n      // The below works ONLY WHEN ROLI STUDIO IS THE FRONT APP ON MACOS.\n      // Thus, we add a 5 second delay after clicking this button so we have time to switch apps! :-}\n      sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x70, 0x09, 0x00, 0x00, 0x00, 0x7e, 0x7f, 0x7f, 0x0f, 0x00]);\n      sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x60, 0x0a, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n      sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x70, 0x09, 0x00, 0x00, 0x00, 0x7e, 0x7f, 0x7f, 0x0f, 0x00]);\n      sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x60, 0x0a, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n    }, 5000);\n    /*\n        setTimeout(() => {\n            // Highlight C E G ... F\n            // The below works ONLY WHEN ROLI STUDIO IS THE FRONT APP ON MACOS.\n            // Thus, we add a 5 second delay after clicking this button so we have time to switch apps! :-}\n            sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x7e, 0x7f, 0x7f, 0x0f, 0x00]);\n            sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x40, 0x09, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n            sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x70, 0x09, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n            sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x10, 0x0b, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n            sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x7e, 0x7f, 0x7f, 0x0f, 0x00]);\n            sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x40, 0x09, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n            sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x70, 0x09, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n            sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x10, 0x0b, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n        }, 5000);\n        */\n  }\n\n  _LUMIKeys.runCommand_001 = runCommand_001;\n\n  function runCommand_002() {\n    console.log(\"runCommand_002\"); // const command = [0x77, 0x00, 0x01, 0x01, 0x00, 0x5d];\n    // ?? LUMI responds with: f000 2110 7747 0000 0000 1010 2000 0066 2521 221c 5a61 6b60 5c5a 6525 651b 6a03 4c61 4121 4c6b 4c2b 0c60 6121 0000 74f7\n\n    var command = [0x77, 0x07, 0x10, 0x02, 0x44]; // ?? LUMI responds with 7 messages!!!\n\n    /*\n        ROLI 97 bytes\tF0 00 21 10 77 47 00 00 00 00 00 13 31 48 40 00 00 00 00 00 00 00 00 00 02 00 00 00 00 43 06 40…\n        ROLI 95 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 50 00 00 00 00 00 00 00 00 00 08 00 00 00 00 18 24 01 10 00…\n        ROLI 95 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 1E 00 00 00 00 00 00 00 00 00 08 00 00 00 00 18 04 62 1F 00…\n        ROLI 95 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 44 00 00 70 7F 3F 00 00 00 00 7C 7F 7F 7F 3F 18 34 64 3F 00…\n        ROLI 95 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 48 05 00 00 00 00 00 00 00 00 20 00 00 00 00 18 64 2C 00 00…\n        ROLI 95 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 5C 05 00 00 00 00 00 00 00 00 08 00 00 00 00 18 24 4E 00 00…\n        ROLI 46 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 76 05 00 00 00 00 00 00 00 00 08 00 00 00 00 18 44 0F 00 00 00 00 00 00 00 00 40 00  00 00 00 00 5B F7\n    */\n\n    sendSysExToAllDevices(command);\n  }\n\n  _LUMIKeys.runCommand_002 = runCommand_002;\n\n  function attachLogOutput(logHandler) {\n    logOutput = logHandler;\n  }\n\n  _LUMIKeys.attachLogOutput = attachLogOutput;\n\n  function startFakeDevice() {// Send out SysEx messages to fake out ROLI Connect / Dashboard / Studio???\n    // #TODO: Is this possible????\n    // THIS PROBABLY WON'T WORK WITHOUT A NATIVE MACOS APP THAT PRETENDS TO BE A LUMI KEYS.\n    // sendSysExToAllDevices([ ... ]);\n    // setInterval(() => {\n    //     sendSysExToAllDevices([0x77, 0x47, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x6d]); // Acknowledge the PING\n    // }, 400);\n  }\n\n  _LUMIKeys.startFakeDevice = startFakeDevice;\n})(LUMIKeys || (LUMIKeys = {}));\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (LUMIKeys);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwcy9zaGFyZWQvbWlkaS9MVU1JS2V5cy50cz8yOTNlIl0sIm5hbWVzIjpbIlJPTElfTUFOVUZBQ1RVUkVSX0lEIiwiaW5wdXRzIiwib3V0cHV0cyIsImxvZ091dHB1dCIsImRldmljZUlEIiwic2V0RGV2aWNlSUQiLCJkZXZJRCIsImlzTFVNSUtleXMiLCJpbyIsIm1hbnVmYWN0dXJlciIsInRvVXBwZXJDYXNlIiwic3RhcnRzV2l0aCIsIm5hbWUiLCJtZXNzYWdlTWF0Y2hlcyIsIm1zZ0RhdGEiLCJtc2dTdHJpbmciLCJnZXREYXRhQXNIZXhTdHJpbmciLCJsZW5ndGgiLCJoZXhTdHJpbmdzIiwiYnl0ZSIsInB1c2giLCJ0b1N0cmluZyIsInBhZFN0YXJ0Iiwiam9pbiIsImxvZ01lc3NhZ2VBc0hleCIsImxvZ01lc3NhZ2VBc1VURjgiLCJkYXRhU3RyaW5nIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJjb25uZWN0IiwiV2ViTWlkaSIsImkiLCJhZGRMaXN0ZW5lciIsImUiLCJkYXRhIiwibyIsImlkIiwic2VuZFN5c0V4VG9BbGxEZXZpY2VzIiwic3lzZXhDTUQiLCJvdXRwdXQiLCJzZW5kU3lzZXgiLCJzZW5kQ29tbWFuZFRvQWxsRGV2aWNlcyIsImNvbW1hbmQiLCJoZWFkZXIiLCJjb21tYW5kV2l0aEhlYWRlciIsImNvbmNhdCIsImNoZWNrc3VtIiwiY3JlYXRlQ2hlY2tzdW0iLCJjb21tYW5kV2l0aEhlYWRlckFuZENoZWNrU3VtIiwiY29uc29sZSIsImxvZyIsInZhbHVlcyIsInN1bSIsImdldENsaWNrSGFuZGxlcl9TZXRTY2FsZVJvb3QiLCJyb290Tm90ZSIsImdldENsaWNrSGFuZGxlcl9TZXRCcmlnaHRuZXNzIiwiYnJpZ2h0bmVzc1ZhbHVlIiwiZ2V0Q2xpY2tIYW5kbGVyX1Jlc2V0VG9GYWN0b3J5U2V0dGluZ3MiLCJnZXRDbGlja0hhbmRsZXJfU3dpdGNoVG9Nb2RlIiwibW9kZU51bWJlciIsImdldENsaWNrSGFuZGxlcl9TZXRDb2xvck1vZGUiLCJtb2RlVHlwZSIsImdldENsaWNrSGFuZGxlcl9TZXRTY2FsZVR5cGUiLCJnZXRDbGlja0hhbmRsZXJfR2V0U2VyaWFsTnVtYmVyIiwiZ2V0Q2xpY2tIYW5kbGVyX0hpZ2hsaWdodCIsIm5vdGVOYW1lIiwicGxheU5vdGUiLCJkdXJhdGlvbiIsImdldENsaWNrSGFuZGxlcl9TZXRDb2xvckdsb2JhbEtleSIsImNvbG9yIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwic2V0Q29sb3JHbG9iYWxLZXkiLCJ2MSIsInYyIiwidjMiLCJ2NCIsInY1IiwiZ2V0Q2xpY2tIYW5kbGVyX1NldENvbG9yUm9vdEtleSIsInNldENvbG9yUm9vdEtleSIsImdldENsaWNrSGFuZGxlcl9TZXRPY3RhdmUiLCJvY3RhdmVOdW1iZXIiLCJnZXRDbGlja0hhbmRsZXJfUGl0Y2hCZW5kIiwiZW5hYmxlRmxhZyIsImdldENsaWNrSGFuZGxlcl9QaW5nRGV2aWNlIiwicnVuQ29tbWFuZF8wMDEiLCJzZXRUaW1lb3V0IiwicnVuQ29tbWFuZF8wMDIiLCJhdHRhY2hMb2dPdXRwdXQiLCJsb2dIYW5kbGVyIiwic3RhcnRGYWtlRGV2aWNlIiwiTFVNSUtleXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztDQUVBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUVJO0FBQ0E7QUFDQSxNQUFNQSxvQkFBb0IsR0FBRyxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixDQUE3QjtBQUVBLE1BQUlDLE1BQWUsR0FBRyxFQUF0QjtBQUNBLE1BQUlDLE9BQWlCLEdBQUcsRUFBeEI7QUFFQSxNQUFJQyxTQUFnQyxHQUFHLElBQXZDLEMsQ0FFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFJQyxRQUFRLEdBQUcsSUFBZjs7QUFDQSxXQUFTQyxXQUFULENBQXFCQyxLQUFyQixFQUE0QjtBQUN4QkYsWUFBUSxHQUFHRSxLQUFYO0FBQ0g7O0FBRUQsV0FBU0MsVUFBVCxDQUFvQkMsRUFBcEIsRUFBd0M7QUFDcEMsV0FBT0EsRUFBRSxDQUFDQyxZQUFILENBQWdCQyxXQUFoQixHQUE4QkMsVUFBOUIsQ0FBeUMsTUFBekMsS0FBb0RILEVBQUUsQ0FBQ0ksSUFBSCxDQUFRRixXQUFSLEdBQXNCQyxVQUF0QixDQUFpQyxNQUFqQyxDQUEzRDtBQUNIOztBQUVELFdBQVNFLGNBQVQsQ0FBd0JDLE9BQXhCLEVBQTZDQyxTQUE3QyxFQUFnRTtBQUM1RCxXQUFPQyxrQkFBa0IsQ0FBQ0YsT0FBRCxDQUFsQixLQUFnQ0MsU0FBdkM7QUFDSCxHLENBRUQ7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFdBQVNDLGtCQUFULENBQTRCRixPQUE1QixFQUFpRDtBQUM3QyxRQUFJLENBQUNBLE9BQUQsSUFBWUEsT0FBTyxDQUFDRyxNQUFSLEtBQW1CLENBQW5DLEVBQXNDO0FBQ2xDLGFBQU8sRUFBUDtBQUNIOztBQUVELFFBQUlDLFVBQVUsR0FBRyxFQUFqQjs7QUFMNkMsK0NBTTFCSixPQU4wQjtBQUFBOztBQUFBO0FBTTdDLDBEQUE0QjtBQUFBLFlBQWpCSyxLQUFpQjtBQUN4QkQsa0JBQVUsQ0FBQ0UsSUFBWCxDQUFnQkQsS0FBSSxDQUFDRSxRQUFMLENBQWMsRUFBZCxFQUFrQkMsUUFBbEIsQ0FBMkIsQ0FBM0IsRUFBOEIsR0FBOUIsRUFBbUNaLFdBQW5DLEVBQWhCO0FBQ0g7QUFSNEM7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFTN0MsV0FBT1EsVUFBVSxDQUFDSyxJQUFYLENBQWdCLEdBQWhCLENBQVA7QUFDSDs7QUFFRCxXQUFTQyxlQUFULENBQXlCVixPQUF6QixFQUE4QztBQUMxQ1gsYUFBUyxDQUFDYSxrQkFBa0IsQ0FBQ0YsT0FBRCxDQUFuQixDQUFUO0FBQ0g7O0FBRUQsV0FBU1csZ0JBQVQsQ0FBMEJYLE9BQTFCLEVBQStDO0FBQzNDLFFBQU1ZLFVBQVUsR0FBRyxJQUFJQyxXQUFKLENBQWdCLE9BQWhCLEVBQXlCQyxNQUF6QixDQUFnQ2QsT0FBaEMsQ0FBbkI7QUFDQVgsYUFBUyxDQUFDdUIsVUFBRCxDQUFUO0FBQ0g7O0FBRU0sV0FBU0csT0FBVCxHQUFtQjtBQUFBLGdEQUNOQyw4Q0FBTyxDQUFDN0IsTUFERjtBQUFBOztBQUFBO0FBQ3RCLDZEQUFnQztBQUFBLFlBQXJCOEIsQ0FBcUI7O0FBQzVCLFlBQUl4QixVQUFVLENBQUN3QixDQUFELENBQWQsRUFBbUI7QUFDZjlCLGdCQUFNLENBQUNtQixJQUFQLENBQVlXLENBQVo7QUFFQUEsV0FBQyxDQUFDQyxXQUFGLENBQWMsYUFBZCxFQUE2QixLQUE3QixFQUFvQyxVQUFVQyxDQUFWLEVBQWE7QUFDN0NULDJCQUFlLENBQUNTLENBQUMsQ0FBQ0MsSUFBSCxDQUFmLENBRDZDLENBRTdDOztBQUVBLGdCQUFJckIsY0FBYyxDQUFDb0IsQ0FBQyxDQUFDQyxJQUFILEVBQVMsaURBQVQsQ0FBbEIsRUFBK0U7QUFDM0UvQix1QkFBUyxDQUFDLHNCQUFELENBQVQ7QUFDSDs7QUFDRCxnQkFBSVUsY0FBYyxDQUFDb0IsQ0FBQyxDQUFDQyxJQUFILEVBQVMsaURBQVQsQ0FBbEIsRUFBK0U7QUFDM0UvQix1QkFBUyxDQUFDLHFCQUFELENBQVQ7QUFDSDs7QUFDRCxnQkFBSVUsY0FBYyxDQUFDb0IsQ0FBQyxDQUFDQyxJQUFILEVBQVMsaURBQVQsQ0FBbEIsRUFBK0U7QUFDM0UvQix1QkFBUyxDQUFDLG1CQUFELENBQVQ7QUFDSDtBQUNKLFdBYkQ7QUFjSDtBQUNKO0FBcEJxQjtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLGdEQXNCTjJCLDhDQUFPLENBQUM1QixPQXRCRjtBQUFBOztBQUFBO0FBc0J0Qiw2REFBaUM7QUFBQSxZQUF0QmlDLENBQXNCOztBQUM3QixZQUFJNUIsVUFBVSxDQUFDNEIsQ0FBRCxDQUFkLEVBQW1CO0FBQ2ZoQyxtQkFBUyxDQUFDLDBDQUEwQ2dDLENBQUMsQ0FBQ0MsRUFBN0MsQ0FBVDtBQUNBbEMsaUJBQU8sQ0FBQ2tCLElBQVIsQ0FBYWUsQ0FBYjtBQUNIO0FBQ0o7QUEzQnFCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUE0QnpCOzs7O0FBRUQsV0FBU0UscUJBQVQsQ0FBK0JDLFFBQS9CLEVBQXlDO0FBQUEsZ0RBQ2hCcEMsT0FEZ0I7QUFBQTs7QUFBQTtBQUNyQyw2REFBOEI7QUFBQSxZQUFuQnFDLE1BQW1CO0FBQzFCQSxjQUFNLENBQUNDLFNBQVAsQ0FBaUJ4QyxvQkFBakIsRUFBdUNzQyxRQUF2QztBQUNIO0FBSG9DO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFJeEMsRyxDQUVEO0FBQ0E7OztBQUNBLFdBQVNHLHVCQUFULENBQWlDQyxPQUFqQyxFQUEwQztBQUN0QyxRQUFNQyxNQUFNLEdBQUcsQ0FBQyxJQUFELEVBQU92QyxRQUFQLENBQWY7QUFDQSxRQUFNd0MsaUJBQWlCLEdBQUdELE1BQU0sQ0FBQ0UsTUFBUCxDQUFjSCxPQUFkLENBQTFCO0FBQ0EsUUFBTUksUUFBUSxHQUFHQyxjQUFjLENBQUNMLE9BQUQsQ0FBL0I7QUFDQSxRQUFNTSw0QkFBNEIsR0FBR0osaUJBQWlCLENBQUNDLE1BQWxCLENBQXlCQyxRQUF6QixDQUFyQztBQUNBRyxXQUFPLENBQUNDLEdBQVIsb0NBQXdDUCxNQUF4QyxpQkFBcURELE9BQXJELGlCQUFtRUksUUFBbkU7QUFDQVQseUJBQXFCLENBQUNXLDRCQUFELENBQXJCO0FBQ0g7O0FBRUQsV0FBU0QsY0FBVCxDQUF3QkksTUFBeEIsRUFBZ0M7QUFDNUIsUUFBSUMsR0FBRyxHQUFHRCxNQUFNLENBQUNsQyxNQUFqQjs7QUFDQSxTQUFLLElBQUljLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdvQixNQUFNLENBQUNsQyxNQUEzQixFQUFtQ2MsQ0FBQyxFQUFwQyxFQUF3QztBQUNwQ3FCLFNBQUcsR0FBSUEsR0FBRyxHQUFHLENBQU4sR0FBVUQsTUFBTSxDQUFDcEIsQ0FBRCxDQUFqQixHQUF3QixJQUE5QjtBQUNIOztBQUNELFdBQU9xQixHQUFHLEdBQUcsSUFBYjtBQUNIOztBQUVNLFdBQVNDLDRCQUFULENBQXNDQyxRQUF0QyxFQUFnRDtBQUNuRCxXQUFPLFlBQU07QUFDVCxVQUFNWixPQUFPLEdBQUcsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUFoQjs7QUFDQSxjQUFRWSxRQUFSO0FBQ0ksYUFBSyxHQUFMO0FBQ0E7QUFDSVosaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUDtBQUNBOztBQUNKLGFBQUssT0FBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQO0FBQ0E7O0FBQ0osYUFBSyxHQUFMO0FBQ0lBLGlCQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUFULENBQVA7QUFDQTs7QUFDSixhQUFLLE9BQUw7QUFDSUEsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUDtBQUNBOztBQUNKLGFBQUssR0FBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQO0FBQ0E7O0FBQ0osYUFBSyxHQUFMO0FBQ0lBLGlCQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUFULENBQVA7QUFDQTs7QUFDSixhQUFLLE9BQUw7QUFDSUEsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUDtBQUNBOztBQUNKLGFBQUssR0FBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQO0FBQ0E7O0FBQ0osYUFBSyxPQUFMO0FBQ0lBLGlCQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUFULENBQVA7QUFDQTs7QUFDSixhQUFLLEdBQUw7QUFDSUEsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUDtBQUNBOztBQUNKLGFBQUssT0FBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQO0FBQ0E7O0FBQ0osYUFBSyxHQUFMO0FBQ0lBLGlCQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUFULENBQVA7QUFDQTtBQXJDUjs7QUF1Q0FBLGFBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixDQUFULENBQVA7QUFDQUQsNkJBQXVCLENBQUNDLE9BQUQsQ0FBdkI7QUFDSCxLQTNDRDtBQTRDSDs7OztBQUVNLFdBQVNhLDZCQUFULENBQXVDQyxlQUF2QyxFQUFnRTtBQUNuRSxXQUFPLFlBQU07QUFDVFAsYUFBTyxDQUFDQyxHQUFSLENBQVksNkJBQTZCTSxlQUE3QixHQUErQyxHQUEzRDtBQUNBLFVBQU1kLE9BQU8sR0FBRyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQWhCOztBQUNBLGNBQVFjLGVBQVI7QUFDSSxhQUFLLENBQUw7QUFDSWQsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUDtBQUNBOztBQUNKLGFBQUssQ0FBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQO0FBQ0E7O0FBQ0osYUFBSyxFQUFMO0FBQ0lBLGlCQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUFULENBQVA7QUFDQTs7QUFDSixhQUFLLEVBQUw7QUFDSUEsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUDtBQUNBOztBQUNKLGFBQUssRUFBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQO0FBQ0E7O0FBQ0osYUFBSyxFQUFMO0FBQ0lBLGlCQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUFULENBQVA7QUFDQTs7QUFDSixhQUFLLEVBQUw7QUFDSUEsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUDtBQUNBOztBQUNKLGFBQUssR0FBTDtBQUNBO0FBQ0lBLGlCQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUFULENBQVA7QUFDQTtBQXpCUjs7QUEyQkFBLGFBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixDQUFULENBQVA7QUFDQUQsNkJBQXVCLENBQUNDLE9BQUQsQ0FBdkI7QUFDSCxLQWhDRDtBQWlDSDs7OztBQUVNLFdBQVNlLHNDQUFULEdBQWtEO0FBQ3JELFdBQU8sWUFBTTtBQUNUdEQsZUFBUyxDQUFDLGdCQUFELENBQVQsQ0FEUyxDQUdUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFzQyw2QkFBdUIsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUF2QixDQVRTLENBV1Q7QUFDQTs7QUFDQUosMkJBQXFCLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBckIsQ0FiUyxDQWVUOztBQUNBQSwyQkFBcUIsQ0FBQyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQUQsQ0FBckI7QUFDQUEsMkJBQXFCLENBQUMsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUFELENBQXJCO0FBQ0gsS0FsQkQ7QUFtQkg7Ozs7QUFFTSxXQUFTcUIsNEJBQVQsQ0FBc0NDLFVBQXRDLEVBQWtEO0FBQ3JELFdBQU8sWUFBTTtBQUNUeEQsZUFBUyxDQUFDLG9CQUFvQndELFVBQXJCLENBQVQ7QUFDQSxVQUFNakIsT0FBTyxHQUFHLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBaEI7O0FBQ0EsY0FBUWlCLFVBQVI7QUFDSSxhQUFLLENBQUw7QUFDQTtBQUNJakIsaUJBQU8sQ0FBQ3RCLElBQVIsQ0FBYSxJQUFiLEVBREosQ0FDd0I7O0FBQ3BCOztBQUNKLGFBQUssQ0FBTDtBQUNJc0IsaUJBQU8sQ0FBQ3RCLElBQVIsQ0FBYSxJQUFiLEVBREosQ0FDd0I7O0FBQ3BCOztBQUNKLGFBQUssQ0FBTDtBQUNJc0IsaUJBQU8sQ0FBQ3RCLElBQVIsQ0FBYSxJQUFiLEVBREosQ0FDd0I7O0FBQ3BCOztBQUNKLGFBQUssQ0FBTDtBQUNJc0IsaUJBQU8sQ0FBQ3RCLElBQVIsQ0FBYSxJQUFiLEVBREosQ0FDd0I7O0FBQ3BCO0FBYlI7O0FBZUFzQixhQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsRUFBbUIsSUFBbkIsRUFBeUIsSUFBekIsQ0FBVCxDQUFQO0FBQ0FELDZCQUF1QixDQUFDQyxPQUFELENBQXZCO0FBQ0gsS0FwQkQ7QUFxQkg7Ozs7QUFZTSxXQUFTa0IsNEJBQVQsQ0FBc0NELFVBQXRDLEVBQWtERSxRQUFsRCxFQUE0RDtBQUMvRCxXQUFPLFlBQU07QUFDVDFELGVBQVMsQ0FBQyx3QkFBd0J3RCxVQUF4QixHQUFxQyxNQUFyQyxHQUE4Q0UsUUFBL0MsQ0FBVDtBQUNBLFVBQU1uQixPQUFPLEdBQUcsQ0FBQyxJQUFELENBQWhCOztBQUNBLGNBQVFtQixRQUFSO0FBQ0ksYUFBSyxLQUFMO0FBQ0ksa0JBQVFGLFVBQVI7QUFDSSxpQkFBSyxDQUFMO0FBQ0E7QUFDSWpCLHFCQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsQ0FBVCxDQUFQLENBREosQ0FDeUM7O0FBQ3JDOztBQUNKLGlCQUFLLENBQUw7QUFDSUEscUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixDQUFULENBQVAsQ0FESixDQUN5Qzs7QUFDckM7O0FBQ0osaUJBQUssQ0FBTDtBQUNJQSxxQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLENBQVQsQ0FBUCxDQURKLENBQ3lDOztBQUNyQzs7QUFDSixpQkFBSyxDQUFMO0FBQ0lBLHFCQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsQ0FBVCxDQUFQLENBREosQ0FDeUM7O0FBQ3JDO0FBYlI7O0FBZUE7O0FBQ0osYUFBSyxNQUFMO0FBQ0ksa0JBQVFpQixVQUFSO0FBQ0ksaUJBQUssQ0FBTDtBQUNBO0FBQ0lqQixxQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLENBQVQsQ0FBUCxDQURKLENBQ3lDOztBQUNyQzs7QUFDSixpQkFBSyxDQUFMO0FBQ0lBLHFCQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsQ0FBVCxDQUFQLENBREosQ0FDeUM7O0FBQ3JDOztBQUNKLGlCQUFLLENBQUw7QUFDSUEscUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixDQUFULENBQVAsQ0FESixDQUN5Qzs7QUFDckM7O0FBQ0osaUJBQUssQ0FBTDtBQUNJQSxxQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLENBQVQsQ0FBUCxDQURKLENBQ3lDOztBQUNyQztBQWJSOztBQWVBOztBQUNKLGFBQUssT0FBTDtBQUNJLGtCQUFRaUIsVUFBUjtBQUNJLGlCQUFLLENBQUw7QUFDQTtBQUNJakIscUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixDQUFULENBQVAsQ0FESixDQUN5Qzs7QUFDckM7O0FBQ0osaUJBQUssQ0FBTDtBQUNJQSxxQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLENBQVQsQ0FBUCxDQURKLENBQ3lDOztBQUNyQzs7QUFDSixpQkFBSyxDQUFMO0FBQ0lBLHFCQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsQ0FBVCxDQUFQLENBREosQ0FDeUM7O0FBQ3JDOztBQUNKLGlCQUFLLENBQUw7QUFDSUEscUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixDQUFULENBQVAsQ0FESixDQUN5Qzs7QUFDckM7QUFiUjs7QUFlQTs7QUFDSixhQUFLLE9BQUw7QUFDSSxrQkFBUWlCLFVBQVI7QUFDSSxpQkFBSyxDQUFMO0FBQ0E7QUFDSWpCLHFCQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsQ0FBVCxDQUFQLENBREosQ0FDeUM7O0FBQ3JDOztBQUNKLGlCQUFLLENBQUw7QUFDSUEscUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixDQUFULENBQVAsQ0FESixDQUN5Qzs7QUFDckM7O0FBQ0osaUJBQUssQ0FBTDtBQUNJQSxxQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLENBQVQsQ0FBUCxDQURKLENBQ3lDOztBQUNyQzs7QUFDSixpQkFBSyxDQUFMO0FBQ0lBLHFCQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsQ0FBVCxDQUFQLENBREosQ0FDeUM7O0FBQ3JDO0FBYlI7O0FBZUE7O0FBQ0osYUFBSyxTQUFMO0FBQ0E7QUFDSSxrQkFBUWlCLFVBQVI7QUFDSSxpQkFBSyxDQUFMO0FBQ0E7QUFDSWpCLHFCQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsQ0FBVCxDQUFQLENBREosQ0FDeUM7O0FBQ3JDOztBQUNKLGlCQUFLLENBQUw7QUFDSUEscUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixDQUFULENBQVAsQ0FESixDQUN5Qzs7QUFDckM7O0FBQ0osaUJBQUssQ0FBTDtBQUNJQSxxQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLENBQVQsQ0FBUCxDQURKLENBQ3lDOztBQUNyQzs7QUFDSixpQkFBSyxDQUFMO0FBQ0lBLHFCQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsQ0FBVCxDQUFQLENBREosQ0FDeUM7O0FBQ3JDO0FBYlI7O0FBZUE7QUF0RlI7O0FBd0ZBQSxhQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsRUFBbUIsSUFBbkIsQ0FBVCxDQUFQO0FBQ0FELDZCQUF1QixDQUFDQyxPQUFELENBQXZCO0FBQ0gsS0E3RkQ7QUE4Rkg7Ozs7QUFFTSxXQUFTb0IsNEJBQVQsQ0FBc0NSLFFBQXRDLEVBQWdEO0FBQ25ELFdBQU8sWUFBTTtBQUNULFVBQU1aLE9BQU8sR0FBRyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQWhCOztBQUNBLGNBQVFZLFFBQVI7QUFDSSxhQUFLLFdBQUw7QUFDSVosaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUCxDQURKLENBQ21DOztBQUMvQjs7QUFDSixhQUFLLE9BQUw7QUFDQTtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQLENBREosQ0FDbUM7O0FBQy9COztBQUNKLGFBQUssT0FBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQLENBREosQ0FDbUM7O0FBQy9COztBQUNKLGFBQUssb0JBQUw7QUFDSUEsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUCxDQURKLENBQ21DOztBQUMvQjs7QUFDSixhQUFLLGtCQUFMO0FBQ0lBLGlCQUFPLENBQUN0QixJQUFSLE9BQUFzQixPQUFPLEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUFULENBQVAsQ0FESixDQUNtQzs7QUFDL0I7O0FBQ0osYUFBSyxrQkFBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQLENBREosQ0FDbUM7O0FBQy9COztBQUNKLGFBQUssT0FBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQLENBREosQ0FDbUM7O0FBQy9COztBQUNKLGFBQUssZ0JBQUw7QUFDSUEsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUCxDQURKLENBQ21DOztBQUMvQjs7QUFDSixhQUFLLFFBQUw7QUFDSUEsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUCxDQURKLENBQ21DOztBQUMvQjs7QUFDSixhQUFLLFVBQUw7QUFDSUEsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUCxDQURKLENBQ21DOztBQUMvQjs7QUFDSixhQUFLLFFBQUw7QUFDSUEsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUCxDQURKLENBQ21DOztBQUMvQjs7QUFDSixhQUFLLFlBQUw7QUFDSUEsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUCxDQURKLENBQ21DOztBQUMvQjs7QUFDSixhQUFLLFNBQUw7QUFDSUEsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUCxDQURKLENBQ21DOztBQUMvQjs7QUFDSixhQUFLLFlBQUw7QUFDSUEsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUCxDQURKLENBQ21DOztBQUMvQjs7QUFDSixhQUFLLFVBQUw7QUFDSUEsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUCxDQURKLENBQ21DOztBQUMvQjs7QUFDSixhQUFLLFVBQUw7QUFDSUEsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQsQ0FBUCxDQURKLENBQ21DOztBQUMvQjs7QUFDSixhQUFLLFVBQUw7QUFDSUEsaUJBQU8sQ0FBQ3RCLElBQVIsT0FBQXNCLE9BQU8sRUFBUyxDQUFDLElBQUQsRUFBTyxJ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QUFDSDs7O0dBaHVCS0MsUSxLQUFBQSxROztBQW11QktBLHVFQUFmIiwiZmlsZSI6Ii4vYXBwcy9zaGFyZWQvbWlkaS9MVU1JS2V5cy50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBXZWJNaWRpLCB7IElucHV0LCBPdXRwdXQgfSBmcm9tIFwid2VibWlkaVwiO1xuXG4vLyBUaGlzIGFwcHJvYWNoIHdhcyBpbmZvcm1lZCBieTpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5vYi9MVU1JLWxpZ2h0cy9ibG9iL21hc3Rlci9TWVNFWC50eHRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XZUFyZVJPTEkvcm9saV9ibG9ja3NfYmFzaWNzL2Jsb2IvbWFpbi9ibG9ja3Mvcm9saV9CbG9ja0NvbmZpZ0lkLmhcbi8vIE5vdGU6IFlvdSBjYW4gZHJhZyAqLmxpdHRsZWZvb3QgcHJvZ3JhbXMgaW50byB0aGUgUk9MSSBEYXNoYm9hcmQgdG8gY3VzdG9taXplIHRoZSBwcm9ncmFtIHJ1bm5pbmcgb24gdGhlIExVTUkgS2V5cy5cbm5hbWVzcGFjZSBMVU1JS2V5cyB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2p1Y2UtZnJhbWV3b3JrL0pVQ0UvYmxvYi9tYXN0ZXIvbW9kdWxlcy9qdWNlX2Jsb2Nrc19iYXNpY3MvcHJvdG9jb2wvanVjZV9CaXRQYWNraW5nVXRpbGl0aWVzLmhcbiAgICAvLyBzdGF0aWMgY29uc3QgdWludDggcm9saVN5c2V4SGVhZGVyW10gPSB7IDB4ZjAsIDB4MDAsIDB4MjEsIDB4MTAsIDB4NzcgfTtcbiAgICBjb25zdCBST0xJX01BTlVGQUNUVVJFUl9JRCA9IFsweDAwLCAweDIxLCAweDEwXTtcblxuICAgIGxldCBpbnB1dHM6IElucHV0W10gPSBbXTtcbiAgICBsZXQgb3V0cHV0czogT3V0cHV0W10gPSBbXTtcblxuICAgIGxldCBsb2dPdXRwdXQ6IChtc2c6IHN0cmluZykgPT4gdm9pZCA9IG51bGw7XG5cbiAgICAvLyBUaGUgREVWSUNFX0lEIG1pZ2h0IGJlIGRpZmZlcmVudCFcbiAgICAvLyBXZSBzaG91bGQgYWxsb3cgdGhlIHVzZXIgb2YgdGhpcyBwYWdlIHRvIGN1c3RvbWl6ZSB0aGUgZGV2aWNlIElELlxuICAgIC8vIE1heWJlIDB4Mzcgd2FzIHRoZSBraWNrc3RhcnRlciB2ZXJzaW9uIG9mIExVTUk/IEhvdyBkbyB3ZSBxdWVyeSB0aGUgZGV2aWNlIElEP1xuICAgIC8vIDB4MDAgICAgPT4gV29ya3MgMTAwJSBmb3Igcm9ueWVoJ3MgTFVNSS5cbiAgICAvLyAweDA3ICAgID0+IFdvcmtzIDEwMCUgZm9yIHJvbnllaCdzIExVTUkuXG4gICAgLy8gMHgzNyAgICA9PiBXb3JrcyBmb3IgYmVub2IncyBMVU1JLCBidXQgTk9UIGZvciByb255ZWgncyBMVU1JLlxuICAgIC8vXG4gICAgLy8gVGhpcyBtaWdodCBoYXZlIHNvbWV0aGluZyB0byBkbyB3aXRoIHRvcG9sb2d5LlxuICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2p1Y2UtZnJhbWV3b3JrL0pVQ0UvYmxvYi9tYXN0ZXIvbW9kdWxlcy9qdWNlX2Jsb2Nrc19iYXNpY3MvcHJvdG9jb2wvanVjZV9CaXRQYWNraW5nVXRpbGl0aWVzLmgjTDM0XG4gICAgLy9cbiAgICAvLyBXaGVuIExVTUkgS2V5cyByZXNwb25kcyB3aXRoIGEgU3lzRXgsIHRoZSBkZXZpY2VJRCAob3IgdG9wb2xvZ3kgSUQ/KSBpcyA0Ny5cbiAgICAvL1xuICAgIC8vIGxldCBkZXZpY2VJRCA9IDB4MDc7XG4gICAgbGV0IGRldmljZUlEID0gMHgwMDtcbiAgICBmdW5jdGlvbiBzZXREZXZpY2VJRChkZXZJRCkge1xuICAgICAgICBkZXZpY2VJRCA9IGRldklEO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTFVNSUtleXMoaW86IElucHV0IHwgT3V0cHV0KSB7XG4gICAgICAgIHJldHVybiBpby5tYW51ZmFjdHVyZXIudG9VcHBlckNhc2UoKS5zdGFydHNXaXRoKFwiUk9MSVwiKSAmJiBpby5uYW1lLnRvVXBwZXJDYXNlKCkuc3RhcnRzV2l0aChcIkxVTUlcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVzc2FnZU1hdGNoZXMobXNnRGF0YTogVWludDhBcnJheSwgbXNnU3RyaW5nOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGdldERhdGFBc0hleFN0cmluZyhtc2dEYXRhKSA9PT0gbXNnU3RyaW5nO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBNSURJIGRhdGEgYXMgYW4gdXBwZXJjYXNlIHN0cmluZyBvZiBoZXggbnVtYmVycywgc3BhY2UgZGVsaW1pdGVkLlxuICAgIC8vIFdlIGRvIG5vdCBpbmNsdWRlIHRoZSBwcmVmaXggMHguXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvLyAgICAgXCJGMCAwMCAyMSAxMCA3NyA0NyAwMCAwMCAwMCAwMCAwMCAwNCAwMCAwMCAyQyBGN1wiXG4gICAgZnVuY3Rpb24gZ2V0RGF0YUFzSGV4U3RyaW5nKG1zZ0RhdGE6IFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgaWYgKCFtc2dEYXRhIHx8IG1zZ0RhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZXhTdHJpbmdzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgYnl0ZSBvZiBtc2dEYXRhKSB7XG4gICAgICAgICAgICBoZXhTdHJpbmdzLnB1c2goYnl0ZS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpLnRvVXBwZXJDYXNlKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoZXhTdHJpbmdzLmpvaW4oXCIgXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvZ01lc3NhZ2VBc0hleChtc2dEYXRhOiBVaW50OEFycmF5KSB7XG4gICAgICAgIGxvZ091dHB1dChnZXREYXRhQXNIZXhTdHJpbmcobXNnRGF0YSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvZ01lc3NhZ2VBc1VURjgobXNnRGF0YTogVWludDhBcnJheSkge1xuICAgICAgICBjb25zdCBkYXRhU3RyaW5nID0gbmV3IFRleHREZWNvZGVyKFwidXRmLThcIikuZGVjb2RlKG1zZ0RhdGEpO1xuICAgICAgICBsb2dPdXRwdXQoZGF0YVN0cmluZyk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG4gICAgICAgIGZvciAoY29uc3QgaSBvZiBXZWJNaWRpLmlucHV0cykge1xuICAgICAgICAgICAgaWYgKGlzTFVNSUtleXMoaSkpIHtcbiAgICAgICAgICAgICAgICBpbnB1dHMucHVzaChpKTtcblxuICAgICAgICAgICAgICAgIGkuYWRkTGlzdGVuZXIoXCJtaWRpbWVzc2FnZVwiLCBcImFsbFwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dNZXNzYWdlQXNIZXgoZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9nTWVzc2FnZUFzVVRGOChlLmRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlTWF0Y2hlcyhlLmRhdGEsIFwiRjAgMDAgMjEgMTAgNzcgNDcgMDAgMDAgMDAgMDAgMDAgMDQgMDAgMDAgMkMgRjdcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ091dHB1dChcIlBPV0VSIEJVVFRPTiBQUkVTU0VEXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlTWF0Y2hlcyhlLmRhdGEsIFwiRjAgMDAgMjEgMTAgNzcgNDcgMDAgMDAgMDAgMDAgMDAgMDQgMDQgMDAgMzggRjdcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ091dHB1dChcIk9DVEFWRSBET1dOIFBSRVNTRURcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VNYXRjaGVzKGUuZGF0YSwgXCJGMCAwMCAyMSAxMCA3NyA0NyAwMCAwMCAwMCAwMCAwMCAwNCAwOCAwMCA0NCBGN1wiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nT3V0cHV0KFwiT0NUQVZFIFVQIFBSRVNTRURcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgbyBvZiBXZWJNaWRpLm91dHB1dHMpIHtcbiAgICAgICAgICAgIGlmIChpc0xVTUlLZXlzKG8pKSB7XG4gICAgICAgICAgICAgICAgbG9nT3V0cHV0KFwiRm91bmQgTFVNSSBLZXlzIHdpdGggb3V0cHV0IHBvcnQgSUQ6IFwiICsgby5pZCk7XG4gICAgICAgICAgICAgICAgb3V0cHV0cy5wdXNoKG8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VuZFN5c0V4VG9BbGxEZXZpY2VzKHN5c2V4Q01EKSB7XG4gICAgICAgIGZvciAoY29uc3Qgb3V0cHV0IG9mIG91dHB1dHMpIHtcbiAgICAgICAgICAgIG91dHB1dC5zZW5kU3lzZXgoUk9MSV9NQU5VRkFDVFVSRVJfSUQsIHN5c2V4Q01EKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvbnZlcnQgdG8gaGV4IGZvciBjb25zb2xlLmxvZygpXG4gICAgLy8gY29uc29sZS5sb2cobnVtLnRvU3RyaW5nKDE2KSk7XG4gICAgZnVuY3Rpb24gc2VuZENvbW1hbmRUb0FsbERldmljZXMoY29tbWFuZCkge1xuICAgICAgICBjb25zdCBoZWFkZXIgPSBbMHg3NywgZGV2aWNlSURdO1xuICAgICAgICBjb25zdCBjb21tYW5kV2l0aEhlYWRlciA9IGhlYWRlci5jb25jYXQoY29tbWFuZCk7XG4gICAgICAgIGNvbnN0IGNoZWNrc3VtID0gY3JlYXRlQ2hlY2tzdW0oY29tbWFuZCk7XG4gICAgICAgIGNvbnN0IGNvbW1hbmRXaXRoSGVhZGVyQW5kQ2hlY2tTdW0gPSBjb21tYW5kV2l0aEhlYWRlci5jb25jYXQoY2hlY2tzdW0pO1xuICAgICAgICBjb25zb2xlLmxvZyhgc2VuZENvbW1hbmRUb0FsbERldmljZXM6ICR7aGVhZGVyfSAtLSAke2NvbW1hbmR9IC0tICR7Y2hlY2tzdW19YCk7XG4gICAgICAgIHNlbmRTeXNFeFRvQWxsRGV2aWNlcyhjb21tYW5kV2l0aEhlYWRlckFuZENoZWNrU3VtKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVDaGVja3N1bSh2YWx1ZXMpIHtcbiAgICAgICAgbGV0IHN1bSA9IHZhbHVlcy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzdW0gPSAoc3VtICogMyArIHZhbHVlc1tpXSkgJiAweGZmO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdW0gJiAweDdmO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRDbGlja0hhbmRsZXJfU2V0U2NhbGVSb290KHJvb3ROb3RlKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb21tYW5kID0gWzB4MTAsIDB4MzBdO1xuICAgICAgICAgICAgc3dpdGNoIChyb290Tm90ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJDXCI6XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDAzLCAweDAwXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJDIy9EYlwiOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MjMsIDB4MDBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIkRcIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDQzLCAweDAwXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJEIy9FYlwiOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NjMsIDB4MDBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIkVcIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDAzLCAweDAxXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJGXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgyMywgMHgwMV0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiRiMvR2JcIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDQzLCAweDAxXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJHXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg2MywgMHgwMV0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiRyMvQWJcIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDAzLCAweDAyXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJBXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgyMywgMHgwMl0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiQSMvQmJcIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDQzLCAweDAyXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJCXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg2MywgMHgwMl0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoY29tbWFuZCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldENsaWNrSGFuZGxlcl9TZXRCcmlnaHRuZXNzKGJyaWdodG5lc3NWYWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNldCBCcmlnaHRuZXNzIExldmVsIHRvIFwiICsgYnJpZ2h0bmVzc1ZhbHVlICsgXCIlXCIpO1xuICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IFsweDEwLCAweDQwXTtcbiAgICAgICAgICAgIHN3aXRjaCAoYnJpZ2h0bmVzc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDQsIDB4MDBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MjQsIDB4MDBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDQ0LCAweDAyXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjA6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwNCwgMHgwNV0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI1OlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MjQsIDB4MDZdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1MDpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDQ0LCAweDBjXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNzU6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg2NCwgMHgxMl0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDQsIDB4MTldKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdKTtcbiAgICAgICAgICAgIHNlbmRDb21tYW5kVG9BbGxEZXZpY2VzKGNvbW1hbmQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRDbGlja0hhbmRsZXJfUmVzZXRUb0ZhY3RvcnlTZXR0aW5ncygpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGxvZ091dHB1dChcIkZhY3RvcnkgUmVzZXQhXCIpO1xuXG4gICAgICAgICAgICAvLyBST0xJIERhc2hib2FyZCBzZW5kcyB0aGUgZm9sbG93aW5nOlxuICAgICAgICAgICAgLy8gRjAgMDAgMjEgMTAgNzcgMDcgMTEgMTQgRjdcbiAgICAgICAgICAgIC8vIEYwIDAwIDIxIDEwIDQ5IEY3XG4gICAgICAgICAgICAvLyBGMCAwMCAyMSAxMCA3OCAzRiBGN1xuICAgICAgICAgICAgLy8gRjAgMDAgMjEgMTAgNzggM0YgRjdcblxuICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoWzB4MTFdKTtcblxuICAgICAgICAgICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vanVjZS1mcmFtZXdvcmsvSlVDRS9ibG9iL21hc3Rlci9tb2R1bGVzL2p1Y2VfYmxvY2tzX2Jhc2ljcy9wcm90b2NvbC9qdWNlX0Jsb2Nrc1Byb3RvY29sRGVmaW5pdGlvbnMuaFxuICAgICAgICAgICAgLy8gY29uc3RleHByIHVpbnQ4IHJlc2V0TWFzdGVyWzZdID0geyAweGYwLCAweDAwLCAweDIxLCAweDEwLCAweDQ5LCAweGY3IH07XG4gICAgICAgICAgICBzZW5kU3lzRXhUb0FsbERldmljZXMoWzB4NDldKTtcblxuICAgICAgICAgICAgLy8gV2hvIGtub3dzIHdoYXQgdGhpcyBkb2VzP1xuICAgICAgICAgICAgc2VuZFN5c0V4VG9BbGxEZXZpY2VzKFsweDc4LCAweDNmXSk7XG4gICAgICAgICAgICBzZW5kU3lzRXhUb0FsbERldmljZXMoWzB4NzgsIDB4M2ZdKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gZ2V0Q2xpY2tIYW5kbGVyX1N3aXRjaFRvTW9kZShtb2RlTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBsb2dPdXRwdXQoXCJTd2l0Y2ggdG8gTW9kZSBcIiArIG1vZGVOdW1iZXIpO1xuICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IFsweDEwLCAweDQwXTtcbiAgICAgICAgICAgIHN3aXRjaCAobW9kZU51bWJlcikge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goMHgwMik7IC8vIEFjdGl2YXRlIE1vZGUgMVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCgweDIyKTsgLy8gQWN0aXZhdGUgTW9kZSAyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKDB4NDIpOyAvLyBBY3RpdmF0ZSBNb2RlIDNcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goMHg2Mik7IC8vIEFjdGl2YXRlIE1vZGUgNFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoY29tbWFuZCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gUFJPXG4gICAgLy8gMTAgNDAgMEMgMDAgMDAgMDAgMDAgMDAgNUMgRjdcbiAgICAvLyBVU0VSXG4gICAgLy8gMTAgNDAgMkMgMDAgMDAgMDAgMDAgMDAgM0MgRjdcbiAgICAvLyBQSUFOT1xuICAgIC8vIDEwIDQwIDRDIDAwIDAwIDAwIDAwIDAwIDFDIEY3XG4gICAgLy8gU1RBR0VcbiAgICAvLyAxMCA0MCA2QyAwMCAwMCAwMCAwMCAwMCA3QyBGN1xuICAgIC8vIFJBSU5CT1dcbiAgICAvLyAxMCA0MCAwQyAwMSAwMCAwMCAwMCAwMCAyRCBGN1xuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRDbGlja0hhbmRsZXJfU2V0Q29sb3JNb2RlKG1vZGVOdW1iZXIsIG1vZGVUeXBlKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBsb2dPdXRwdXQoXCJTZXQgY29sb3Igb2YgbW9kZTogXCIgKyBtb2RlTnVtYmVyICsgXCIgdG8gXCIgKyBtb2RlVHlwZSk7XG4gICAgICAgICAgICBjb25zdCBjb21tYW5kID0gWzB4MTBdO1xuICAgICAgICAgICAgc3dpdGNoIChtb2RlVHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJwcm9cIjpcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChtb2RlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg0MCwgMHgwYywgMHgwMF0pOyAvLyBNb2RlIDEgPT4gcHJvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDMwLCAweDBkLCAweDAwXSk7IC8vIE1vZGUgMiA9PiBwcm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MjAsIDB4MGUsIDB4MDBdKTsgLy8gTW9kZSAzID0+IHByb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgxMCwgMHgwZiwgMHgwMF0pOyAvLyBNb2RlIDQgPT4gcHJvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInVzZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChtb2RlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg0MCwgMHgyYywgMHgwMF0pOyAvLyBNb2RlIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MzAsIDB4MmQsIDB4MDBdKTsgLy8gTW9kZSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDIwLCAweDJlLCAweDAwXSk7IC8vIE1vZGUgM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgxMCwgMHgyZiwgMHgwMF0pOyAvLyBNb2RlIDRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwicGlhbm9cIjpcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChtb2RlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg0MCwgMHg0YywgMHgwMF0pOyAvLyBNb2RlIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MzAsIDB4NGQsIDB4MDBdKTsgLy8gTW9kZSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDIwLCAweDRlLCAweDAwXSk7IC8vIE1vZGUgM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgxMCwgMHg0ZiwgMHgwMF0pOyAvLyBNb2RlIDRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwic3RhZ2VcIjpcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChtb2RlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg0MCwgMHg2YywgMHgwMF0pOyAvLyBNb2RlIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MzAsIDB4NmQsIDB4MDBdKTsgLy8gTW9kZSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDIwLCAweDZlLCAweDAwXSk7IC8vIE1vZGUgM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgxMCwgMHg2ZiwgMHgwMF0pOyAvLyBNb2RlIDRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwicmFpbmJvd1wiOlxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobW9kZU51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NDAsIDB4MGMsIDB4MDFdKTsgLy8gTW9kZSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDMwLCAweDBkLCAweDAxXSk7IC8vIE1vZGUgMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgyMCwgMHgwZSwgMHgwMV0pOyAvLyBNb2RlIDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MTAsIDB4MGYsIDB4MDFdKTsgLy8gTW9kZSA0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdKTtcbiAgICAgICAgICAgIHNlbmRDb21tYW5kVG9BbGxEZXZpY2VzKGNvbW1hbmQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRDbGlja0hhbmRsZXJfU2V0U2NhbGVUeXBlKHJvb3ROb3RlKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb21tYW5kID0gWzB4MTAsIDB4NjBdO1xuICAgICAgICAgICAgc3dpdGNoIChyb290Tm90ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJjaHJvbWF0aWNcIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDQyLCAweDA0XSk7IC8vIGNocm9tYXRpY1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibWFqb3JcIjpcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDIsIDB4MDBdKTsgLy8gbWFqb3JcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1pbm9yXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgyMiwgMHgwMF0pOyAvLyBtaW5vclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibmV1dHJhbC1wZW50YXRvbmljXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg2MiwgMHgwMF0pOyAvLyBuZXV0cmFsIHBlbnRhdG9uaWNcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1ham9yLXBlbnRhdG9uaWNcIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDAyLCAweDAxXSk7IC8vIG1ham9yIHBlbnRhdG9uaWNcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1pbm9yLXBlbnRhdG9uaWNcIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDIyLCAweDAxXSk7IC8vIG1pbm9yIHBlbnRhdG9uaWNcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImJsdWVzXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg0MiwgMHgwMV0pOyAvLyBibHVlc1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiaGFybW9uaWMtbWlub3JcIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDQyLCAweDAwXSk7IC8vIGhhcm1vbmljIG1pbm9yXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJkb3JpYW5cIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDYyLCAweDAxXSk7IC8vIGRvcmlhblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwicGhyeWdpYW5cIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDAyLCAweDAyXSk7IC8vIHBocnlnaWFuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJseWRpYW5cIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDIyLCAweDAyXSk7IC8vIGx5ZGlhblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibWl4b2x5ZGlhblwiOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NDIsIDB4MDJdKTsgLy8gbWl4b2x5ZGlhblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibG9jcmlhblwiOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NjIsIDB4MDJdKTsgLy8gbG9jcmlhblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwid2hvbGUtdG9uZVwiOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDIsIDB4MDNdKTsgLy8gd2hvbGUgdG9uZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYXJhYmljLWFcIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDIyLCAweDAyXSk7IC8vIGFyYWJpYyAoYSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImFyYWJpYy1iXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg0MiwgMHgwM10pOyAvLyBhcmFiaWMgKGIpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJqYXBhbmVzZVwiOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NjIsIDB4MDNdKTsgLy8gamFwYW5lc2VcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInJ5dWt5dVwiOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDIsIDB4MDRdKTsgLy8gcnl1a3l1XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCI4LXRvbmUtc3BhbmlzaFwiOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MjIsIDB4MDRdKTsgLy8gOC10b25lIHNwYW5pc2hcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdKTtcbiAgICAgICAgICAgIHNlbmRDb21tYW5kVG9BbGxEZXZpY2VzKGNvbW1hbmQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIFFVRVJZIFNFUklBTCBOVU1CRVIgPT4gTEtCRDg0Q1dBOTVLS0o3VFxuICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2p1Y2UtZnJhbWV3b3JrL0pVQ0UvYmxvYi9tYXN0ZXIvbW9kdWxlcy9qdWNlX2Jsb2Nrc19iYXNpY3MvcHJvdG9jb2wvanVjZV9CbG9ja3NQcm90b2NvbERlZmluaXRpb25zLmgjTDE5N1xuICAgIC8vIGJvb2wgaXNMdW1pS2V5c0Jsb2NrKCkgY29uc3Qgbm9leGNlcHQgICAgICAgeyByZXR1cm4gaGFzUHJlZml4IChcIkxLQlwiKTsgfVxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRDbGlja0hhbmRsZXJfR2V0U2VyaWFsTnVtYmVyKCkge1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc2VuZFN5c0V4VG9BbGxEZXZpY2VzKFsweDc4LCAweDNmXSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gU2VuZHMgYSBOb3RlT24gYW5kIHRoZW4gYSBOb3RlT2ZmIGFmdGVyIDEuMiBzZWNvbmRzLlxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRDbGlja0hhbmRsZXJfSGlnaGxpZ2h0KG5vdGVOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSGlnaGxpZ2h0IFwiICsgbm90ZU5hbWUpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBvdXRwdXQgb2Ygb3V0cHV0cykge1xuICAgICAgICAgICAgICAgIG91dHB1dC5wbGF5Tm90ZShub3RlTmFtZSwgXCJhbGxcIiwgeyBkdXJhdGlvbjogMTIwMCAvKiBtcyAqLyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5vYi9MVU1JLWxpZ2h0cy9ibG9iL21hc3Rlci9TWVNFWC50eHRcbiAgICAvLyBleGFtcGxlcyBvZiBjb2xvciBjaGFuZ2VzXG4gICAgLy8gMTAgMjAgNjQgM0YgMDAgMDAgN0UgMDMgLy8gYmx1ZVxuICAgIC8vIDEwIDIwIDA0IDQwIDdGIDAwIDdFIDAzIC8vIGdyZWVuXG4gICAgLy8gMTAgMjAgMDQgMDAgMDAgN0YgN0YgMDMgLy8gcmVkXG4gICAgLy8gMTAgMjAgMDQgNDAgN0YgN0YgN0YgMDMgLy8geWVsbG93XG4gICAgLy8gMTAgMjAgNjQgM0YgMDAgN0YgN0YgMDMgLy8gbWFnZW50YVxuICAgIC8vIDEwIDIwIDY0IDdGIDdGIDAwIDdFIDAzIC8vIGN5YW5cblxuICAgIC8vIGJpdCBlbmNvZGluZyBvZiBjb2xvcnM6XG4gICAgLy8gMDAxMDAgQkxVRV84X0JJVFMgR1JFRU5fOF9CSVRTIFJFRF84X0JJVFMgMTExMTExXG4gICAgLy8gYmx1ZSAgICAxMTAwMTAwIDAxMTExMTEgMDAwMDAwMCAwMDAwMDAwIDExMTExMTBcbiAgICAvLyBncmVlbiAgIDAwMDAxMDAgMTAwMDAwMCAxMTExMTExIDAwMDAwMDAgMTExMTExMFxuICAgIC8vIHJlZCAgICAgMDAwMDEwMCAwMDAwMDAwIDAwMDAwMDAgMTExMTExMSAxMTExMTExXG4gICAgLy8geWVsbG93ICAwMDAwMTAwIDEwMDAwMDAgMTExMTExMSAxMTExMTExIDExMTExMTFcbiAgICAvLyBtYWdlbnRhIDExMDAxMDAgMDExMTExMSAwMDAwMDAwIDExMTExMTEgMTExMTExMVxuICAgIC8vIGN5YW4gICAgMTEwMDEwMCAxMTExMTExIDExMTExMTEgMDAwMDAwMCAxMTExMTEwXG4gICAgLy8gYmxhY2sgICAwMDAwMTAwIDAwMDAwMDAgMDAwMDAwMCAwMDAwMDAwIDExMTExMTBcbiAgICAvLyB3aGl0ZSAgIDExMDAxMDAgMTExMTExMSAxMTExMTExIDExMTExMTEgMTExMTExMVxuXG4gICAgLypcbiAgICB2MSA9ICgoYiAmIDB4MykgPDwgNSkgfCAweDQsXG4gICAgdjIgPSAoKGIgPj4gMikgJiAweDNmKSB8IChnICYgMSksXG4gICAgdjMgPSBnID4+IDEsXG4gICAgdjQgPSByICYgMHg3ZixcbiAgICB2NSA9IChyID4+IDcpIHwgMHg3ZSxcbiAgICAqL1xuICAgIC8vIFJlbWVtYmVyIGluIHRoZSBNSURJIHdvcmxkIDB4N2YgaXMgdGhlIHNhbWUgYXMgYSByb3cgb2YgYWxsIDFzLlxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRDbGlja0hhbmRsZXJfU2V0Q29sb3JHbG9iYWxLZXkoY29sb3I6IHN0cmluZywgcmVkPzogbnVtYmVyLCBncmVlbj86IG51bWJlciwgYmx1ZT86IG51bWJlcikge1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc2V0Q29sb3JHbG9iYWxLZXkoY29sb3IsIHJlZCwgZ3JlZW4sIGJsdWUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBzZXRDb2xvckdsb2JhbEtleShjb2xvcjogc3RyaW5nLCByZWQ/OiBudW1iZXIsIGdyZWVuPzogbnVtYmVyLCBibHVlPzogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBbMHgxMCwgMHgyMF07XG4gICAgICAgIHN3aXRjaCAoY29sb3IpIHtcbiAgICAgICAgICAgIGNhc2UgXCJyZ2JcIjpcbiAgICAgICAgICAgICAgICBsZXQgdjEgPSAoKGJsdWUgJiAweDMpIDw8IDUpIHwgMHg0O1xuICAgICAgICAgICAgICAgIGxldCB2MiA9ICgoYmx1ZSA+PiAyKSAmIDB4M2YpIHwgKGdyZWVuICYgMSk7XG4gICAgICAgICAgICAgICAgbGV0IHYzID0gZ3JlZW4gPj4gMTtcbiAgICAgICAgICAgICAgICBsZXQgdjQgPSByZWQgJiAweDdmO1xuICAgICAgICAgICAgICAgIGxldCB2NSA9IChyZWQgPj4gNykgfCAweDdlO1xuICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bdjEsIHYyLCB2MywgdjQsIHY1XSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYmx1ZVwiOlxuICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg2NCwgMHgzZiwgMHgwMCwgMHgwMCwgMHg3ZV0pOyAvLyBibHVlXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZ3JlZW5cIjpcbiAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDQsIDB4NDAsIDB4N2YsIDB4MDAsIDB4N2VdKTsgLy8gZ3JlZW5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJyZWRcIjpcbiAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDQsIDB4MDAsIDB4MDAsIDB4N2YsIDB4N2ZdKTsgLy8gcmVkXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwieWVsbG93XCI6XG4gICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDA0LCAweDQwLCAweDdmLCAweDdmLCAweDdmXSk7IC8vIHllbGxvd1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm1hZ2VudGFcIjpcbiAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NjQsIDB4M2YsIDB4MDAsIDB4N2YsIDB4N2ZdKTsgLy8gbWFnZW50YVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImN5YW5cIjpcbiAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NjQsIDB4N2YsIDB4N2YsIDB4MDAsIDB4N2VdKTsgLy8gY3lhblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImJsYWNrXCI6XG4gICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDA0LCAweDAwLCAweDAwLCAweDAwLCAweDdlXSk7IC8vIGJsYWNrXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwid2hpdGVcIjpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDY0LCAweDdmLCAweDdmLCAweDdmLCAweDdmXSk7IC8vIHdoaXRlXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY29tbWFuZC5wdXNoKDB4MDMpO1xuICAgICAgICBzZW5kQ29tbWFuZFRvQWxsRGV2aWNlcyhjb21tYW5kKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gZ2V0Q2xpY2tIYW5kbGVyX1NldENvbG9yUm9vdEtleShjb2xvcjogc3RyaW5nLCByZWQ/OiBudW1iZXIsIGdyZWVuPzogbnVtYmVyLCBibHVlPzogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzZXRDb2xvclJvb3RLZXkoY29sb3IsIHJlZCwgZ3JlZW4sIGJsdWUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBzZXRDb2xvclJvb3RLZXkoY29sb3I6IHN0cmluZywgcmVkPzogbnVtYmVyLCBncmVlbj86IG51bWJlciwgYmx1ZT86IG51bWJlcikge1xuICAgICAgICBsZXQgY29tbWFuZCA9IFsweDEwLCAweDMwXTtcbiAgICAgICAgc3dpdGNoIChjb2xvcikge1xuICAgICAgICAgICAgY2FzZSBcInJnYlwiOlxuICAgICAgICAgICAgICAgIGxldCB2MSA9ICgoYmx1ZSAmIDB4MykgPDwgNSkgfCAweDQ7XG4gICAgICAgICAgICAgICAgbGV0IHYyID0gKChibHVlID4+IDIpICYgMHgzZikgfCAoZ3JlZW4gJiAxKTtcbiAgICAgICAgICAgICAgICBsZXQgdjMgPSBncmVlbiA+PiAxO1xuICAgICAgICAgICAgICAgIGxldCB2NCA9IHJlZCAmIDB4N2Y7XG4gICAgICAgICAgICAgICAgbGV0IHY1ID0gKHJlZCA+PiA3KSB8IDB4N2U7XG4gICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlt2MSwgdjIsIHYzLCB2NCwgdjVdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJibHVlXCI6XG4gICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDY0LCAweDNmLCAweDAwLCAweDAwLCAweDdlXSk7IC8vIGJsdWVcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJncmVlblwiOlxuICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwNCwgMHg0MCwgMHg3ZiwgMHgwMCwgMHg3ZV0pOyAvLyBncmVlblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJlZFwiOlxuICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwNCwgMHgwMCwgMHgwMCwgMHg3ZiwgMHg3Zl0pOyAvLyByZWRcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ5ZWxsb3dcIjpcbiAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDQsIDB4NDAsIDB4N2YsIDB4N2YsIDB4N2ZdKTsgLy8geWVsbG93XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibWFnZW50YVwiOlxuICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg2NCwgMHgzZiwgMHgwMCwgMHg3ZiwgMHg3Zl0pOyAvLyBtYWdlbnRhXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY3lhblwiOlxuICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg2NCwgMHg3ZiwgMHg3ZiwgMHgwMCwgMHg3ZV0pOyAvLyBjeWFuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYmxhY2tcIjpcbiAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDQsIDB4MDAsIDB4MDAsIDB4MDAsIDB4N2VdKTsgLy8gYmxhY2tcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ3aGl0ZVwiOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NjQsIDB4N2YsIDB4N2YsIDB4N2YsIDB4N2ZdKTsgLy8gd2hpdGVcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb21tYW5kLnB1c2goMHgwMyk7XG4gICAgICAgIHNlbmRDb21tYW5kVG9BbGxEZXZpY2VzKGNvbW1hbmQpO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgIE5vdGUgdGhhdCAweDdGIGlzIDAxMTFfMTExMSBpbiBiaW5hcnkuXG4gICAgICAgIE1JREkgU3lzRXggbWVzc2FnZXMgaGF2ZSBhIGJlZ2lubmluZyBzdGF0dXMgYnl0ZSBhbmQgYSBlbmRpbmcgc3RhdHVzIGJ5dGUuXG4gICAgICAgIEluIGJldHdlZW4gdGhlIHR3byBzdGF0dXMgYnl0ZXMsIGFueSBudW1iZXIgb2YgZGF0YSBieXRlcyBtYXkgYmUgc2VudC4gXG4gICAgICAgIFRoZXNlIGRhdGEgYnl0ZXMgYWxsIHJhbmdlIGZyb20gMCB0byAxMjcuIFRoZSBsZWZ0IG1vc3QgYml0IGlzIGFsd2F5cyAwLlxuICAgICAgICBcbiAgICAgICAgMTAgNDAgMDAgN0YgN0YgN0YgN0YgMDMgLy8gLTRcbiAgICAgICAgMTAgNDAgMjAgN0YgN0YgN0YgN0YgMDMgLy8gLTNcbiAgICAgICAgMTAgNDAgNDAgN0YgN0YgN0YgN0YgMDMgLy8gLTJcbiAgICAgICAgMTAgNDAgNjAgN0YgN0YgN0YgN0YgMDMgLy8gLTFcbiAgICAgICAgMTAgNDAgMDAgMDAgMDAgMDAgMDAgMDAgLy8gMFxuICAgICAgICAxMCA0MCAyMCAwMCAwMCAwMCAwMCAwMCAvLyAxXG4gICAgICAgIDEwIDQwIDQwIDAwIDAwIDAwIDAwIDAwIC8vIDJcbiAgICAgICAgMTAgNDAgNjAgMDEgMDAgMDAgMDAgMDAgLy8gM1xuICAgICAgICAxMCA0MCAwMCAwMSAwMCAwMCAwMCAwMCAvLyA0XG4gICAgICAgIDEwIDQwIDIwIDAxIDAwIDAwIDAwIDAwIC8vIDVcbiAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRDbGlja0hhbmRsZXJfU2V0T2N0YXZlKG9jdGF2ZU51bWJlcjogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNldCBPY3RhdmUgT2Zmc2V0IHRvIFwiICsgb2N0YXZlTnVtYmVyKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSBbMHgxMCwgMHg0MF07XG4gICAgICAgICAgICBzd2l0Y2ggKG9jdGF2ZU51bWJlcikge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MjAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NjAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MjAsIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAtMTpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDYwLCAweDdmLCAweDdmLCAweDdmLCAweDdmLCAweDAzXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLTI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg0MCwgMHg3ZiwgMHg3ZiwgMHg3ZiwgMHg3ZiwgMHgwM10pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC0zOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MjAsIDB4N2YsIDB4N2YsIDB4N2YsIDB4N2YsIDB4MDNdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAtNDpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDAwLCAweDdmLCAweDdmLCAweDdmLCAweDdmLCAweDAzXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoY29tbWFuZCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldENsaWNrSGFuZGxlcl9QaXRjaEJlbmQobW9kZU51bWJlciwgZW5hYmxlRmxhZykge1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJTZXQgUGl0Y2ggQmVuZCBmb3IgTW9kZSBcIiArIG1vZGVOdW1iZXIgKyBcIiB0byBcIiArIGVuYWJsZUZsYWcpO1xuICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IFsweDEwXTtcbiAgICAgICAgICAgIHN3aXRjaCAobW9kZU51bWJlcikge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5hYmxlRmxhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDYwLCAweDJjXSk7IC8vIE1vZGUgMSBQaXRjaCBCZW5kIE9OXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NjAsIDB4MGNdKTsgLy8gTW9kZSAxIFBpdGNoIEJlbmQgT0ZGXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5hYmxlRmxhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDUwLCAweDJkXSk7IC8vIE1vZGUgMSBQaXRjaCBCZW5kIE9OXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NTAsIDB4MGRdKTsgLy8gTW9kZSAxIFBpdGNoIEJlbmQgT0ZGXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5hYmxlRmxhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDQwLCAweDJlXSk7IC8vIE1vZGUgMSBQaXRjaCBCZW5kIE9OXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NDAsIDB4MGVdKTsgLy8gTW9kZSAxIFBpdGNoIEJlbmQgT0ZGXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5hYmxlRmxhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDMwLCAweDJmXSk7IC8vIE1vZGUgMSBQaXRjaCBCZW5kIE9OXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MzAsIDB4MGZdKTsgLy8gTW9kZSAxIFBpdGNoIEJlbmQgT0ZGXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdKTtcbiAgICAgICAgICAgIHNlbmRDb21tYW5kVG9BbGxEZXZpY2VzKGNvbW1hbmQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIFJPTEkgRGFzaGJvYXJkIGtlZXBzIHNlbmRpbmcgdGhpcyBtZXNzYWdlIGV2ZXJ5IH40MDBtcy5cbiAgICAvLyBNYXliZSBpdCdzIGp1c3QgYSBwaW5nIHRvIHNlZSB0aGF0IGl0J3Mgc3RpbGwgY29ubmVjdGVkLlxuICAgIC8vIEl0J3MgREVGSU5JVEVMWSBOT1QgQkFUVEVSWSBMRVZFTCwgYmVjYXVzZSBMVU1JIEtleXMgcmVzcG9uZHMgd2l0aCB0aGUgc2FtZSBtZXNzYWdlIGRlc3BpdGUgdmFyeWluZyBiYXR0ZXJ5IGxldmVscy5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qdWNlLWZyYW1ld29yay9KVUNFL2Jsb2IvbWFzdGVyL21vZHVsZXMvanVjZV9ibG9ja3NfYmFzaWNzL3Byb3RvY29sL2p1Y2VfQmxvY2tzUHJvdG9jb2xEZWZpbml0aW9ucy5oXG4gICAgLy9cbiAgICAvLyAgICAgZGV2aWNlQ29tbWFuZE1lc3NhZ2UgICAgPSAweDAxLFxuICAgIC8vICAgICBwaW5nICAgICAgICAgICAgICAgICAgICA9IDB4MDMsXG4gICAgLy9cbiAgICAvLyBMVU1JIHJlc3BvbmRzIDggdGltZXMgd2l0aDpcbiAgICAvLyAgIEYwIDAwIDIxIDEwIDc3IDQ3IDAwIDAwIDAwIDAwIDIwIDAwIDAwIDZEIEY3XG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldENsaWNrSGFuZGxlcl9QaW5nRGV2aWNlKCkge1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IFsweDAxLCAweDAzLCAweDAwXTtcbiAgICAgICAgICAgIHNlbmRDb21tYW5kVG9BbGxEZXZpY2VzKGNvbW1hbmQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBydW5Db21tYW5kXzAwMSgpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAvLyBIaWdobGlnaHQgRyAuLi4gRFxuICAgICAgICAgICAgLy8gVGhlIGJlbG93IHdvcmtzIE9OTFkgV0hFTiBST0xJIFNUVURJTyBJUyBUSEUgRlJPTlQgQVBQIE9OIE1BQ09TLlxuICAgICAgICAgICAgLy8gVGh1cywgd2UgYWRkIGEgNSBzZWNvbmQgZGVsYXkgYWZ0ZXIgY2xpY2tpbmcgdGhpcyBidXR0b24gc28gd2UgaGF2ZSB0aW1lIHRvIHN3aXRjaCBhcHBzISA6LX1cbiAgICAgICAgICAgIHNlbmRDb21tYW5kVG9BbGxEZXZpY2VzKFsweDAzLCAweDAyLCAweDAwLCAweDAwLCAweDAwLCAweDcwLCAweDA5LCAweDAwLCAweDAwLCAweDAwLCAweDdlLCAweDdmLCAweDdmLCAweDBmLCAweDAwXSk7XG4gICAgICAgICAgICBzZW5kQ29tbWFuZFRvQWxsRGV2aWNlcyhbMHgwMywgMHgwMiwgMHgwMCwgMHgwMCwgMHgwMCwgMHg2MCwgMHgwYSwgMHgwMCwgMHgwMCwgMHgwMCwgMHg0MCwgMHg0MywgMHg2OCwgMHgwYiwgMHgwMF0pO1xuICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoWzB4MDMsIDB4MDQsIDB4MDAsIDB4MDAsIDB4MDAsIDB4NzAsIDB4MDksIDB4MDAsIDB4MDAsIDB4MDAsIDB4N2UsIDB4N2YsIDB4N2YsIDB4MGYsIDB4MDBdKTtcbiAgICAgICAgICAgIHNlbmRDb21tYW5kVG9BbGxEZXZpY2VzKFsweDAzLCAweDA0LCAweDAwLCAweDAwLCAweDAwLCAweDYwLCAweDBhLCAweDAwLCAweDAwLCAweDAwLCAweDQwLCAweDQzLCAweDY4LCAweDBiLCAweDAwXSk7XG4gICAgICAgIH0sIDUwMDApO1xuXG4gICAgICAgIC8qXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBIaWdobGlnaHQgQyBFIEcgLi4uIEZcbiAgICAgICAgICAgICAgICAvLyBUaGUgYmVsb3cgd29ya3MgT05MWSBXSEVOIFJPTEkgU1RVRElPIElTIFRIRSBGUk9OVCBBUFAgT04gTUFDT1MuXG4gICAgICAgICAgICAgICAgLy8gVGh1cywgd2UgYWRkIGEgNSBzZWNvbmQgZGVsYXkgYWZ0ZXIgY2xpY2tpbmcgdGhpcyBidXR0b24gc28gd2UgaGF2ZSB0aW1lIHRvIHN3aXRjaCBhcHBzISA6LX1cbiAgICAgICAgICAgICAgICBzZW5kQ29tbWFuZFRvQWxsRGV2aWNlcyhbMHgwMywgMHgwMiwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwOSwgMHgwMCwgMHgwMCwgMHgwMCwgMHg3ZSwgMHg3ZiwgMHg3ZiwgMHgwZiwgMHgwMF0pO1xuICAgICAgICAgICAgICAgIHNlbmRDb21tYW5kVG9BbGxEZXZpY2VzKFsweDAzLCAweDAyLCAweDAwLCAweDAwLCAweDAwLCAweDQwLCAweDA5LCAweDAwLCAweDAwLCAweDAwLCAweDQwLCAweDQzLCAweDY4LCAweDBiLCAweDAwXSk7XG4gICAgICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoWzB4MDMsIDB4MDIsIDB4MDAsIDB4MDAsIDB4MDAsIDB4NzAsIDB4MDksIDB4MDAsIDB4MDAsIDB4MDAsIDB4NDAsIDB4NDMsIDB4NjgsIDB4MGIsIDB4MDBdKTtcbiAgICAgICAgICAgICAgICBzZW5kQ29tbWFuZFRvQWxsRGV2aWNlcyhbMHgwMywgMHgwMiwgMHgwMCwgMHgwMCwgMHgwMCwgMHgxMCwgMHgwYiwgMHgwMCwgMHgwMCwgMHgwMCwgMHg0MCwgMHg0MywgMHg2OCwgMHgwYiwgMHgwMF0pO1xuICAgICAgICAgICAgICAgIHNlbmRDb21tYW5kVG9BbGxEZXZpY2VzKFsweDAzLCAweDA0LCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDA5LCAweDAwLCAweDAwLCAweDAwLCAweDdlLCAweDdmLCAweDdmLCAweDBmLCAweDAwXSk7XG4gICAgICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoWzB4MDMsIDB4MDQsIDB4MDAsIDB4MDAsIDB4MDAsIDB4NDAsIDB4MDksIDB4MDAsIDB4MDAsIDB4MDAsIDB4NDAsIDB4NDMsIDB4NjgsIDB4MGIsIDB4MDBdKTtcbiAgICAgICAgICAgICAgICBzZW5kQ29tbWFuZFRvQWxsRGV2aWNlcyhbMHgwMywgMHgwNCwgMHgwMCwgMHgwMCwgMHgwMCwgMHg3MCwgMHgwOSwgMHgwMCwgMHgwMCwgMHgwMCwgMHg0MCwgMHg0MywgMHg2OCwgMHgwYiwgMHgwMF0pO1xuICAgICAgICAgICAgICAgIHNlbmRDb21tYW5kVG9BbGxEZXZpY2VzKFsweDAzLCAweDA0LCAweDAwLCAweDAwLCAweDAwLCAweDEwLCAweDBiLCAweDAwLCAweDAwLCAweDAwLCAweDQwLCAweDQzLCAweDY4LCAweDBiLCAweDAwXSk7XG4gICAgICAgICAgICB9LCA1MDAwKTtcbiAgICAgICAgICAgICovXG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJ1bkNvbW1hbmRfMDAyKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcInJ1bkNvbW1hbmRfMDAyXCIpO1xuXG4gICAgICAgIC8vIGNvbnN0IGNvbW1hbmQgPSBbMHg3NywgMHgwMCwgMHgwMSwgMHgwMSwgMHgwMCwgMHg1ZF07XG4gICAgICAgIC8vID8/IExVTUkgcmVzcG9uZHMgd2l0aDogZjAwMCAyMTEwIDc3NDcgMDAwMCAwMDAwIDEwMTAgMjAwMCAwMDY2IDI1MjEgMjIxYyA1YTYxIDZiNjAgNWM1YSA2NTI1IDY1MWIgNmEwMyA0YzYxIDQxMjEgNGM2YiA0YzJiIDBjNjAgNjEyMSAwMDAwIDc0ZjdcblxuICAgICAgICBjb25zdCBjb21tYW5kID0gWzB4NzcsIDB4MDcsIDB4MTAsIDB4MDIsIDB4NDRdO1xuICAgICAgICAvLyA/PyBMVU1JIHJlc3BvbmRzIHdpdGggNyBtZXNzYWdlcyEhIVxuICAgICAgICAvKlxuICAgICAgICAgICAgUk9MSSA5NyBieXRlc1x0RjAgMDAgMjEgMTAgNzcgNDcgMDAgMDAgMDAgMDAgMDAgMTMgMzEgNDggNDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDIgMDAgMDAgMDAgMDAgNDMgMDYgNDDigKZcbiAgICAgICAgICAgIFJPTEkgOTUgYnl0ZXNcdEYwIDAwIDIxIDEwIDc3IDQ3IDAwIDAwIDAwIDAwIDAwIDQzIDUwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDA4IDAwIDAwIDAwIDAwIDE4IDI0IDAxIDEwIDAw4oCmXG4gICAgICAgICAgICBST0xJIDk1IGJ5dGVzXHRGMCAwMCAyMSAxMCA3NyA0NyAwMCAwMCAwMCAwMCAwMCA0MyAxRSAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwOCAwMCAwMCAwMCAwMCAxOCAwNCA2MiAxRiAwMOKAplxuICAgICAgICAgICAgUk9MSSA5NSBieXRlc1x0RjAgMDAgMjEgMTAgNzcgNDcgMDAgMDAgMDAgMDAgMDAgNDMgNDQgMDAgMDAgNzAgN0YgM0YgMDAgMDAgMDAgMDAgN0MgN0YgN0YgN0YgM0YgMTggMzQgNjQgM0YgMDDigKZcbiAgICAgICAgICAgIFJPTEkgOTUgYnl0ZXNcdEYwIDAwIDIxIDEwIDc3IDQ3IDAwIDAwIDAwIDAwIDAwIDQzIDQ4IDA1IDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDIwIDAwIDAwIDAwIDAwIDE4IDY0IDJDIDAwIDAw4oCmXG4gICAgICAgICAgICBST0xJIDk1IGJ5dGVzXHRGMCAwMCAyMSAxMCA3NyA0NyAwMCAwMCAwMCAwMCAwMCA0MyA1QyAwNSAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwOCAwMCAwMCAwMCAwMCAxOCAyNCA0RSAwMCAwMOKAplxuICAgICAgICAgICAgUk9MSSA0NiBieXRlc1x0RjAgMDAgMjEgMTAgNzcgNDcgMDAgMDAgMDAgMDAgMDAgNDMgNzYgMDUgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDggMDAgMDAgMDAgMDAgMTggNDQgMEYgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgNDAgMDAgIDAwIDAwIDAwIDAwIDVCIEY3XG4gICAgICAgICovXG4gICAgICAgIHNlbmRTeXNFeFRvQWxsRGV2aWNlcyhjb21tYW5kKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gYXR0YWNoTG9nT3V0cHV0KGxvZ0hhbmRsZXIpIHtcbiAgICAgICAgbG9nT3V0cHV0ID0gbG9nSGFuZGxlcjtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gc3RhcnRGYWtlRGV2aWNlKCkge1xuICAgICAgICAvLyBTZW5kIG91dCBTeXNFeCBtZXNzYWdlcyB0byBmYWtlIG91dCBST0xJIENvbm5lY3QgLyBEYXNoYm9hcmQgLyBTdHVkaW8/Pz9cbiAgICAgICAgLy8gI1RPRE86IElzIHRoaXMgcG9zc2libGU/Pz8/XG4gICAgICAgIC8vIFRISVMgUFJPQkFCTFkgV09OJ1QgV09SSyBXSVRIT1VUIEEgTkFUSVZFIE1BQ09TIEFQUCBUSEFUIFBSRVRFTkRTIFRPIEJFIEEgTFVNSSBLRVlTLlxuICAgICAgICAvLyBzZW5kU3lzRXhUb0FsbERldmljZXMoWyAuLi4gXSk7XG4gICAgICAgIC8vIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgLy8gICAgIHNlbmRTeXNFeFRvQWxsRGV2aWNlcyhbMHg3NywgMHg0NywgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgyMCwgMHgwMCwgMHgwMCwgMHg2ZF0pOyAvLyBBY2tub3dsZWRnZSB0aGUgUElOR1xuICAgICAgICAvLyB9LCA0MDApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTFVNSUtleXM7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./apps/shared/midi/LUMIKeys.ts\n");

/***/ })

})