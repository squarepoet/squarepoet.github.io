webpackHotUpdate_N_E("pages/midi",{

/***/ "./apps/shared/midi/LUMIKeys.ts":
/*!**************************************!*\
  !*** ./apps/shared/midi/LUMIKeys.ts ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var webmidi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webmidi */ \"./node_modules/webmidi/webmidi.min.js\");\n/* harmony import */ var webmidi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webmidi__WEBPACK_IMPORTED_MODULE_0__);\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n // This approach was informed by:\n// https://github.com/benob/LUMI-lights/blob/master/SYSEX.txt\n// https://github.com/WeAreROLI/roli_blocks_basics/blob/main/blocks/roli_BlockConfigId.h\n// Note: You can drag *.littlefoot programs into the ROLI Dashboard to customize the program running on the LUMI Keys.\n\nvar LUMIKeys;\n\n(function (_LUMIKeys) {\n  // https://github.com/juce-framework/JUCE/blob/master/modules/juce_blocks_basics/protocol/juce_BitPackingUtilities.h\n  // static const uint8 roliSysexHeader[] = { 0xf0, 0x00, 0x21, 0x10, 0x77 };\n  var ROLI_MANUFACTURER_ID = [0x00, 0x21, 0x10];\n  var inputs = [];\n  var outputs = [];\n  var logOutput = null; // The DEVICE_ID might be different!\n  // We should allow the user of this page to customize the device ID.\n  // Maybe 0x37 was the kickstarter version of LUMI? How do we query the device ID?\n  // 0x00    => Works 100% for ronyeh's LUMI.\n  // 0x07    => Works 100% for ronyeh's LUMI.\n  // 0x37    => Works for benob's LUMI, but NOT for ronyeh's LUMI.\n  //\n  // This might have something to do with topology.\n  // See: https://github.com/juce-framework/JUCE/blob/master/modules/juce_blocks_basics/protocol/juce_BitPackingUtilities.h#L34\n  //\n  // When LUMI Keys responds with a SysEx, the deviceID (or topology ID?) is 47.\n  //\n  // let deviceID = 0x07;\n\n  var deviceID = 0x00;\n\n  function setDeviceID(devID) {\n    deviceID = devID;\n  }\n\n  function isLUMIKeys(io) {\n    return io.manufacturer.toUpperCase().startsWith(\"ROLI\") && io.name.toUpperCase().startsWith(\"LUMI\");\n  }\n\n  function messageMatches(msgData, msgString) {\n    return getDataAsHexString(msgData) === msgString;\n  } // Return MIDI data as an uppercase string of hex numbers, space delimited.\n  // We do not include the prefix 0x.\n  // Example:\n  //     \"F0 00 21 10 77 47 00 00 00 00 00 04 00 00 2C F7\"\n\n\n  function getDataAsHexString(msgData) {\n    if (!msgData || msgData.length === 0) {\n      return \"\";\n    }\n\n    var hexStrings = [];\n\n    var _iterator = _createForOfIteratorHelper(msgData),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _byte = _step.value;\n        hexStrings.push(_byte.toString(16).padStart(2, \"0\").toUpperCase());\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return hexStrings.join(\" \");\n  }\n\n  function logMessageAsHex(msgData) {\n    logOutput(getDataAsHexString(msgData));\n  }\n\n  function logMessageAsUTF8(msgData) {\n    var dataString = new TextDecoder(\"utf-8\").decode(msgData);\n    logOutput(dataString);\n  }\n\n  function connect() {\n    var _iterator2 = _createForOfIteratorHelper(webmidi__WEBPACK_IMPORTED_MODULE_0___default.a.inputs),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var i = _step2.value;\n\n        if (isLUMIKeys(i)) {\n          inputs.push(i);\n          i.addListener(\"midimessage\", \"all\", function (e) {\n            logMessageAsHex(e.data); // logMessageAsUTF8(e.data);\n\n            if (messageMatches(e.data, \"F0 00 21 10 77 47 00 00 00 00 00 04 00 00 2C F7\")) {\n              logOutput(\"POWER BUTTON PRESSED\");\n            }\n\n            if (messageMatches(e.data, \"F0 00 21 10 77 47 00 00 00 00 00 04 04 00 38 F7\")) {\n              logOutput(\"OCTAVE DOWN PRESSED\");\n            }\n\n            if (messageMatches(e.data, \"F0 00 21 10 77 47 00 00 00 00 00 04 08 00 44 F7\")) {\n              logOutput(\"OCTAVE UP PRESSED\");\n            }\n          });\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var _iterator3 = _createForOfIteratorHelper(webmidi__WEBPACK_IMPORTED_MODULE_0___default.a.outputs),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var o = _step3.value;\n\n        if (isLUMIKeys(o)) {\n          logOutput(\"Found LUMI Keys with output port ID: \" + o.id);\n          outputs.push(o);\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  _LUMIKeys.connect = connect;\n\n  function sendSysExToAllDevices(sysexCMD) {\n    var _iterator4 = _createForOfIteratorHelper(outputs),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var output = _step4.value;\n        output.sendSysex(ROLI_MANUFACTURER_ID, sysexCMD);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  } // Convert to hex for console.log()\n  // console.log(num.toString(16));\n\n\n  function sendCommandToAllDevices(command) {\n    var header = [0x77, deviceID];\n    var commandWithHeader = header.concat(command);\n    var checksum = createChecksum(command);\n    var commandWithHeaderAndCheckSum = commandWithHeader.concat(checksum);\n    console.log(\"sendCommandToAllDevices: \".concat(header, \" -- \").concat(command, \" -- \").concat(checksum));\n    sendSysExToAllDevices(commandWithHeaderAndCheckSum);\n  }\n\n  function createChecksum(values) {\n    var sum = values.length;\n\n    for (var i = 0; i < values.length; i++) {\n      sum = sum * 3 + values[i] & 0xff;\n    }\n\n    return sum & 0x7f;\n  }\n\n  function getClickHandler_SetScaleRoot(rootNote) {\n    return function () {\n      var command = [0x10, 0x30];\n\n      switch (rootNote) {\n        case \"C\":\n        default:\n          // [0x10, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00]\n          command.push.apply(command, [0x03, 0x00]);\n          break;\n\n        case \"C#/Db\":\n          // [0x10, 0x30, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00];\n          command.push.apply(command, [0x23, 0x00]);\n          break;\n\n        case \"D\":\n          // [0x10, 0x30, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00];\n          command.push.apply(command, [0x43, 0x00]);\n          break;\n\n        case \"D#\":\n          // [0x10, 0x30, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00];\n          command.push.apply(command, [0x63, 0x00]);\n          break;\n\n        case \"E\":\n          // [0x10, 0x30, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00];\n          command.push.apply(command, [0x03, 0x01]);\n          break;\n\n        case \"F\":\n          // [0x10, 0x30, 0x23, 0x01, 0x00, 0x00, 0x00, 0x00];\n          command.push.apply(command, [0x23, 0x01]);\n          break;\n\n        case \"F#\":\n          // [0x10, 0x30, 0x43, 0x01, 0x00, 0x00, 0x00, 0x00];\n          command.push.apply(command, [0x43, 0x01]);\n          break;\n\n        case \"G\":\n          // [0x10, 0x30, 0x63, 0x01, 0x00, 0x00, 0x00, 0x00];\n          command.push.apply(command, [0x63, 0x01]);\n          break;\n\n        case \"G#\":\n          // [0x10, 0x30, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00];\n          command.push.apply(command, [0x03, 0x02]);\n          break;\n\n        case \"A\":\n          // [0x10, 0x30, 0x23, 0x02, 0x00, 0x00, 0x00, 0x00];\n          command.push.apply(command, [0x23, 0x02]);\n          break;\n\n        case \"A#\":\n          // [0x10, 0x30, 0x43, 0x02, 0x00, 0x00, 0x00, 0x00];\n          command.push.apply(command, [0x43, 0x02]);\n          break;\n\n        case \"B\":\n          // [0x10, 0x30, 0x63, 0x02, 0x00, 0x00, 0x00, 0x00];\n          command.push.apply(command, [0x63, 0x02]);\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetScaleRoot = getClickHandler_SetScaleRoot;\n\n  function getClickHandler_SetBrightness(brightnessValue) {\n    return function () {\n      console.log(\"Set Brightness Level to \" + brightnessValue + \"%\");\n      var command = [0x10, 0x40];\n\n      switch (brightnessValue) {\n        case 0:\n          command.push.apply(command, [0x04, 0x00]);\n          break;\n\n        case 1:\n          command.push.apply(command, [0x24, 0x00]);\n          break;\n\n        case 10:\n          command.push.apply(command, [0x44, 0x02]);\n          break;\n\n        case 20:\n          command.push.apply(command, [0x04, 0x05]);\n          break;\n\n        case 25:\n          command.push.apply(command, [0x24, 0x06]);\n          break;\n\n        case 50:\n          command.push.apply(command, [0x44, 0x0c]);\n          break;\n\n        case 75:\n          command.push.apply(command, [0x64, 0x12]);\n          break;\n\n        case 100:\n        default:\n          command.push.apply(command, [0x04, 0x19]);\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetBrightness = getClickHandler_SetBrightness;\n\n  function getClickHandler_ResetToFactorySettings() {\n    return function () {\n      logOutput(\"Factory Reset!\"); // ROLI Dashboard sends the following:\n      // F0 00 21 10 77 07 11 14 F7\n      // F0 00 21 10 49 F7\n      // F0 00 21 10 78 3F F7\n      // F0 00 21 10 78 3F F7\n\n      sendCommandToAllDevices([0x11]); // See: https://github.com/juce-framework/JUCE/blob/master/modules/juce_blocks_basics/protocol/juce_BlocksProtocolDefinitions.h\n      // constexpr uint8 resetMaster[6] = { 0xf0, 0x00, 0x21, 0x10, 0x49, 0xf7 };\n\n      sendSysExToAllDevices([0x49]); // Who knows what this does?\n\n      sendSysExToAllDevices([0x78, 0x3f]);\n      sendSysExToAllDevices([0x78, 0x3f]);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_ResetToFactorySettings = getClickHandler_ResetToFactorySettings;\n\n  function getClickHandler_SwitchToMode(modeNumber) {\n    return function () {\n      logOutput(\"Switch to Mode \" + modeNumber);\n      var command = [0x10, 0x40];\n\n      switch (modeNumber) {\n        case 1:\n        default:\n          command.push(0x02); // Activate Mode 1\n\n          break;\n\n        case 2:\n          command.push(0x22); // Activate Mode 2\n\n          break;\n\n        case 3:\n          command.push(0x42); // Activate Mode 3\n\n          break;\n\n        case 4:\n          command.push(0x62); // Activate Mode 4\n\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SwitchToMode = getClickHandler_SwitchToMode;\n\n  function getClickHandler_SetColorMode(modeNumber, modeType) {\n    return function () {\n      logOutput(\"Set color of mode: \" + modeNumber + \" to \" + modeType);\n      var command = [0x10];\n\n      switch (modeType) {\n        case \"pro\":\n          switch (modeNumber) {\n            case 1:\n            default:\n              command.push.apply(command, [0x40, 0x0c, 0x00]); // Mode 1 => pro\n\n              break;\n\n            case 2:\n              command.push.apply(command, [0x30, 0x0d, 0x00]); // Mode 2 => pro\n\n              break;\n\n            case 3:\n              command.push.apply(command, [0x20, 0x0e, 0x00]); // Mode 3 => pro\n\n              break;\n\n            case 4:\n              command.push.apply(command, [0x10, 0x0f, 0x00]); // Mode 4 => pro\n\n              break;\n          }\n\n          break;\n\n        case \"user\":\n          switch (modeNumber) {\n            case 1:\n            default:\n              command.push.apply(command, [0x40, 0x2c, 0x00]); // Mode 1\n\n              break;\n\n            case 2:\n              command.push.apply(command, [0x30, 0x2d, 0x00]); // Mode 2\n\n              break;\n\n            case 3:\n              command.push.apply(command, [0x20, 0x2e, 0x00]); // Mode 3\n\n              break;\n\n            case 4:\n              command.push.apply(command, [0x10, 0x2f, 0x00]); // Mode 4\n\n              break;\n          }\n\n          break;\n\n        case \"piano\":\n          switch (modeNumber) {\n            case 1:\n            default:\n              command.push.apply(command, [0x40, 0x4c, 0x00]); // Mode 1\n\n              break;\n\n            case 2:\n              command.push.apply(command, [0x30, 0x4d, 0x00]); // Mode 2\n\n              break;\n\n            case 3:\n              command.push.apply(command, [0x20, 0x4e, 0x00]); // Mode 3\n\n              break;\n\n            case 4:\n              command.push.apply(command, [0x10, 0x4f, 0x00]); // Mode 4\n\n              break;\n          }\n\n          break;\n\n        case \"stage\":\n          switch (modeNumber) {\n            case 1:\n            default:\n              command.push.apply(command, [0x40, 0x6c, 0x00]); // Mode 1\n\n              break;\n\n            case 2:\n              command.push.apply(command, [0x30, 0x6d, 0x00]); // Mode 2\n\n              break;\n\n            case 3:\n              command.push.apply(command, [0x20, 0x6e, 0x00]); // Mode 3\n\n              break;\n\n            case 4:\n              command.push.apply(command, [0x10, 0x6f, 0x00]); // Mode 4\n\n              break;\n          }\n\n          break;\n\n        case \"rainbow\":\n        default:\n          switch (modeNumber) {\n            case 1:\n            default:\n              command.push.apply(command, [0x40, 0x0c, 0x01]); // Mode 1\n\n              break;\n\n            case 2:\n              command.push.apply(command, [0x30, 0x0d, 0x01]); // Mode 2\n\n              break;\n\n            case 3:\n              command.push.apply(command, [0x20, 0x0e, 0x01]); // Mode 3\n\n              break;\n\n            case 4:\n              command.push.apply(command, [0x10, 0x0f, 0x01]); // Mode 4\n\n              break;\n          }\n\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetColorMode = getClickHandler_SetColorMode;\n\n  function getClickHandler_SetScaleType(rootNote) {\n    return function () {\n      var command = [0x10, 0x60];\n\n      switch (rootNote) {\n        case \"chromatic\":\n          command.push.apply(command, [0x42, 0x04]); // chromatic\n\n          break;\n\n        case \"major\":\n        default:\n          command.push.apply(command, [0x02, 0x00]); // major\n\n          break;\n\n        case \"minor\":\n          command.push.apply(command, [0x22, 0x00]); // minor\n\n          break;\n\n        case \"neutral-pentatonic\":\n          command.push.apply(command, [0x62, 0x00]); // neutral pentatonic\n\n          break;\n\n        case \"major-pentatonic\":\n          command.push.apply(command, [0x02, 0x01]); // major pentatonic\n\n          break;\n\n        case \"minor-pentatonic\":\n          command.push.apply(command, [0x22, 0x01]); // minor pentatonic\n\n          break;\n\n        case \"blues\":\n          command.push.apply(command, [0x42, 0x01]); // blues\n\n          break;\n\n        case \"harmonic-minor\":\n          command.push.apply(command, [0x42, 0x00]); // harmonic minor\n\n          break;\n\n        case \"dorian\":\n          command.push.apply(command, [0x62, 0x01]); // dorian\n\n          break;\n\n        case \"phrygian\":\n          command.push.apply(command, [0x02, 0x02]); // phrygian\n\n          break;\n\n        case \"lydian\":\n          command.push.apply(command, [0x22, 0x02]); // lydian\n\n          break;\n\n        case \"mixolydian\":\n          command.push.apply(command, [0x42, 0x02]); // mixolydian\n\n          break;\n\n        case \"locrian\":\n          command.push.apply(command, [0x62, 0x02]); // locrian\n\n          break;\n\n        case \"whole-tone\":\n          command.push.apply(command, [0x02, 0x03]); // whole tone\n\n          break;\n\n        case \"arabic-a\":\n          command.push.apply(command, [0x22, 0x02]); // arabic (a)\n\n          break;\n\n        case \"arabic-b\":\n          command.push.apply(command, [0x42, 0x03]); // arabic (b)\n\n          break;\n\n        case \"japanese\":\n          command.push.apply(command, [0x62, 0x03]); // japanese\n\n          break;\n\n        case \"ryukyu\":\n          command.push.apply(command, [0x02, 0x04]); // ryukyu\n\n          break;\n\n        case \"8-tone-spanish\":\n          command.push.apply(command, [0x22, 0x04]); // 8-tone spanish\n\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetScaleType = getClickHandler_SetScaleType;\n\n  function getClickHandler_GetSerialNumber() {\n    return function () {\n      sendSysExToAllDevices([0x78, 0x3f]);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_GetSerialNumber = getClickHandler_GetSerialNumber;\n\n  function getClickHandler_Highlight(noteName) {\n    return function () {\n      console.log(\"Highlight \" + noteName);\n\n      var _iterator5 = _createForOfIteratorHelper(outputs),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var output = _step5.value;\n          output.playNote(noteName, \"all\", {\n            duration: 1200\n            /* ms */\n\n          });\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    };\n  }\n\n  _LUMIKeys.getClickHandler_Highlight = getClickHandler_Highlight;\n\n  function getClickHandler_SetColorGlobalKey(color, red, green, blue) {\n    return function () {\n      setColorGlobalKey(color, red, green, blue);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetColorGlobalKey = getClickHandler_SetColorGlobalKey;\n\n  function setColorGlobalKey(color, red, green, blue) {\n    var command = [0x10, 0x20];\n\n    switch (color) {\n      case \"rgb\":\n        var v1 = (blue & 0x3) << 5 | 0x4;\n        var v2 = blue >> 2 & 0x3f | green & 1;\n        var v3 = green >> 1;\n        var v4 = red & 0x7f;\n        var v5 = red >> 7 | 0x7e;\n        command.push.apply(command, [v1, v2, v3, v4, v5]);\n        break;\n\n      case \"blue\":\n        command.push.apply(command, [0x64, 0x3f, 0x00, 0x00, 0x7e]); // blue\n\n        break;\n\n      case \"green\":\n        command.push.apply(command, [0x04, 0x40, 0x7f, 0x00, 0x7e]); // green\n\n        break;\n\n      case \"red\":\n        command.push.apply(command, [0x04, 0x00, 0x00, 0x7f, 0x7f]); // red\n\n        break;\n\n      case \"yellow\":\n        command.push.apply(command, [0x04, 0x40, 0x7f, 0x7f, 0x7f]); // yellow\n\n        break;\n\n      case \"magenta\":\n        command.push.apply(command, [0x64, 0x3f, 0x00, 0x7f, 0x7f]); // magenta\n\n        break;\n\n      case \"cyan\":\n        command.push.apply(command, [0x64, 0x7f, 0x7f, 0x00, 0x7e]); // cyan\n\n        break;\n\n      case \"black\":\n        command.push.apply(command, [0x04, 0x00, 0x00, 0x00, 0x7e]); // black\n\n        break;\n\n      case \"white\":\n      default:\n        command.push.apply(command, [0x64, 0x7f, 0x7f, 0x7f, 0x7f]); // white\n\n        break;\n    }\n\n    command.push(0x03);\n    sendCommandToAllDevices(command);\n  }\n\n  _LUMIKeys.setColorGlobalKey = setColorGlobalKey;\n\n  function getClickHandler_SetColorRootKey(color, red, green, blue) {\n    return function () {\n      setColorRootKey(color, red, green, blue);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetColorRootKey = getClickHandler_SetColorRootKey;\n\n  function setColorRootKey(color, red, green, blue) {\n    var command = [0x10, 0x30];\n\n    switch (color) {\n      case \"rgb\":\n        var v1 = (blue & 0x3) << 5 | 0x4;\n        var v2 = blue >> 2 & 0x3f | green & 1;\n        var v3 = green >> 1;\n        var v4 = red & 0x7f;\n        var v5 = red >> 7 | 0x7e;\n        command.push.apply(command, [v1, v2, v3, v4, v5]);\n        break;\n\n      case \"blue\":\n        command.push.apply(command, [0x64, 0x3f, 0x00, 0x00, 0x7e]); // blue\n\n        break;\n\n      case \"green\":\n        command.push.apply(command, [0x04, 0x40, 0x7f, 0x00, 0x7e]); // green\n\n        break;\n\n      case \"red\":\n        command.push.apply(command, [0x04, 0x00, 0x00, 0x7f, 0x7f]); // red\n\n        break;\n\n      case \"yellow\":\n        command.push.apply(command, [0x04, 0x40, 0x7f, 0x7f, 0x7f]); // yellow\n\n        break;\n\n      case \"magenta\":\n        command.push.apply(command, [0x64, 0x3f, 0x00, 0x7f, 0x7f]); // magenta\n\n        break;\n\n      case \"cyan\":\n        command.push.apply(command, [0x64, 0x7f, 0x7f, 0x00, 0x7e]); // cyan\n\n        break;\n\n      case \"black\":\n        command.push.apply(command, [0x04, 0x00, 0x00, 0x00, 0x7e]); // black\n\n        break;\n\n      case \"white\":\n      default:\n        command.push.apply(command, [0x64, 0x7f, 0x7f, 0x7f, 0x7f]); // white\n\n        break;\n    }\n\n    command.push(0x03);\n    sendCommandToAllDevices(command);\n  }\n\n  _LUMIKeys.setColorRootKey = setColorRootKey;\n\n  function getClickHandler_SetOctave(octaveNumber) {\n    return function () {\n      console.log(\"Set Octave Offset to \" + octaveNumber);\n      var command = [0x10, 0x40];\n\n      switch (octaveNumber) {\n        case 0:\n        default:\n          command.push.apply(command, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case 1:\n          command.push.apply(command, [0x20, 0x00, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case 2:\n          command.push.apply(command, [0x40, 0x00, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case 3:\n          command.push.apply(command, [0x60, 0x00, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case 4:\n          command.push.apply(command, [0x00, 0x01, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case 5:\n          command.push.apply(command, [0x20, 0x01, 0x00, 0x00, 0x00, 0x00]);\n          break;\n\n        case -1:\n          command.push.apply(command, [0x60, 0x7f, 0x7f, 0x7f, 0x7f, 0x03]);\n          break;\n\n        case -2:\n          command.push.apply(command, [0x40, 0x7f, 0x7f, 0x7f, 0x7f, 0x03]);\n          break;\n\n        case -3:\n          command.push.apply(command, [0x20, 0x7f, 0x7f, 0x7f, 0x7f, 0x03]);\n          break;\n\n        case -4:\n          command.push.apply(command, [0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x03]);\n          break;\n      }\n\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_SetOctave = getClickHandler_SetOctave;\n\n  function getClickHandler_PitchBend(modeNumber, enableFlag) {\n    return function () {\n      console.log(\"Set Pitch Bend for Mode \" + modeNumber + \" to \" + enableFlag);\n      var command = [0x10];\n\n      switch (modeNumber) {\n        case 1:\n        default:\n          if (enableFlag) {\n            command.push.apply(command, [0x60, 0x2c]); // Mode 1 Pitch Bend ON\n          } else {\n            command.push.apply(command, [0x60, 0x0c]); // Mode 1 Pitch Bend OFF\n          }\n\n          break;\n\n        case 2:\n          if (enableFlag) {\n            command.push.apply(command, [0x50, 0x2d]); // Mode 1 Pitch Bend ON\n          } else {\n            command.push.apply(command, [0x50, 0x0d]); // Mode 1 Pitch Bend OFF\n          }\n\n          break;\n\n        case 3:\n          if (enableFlag) {\n            command.push.apply(command, [0x40, 0x2e]); // Mode 1 Pitch Bend ON\n          } else {\n            command.push.apply(command, [0x40, 0x0e]); // Mode 1 Pitch Bend OFF\n          }\n\n          break;\n\n        case 4:\n          if (enableFlag) {\n            command.push.apply(command, [0x30, 0x2f]); // Mode 1 Pitch Bend ON\n          } else {\n            command.push.apply(command, [0x30, 0x0f]); // Mode 1 Pitch Bend OFF\n          }\n\n          break;\n      }\n\n      command.push.apply(command, [0x00, 0x00, 0x00, 0x00, 0x00]);\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_PitchBend = getClickHandler_PitchBend;\n\n  function getClickHandler_PingDevice() {\n    return function () {\n      var command = [0x01, 0x03, 0x00];\n      sendCommandToAllDevices(command);\n    };\n  }\n\n  _LUMIKeys.getClickHandler_PingDevice = getClickHandler_PingDevice;\n\n  function runCommand_001() {\n    setTimeout(function () {\n      // Highlight G ... D\n      // The below works ONLY WHEN ROLI STUDIO IS THE FRONT APP ON MACOS.\n      // Thus, we add a 5 second delay after clicking this button so we have time to switch apps! :-}\n      sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x70, 0x09, 0x00, 0x00, 0x00, 0x7e, 0x7f, 0x7f, 0x0f, 0x00]);\n      sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x60, 0x0a, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n      sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x70, 0x09, 0x00, 0x00, 0x00, 0x7e, 0x7f, 0x7f, 0x0f, 0x00]);\n      sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x60, 0x0a, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n    }, 5000);\n    /*\n        setTimeout(() => {\n            // Highlight C E G ... F\n            // The below works ONLY WHEN ROLI STUDIO IS THE FRONT APP ON MACOS.\n            // Thus, we add a 5 second delay after clicking this button so we have time to switch apps! :-}\n            sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x7e, 0x7f, 0x7f, 0x0f, 0x00]);\n            sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x40, 0x09, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n            sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x70, 0x09, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n            sendCommandToAllDevices([0x03, 0x02, 0x00, 0x00, 0x00, 0x10, 0x0b, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n            sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x7e, 0x7f, 0x7f, 0x0f, 0x00]);\n            sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x40, 0x09, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n            sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x70, 0x09, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n            sendCommandToAllDevices([0x03, 0x04, 0x00, 0x00, 0x00, 0x10, 0x0b, 0x00, 0x00, 0x00, 0x40, 0x43, 0x68, 0x0b, 0x00]);\n        }, 5000);\n        */\n  }\n\n  _LUMIKeys.runCommand_001 = runCommand_001;\n\n  function runCommand_002() {\n    console.log(\"runCommand_002\"); // const command = [0x77, 0x00, 0x01, 0x01, 0x00, 0x5d];\n    // ?? LUMI responds with: f000 2110 7747 0000 0000 1010 2000 0066 2521 221c 5a61 6b60 5c5a 6525 651b 6a03 4c61 4121 4c6b 4c2b 0c60 6121 0000 74f7\n\n    var command = [0x77, 0x07, 0x10, 0x02, 0x44]; // ?? LUMI responds with 7 messages!!!\n\n    /*\n        ROLI 97 bytes\tF0 00 21 10 77 47 00 00 00 00 00 13 31 48 40 00 00 00 00 00 00 00 00 00 02 00 00 00 00 43 06 40…\n        ROLI 95 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 50 00 00 00 00 00 00 00 00 00 08 00 00 00 00 18 24 01 10 00…\n        ROLI 95 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 1E 00 00 00 00 00 00 00 00 00 08 00 00 00 00 18 04 62 1F 00…\n        ROLI 95 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 44 00 00 70 7F 3F 00 00 00 00 7C 7F 7F 7F 3F 18 34 64 3F 00…\n        ROLI 95 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 48 05 00 00 00 00 00 00 00 00 20 00 00 00 00 18 64 2C 00 00…\n        ROLI 95 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 5C 05 00 00 00 00 00 00 00 00 08 00 00 00 00 18 24 4E 00 00…\n        ROLI 46 bytes\tF0 00 21 10 77 47 00 00 00 00 00 43 76 05 00 00 00 00 00 00 00 00 08 00 00 00 00 18 44 0F 00 00 00 00 00 00 00 00 40 00  00 00 00 00 5B F7\n    */\n\n    sendSysExToAllDevices(command);\n  }\n\n  _LUMIKeys.runCommand_002 = runCommand_002;\n\n  function attachLogOutput(logHandler) {\n    logOutput = logHandler;\n  }\n\n  _LUMIKeys.attachLogOutput = attachLogOutput;\n\n  function startFakeDevice() {// Send out SysEx messages to fake out ROLI Connect / Dashboard / Studio???\n    // #TODO: Is this possible????\n    // THIS PROBABLY WON'T WORK WITHOUT A NATIVE MACOS APP THAT PRETENDS TO BE A LUMI KEYS.\n    // sendSysExToAllDevices([ ... ]);\n    // setInterval(() => {\n    //     sendSysExToAllDevices([0x77, 0x47, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x6d]); // Acknowledge the PING\n    // }, 400);\n  }\n\n  _LUMIKeys.startFakeDevice = startFakeDevice;\n})(LUMIKeys || (LUMIKeys = {}));\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (LUMIKeys);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwcy9zaGFyZWQvbWlkaS9MVU1JS2V5cy50cz8yOTNlIl0sIm5hbWVzIjpbIlJPTElfTUFOVUZBQ1RVUkVSX0lEIiwiaW5wdXRzIiwib3V0cHV0cyIsImxvZ091dHB1dCIsImRldmljZUlEIiwic2V0RGV2aWNlSUQiLCJkZXZJRCIsImlzTFVNSUtleXMiLCJpbyIsIm1hbnVmYWN0dXJlciIsInRvVXBwZXJDYXNlIiwic3RhcnRzV2l0aCIsIm5hbWUiLCJtZXNzYWdlTWF0Y2hlcyIsIm1zZ0RhdGEiLCJtc2dTdHJpbmciLCJnZXREYXRhQXNIZXhTdHJpbmciLCJsZW5ndGgiLCJoZXhTdHJpbmdzIiwiYnl0ZSIsInB1c2giLCJ0b1N0cmluZyIsInBhZFN0YXJ0Iiwiam9pbiIsImxvZ01lc3NhZ2VBc0hleCIsImxvZ01lc3NhZ2VBc1VURjgiLCJkYXRhU3RyaW5nIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJjb25uZWN0IiwiV2ViTWlkaSIsImkiLCJhZGRMaXN0ZW5lciIsImUiLCJkYXRhIiwibyIsImlkIiwic2VuZFN5c0V4VG9BbGxEZXZpY2VzIiwic3lzZXhDTUQiLCJvdXRwdXQiLCJzZW5kU3lzZXgiLCJzZW5kQ29tbWFuZFRvQWxsRGV2aWNlcyIsImNvbW1hbmQiLCJoZWFkZXIiLCJjb21tYW5kV2l0aEhlYWRlciIsImNvbmNhdCIsImNoZWNrc3VtIiwiY3JlYXRlQ2hlY2tzdW0iLCJjb21tYW5kV2l0aEhlYWRlckFuZENoZWNrU3VtIiwiY29uc29sZSIsImxvZyIsInZhbHVlcyIsInN1bSIsImdldENsaWNrSGFuZGxlcl9TZXRTY2FsZVJvb3QiLCJyb290Tm90ZSIsImdldENsaWNrSGFuZGxlcl9TZXRCcmlnaHRuZXNzIiwiYnJpZ2h0bmVzc1ZhbHVlIiwiZ2V0Q2xpY2tIYW5kbGVyX1Jlc2V0VG9GYWN0b3J5U2V0dGluZ3MiLCJnZXRDbGlja0hhbmRsZXJfU3dpdGNoVG9Nb2RlIiwibW9kZU51bWJlciIsImdldENsaWNrSGFuZGxlcl9TZXRDb2xvck1vZGUiLCJtb2RlVHlwZSIsImdldENsaWNrSGFuZGxlcl9TZXRTY2FsZVR5cGUiLCJnZXRDbGlja0hhbmRsZXJfR2V0U2VyaWFsTnVtYmVyIiwiZ2V0Q2xpY2tIYW5kbGVyX0hpZ2hsaWdodCIsIm5vdGVOYW1lIiwicGxheU5vdGUiLCJkdXJhdGlvbiIsImdldENsaWNrSGFuZGxlcl9TZXRDb2xvckdsb2JhbEtleSIsImNvbG9yIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwic2V0Q29sb3JHbG9iYWxLZXkiLCJ2MSIsInYyIiwidjMiLCJ2NCIsInY1IiwiZ2V0Q2xpY2tIYW5kbGVyX1NldENvbG9yUm9vdEtleSIsInNldENvbG9yUm9vdEtleSIsImdldENsaWNrSGFuZGxlcl9TZXRPY3RhdmUiLCJvY3RhdmVOdW1iZXIiLCJnZXRDbGlja0hhbmRsZXJfUGl0Y2hCZW5kIiwiZW5hYmxlRmxhZyIsImdldENsaWNrSGFuZGxlcl9QaW5nRGV2aWNlIiwicnVuQ29tbWFuZF8wMDEiLCJzZXRUaW1lb3V0IiwicnVuQ29tbWFuZF8wMDIiLCJhdHRhY2hMb2dPdXRwdXQiLCJsb2dIYW5kbGVyIiwic3RhcnRGYWtlRGV2aWNlIiwiTFVNSUtleXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztDQUVBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUVJO0FBQ0E7QUFDQSxNQUFNQSxvQkFBb0IsR0FBRyxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixDQUE3QjtBQUVBLE1BQUlDLE1BQWUsR0FBRyxFQUF0QjtBQUNBLE1BQUlDLE9BQWlCLEdBQUcsRUFBeEI7QUFFQSxNQUFJQyxTQUFnQyxHQUFHLElBQXZDLEMsQ0FFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFJQyxRQUFRLEdBQUcsSUFBZjs7QUFDQSxXQUFTQyxXQUFULENBQXFCQyxLQUFyQixFQUE0QjtBQUN4QkYsWUFBUSxHQUFHRSxLQUFYO0FBQ0g7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QUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQLENBREosQ0FDbUM7O0FBQy9COztBQUNKLGFBQUssUUFBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQLENBREosQ0FDbUM7O0FBQy9COztBQUNKLGFBQUssVUFBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQLENBREosQ0FDbUM7O0FBQy9COztBQUNKLGFBQUssUUFBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQLENBREosQ0FDbUM7O0FBQy9COztBQUNKLGFBQUssWUFBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQLENBREosQ0FDbUM7O0FBQy9COztBQUNKLGFBQUssU0FBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQLENBREosQ0FDbUM7O0FBQy9COztBQUNKLGFBQUssWUFBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQLENBREosQ0FDbUM7O0FBQy9COztBQUNKLGFBQUssVUFBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQLENBREosQ0FDbUM7O0FBQy9COztBQUNKLGFBQUssVUFBTDtBQUNJQSxpQkFBTyxDQUFDdEIsSUFBUixPQUFBc0IsT0FBTyxFQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVCxDQUFQLENBREosQ0FDbUM7O0FBQy9COztBQUNKLGFBQUssVUFB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O0FBRU0sV0FBU0MsZUFBVCxHQUEyQixDQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNIOzs7R0E1dUJLQyxRLEtBQUFBLFE7O0FBK3VCS0EsdUVBQWYiLCJmaWxlIjoiLi9hcHBzL3NoYXJlZC9taWRpL0xVTUlLZXlzLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFdlYk1pZGksIHsgSW5wdXQsIE91dHB1dCB9IGZyb20gXCJ3ZWJtaWRpXCI7XG5cbi8vIFRoaXMgYXBwcm9hY2ggd2FzIGluZm9ybWVkIGJ5OlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlbm9iL0xVTUktbGlnaHRzL2Jsb2IvbWFzdGVyL1NZU0VYLnR4dFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL1dlQXJlUk9MSS9yb2xpX2Jsb2Nrc19iYXNpY3MvYmxvYi9tYWluL2Jsb2Nrcy9yb2xpX0Jsb2NrQ29uZmlnSWQuaFxuLy8gTm90ZTogWW91IGNhbiBkcmFnICoubGl0dGxlZm9vdCBwcm9ncmFtcyBpbnRvIHRoZSBST0xJIERhc2hib2FyZCB0byBjdXN0b21pemUgdGhlIHByb2dyYW0gcnVubmluZyBvbiB0aGUgTFVNSSBLZXlzLlxubmFtZXNwYWNlIExVTUlLZXlzIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vanVjZS1mcmFtZXdvcmsvSlVDRS9ibG9iL21hc3Rlci9tb2R1bGVzL2p1Y2VfYmxvY2tzX2Jhc2ljcy9wcm90b2NvbC9qdWNlX0JpdFBhY2tpbmdVdGlsaXRpZXMuaFxuICAgIC8vIHN0YXRpYyBjb25zdCB1aW50OCByb2xpU3lzZXhIZWFkZXJbXSA9IHsgMHhmMCwgMHgwMCwgMHgyMSwgMHgxMCwgMHg3NyB9O1xuICAgIGNvbnN0IFJPTElfTUFOVUZBQ1RVUkVSX0lEID0gWzB4MDAsIDB4MjEsIDB4MTBdO1xuXG4gICAgbGV0IGlucHV0czogSW5wdXRbXSA9IFtdO1xuICAgIGxldCBvdXRwdXRzOiBPdXRwdXRbXSA9IFtdO1xuXG4gICAgbGV0IGxvZ091dHB1dDogKG1zZzogc3RyaW5nKSA9PiB2b2lkID0gbnVsbDtcblxuICAgIC8vIFRoZSBERVZJQ0VfSUQgbWlnaHQgYmUgZGlmZmVyZW50IVxuICAgIC8vIFdlIHNob3VsZCBhbGxvdyB0aGUgdXNlciBvZiB0aGlzIHBhZ2UgdG8gY3VzdG9taXplIHRoZSBkZXZpY2UgSUQuXG4gICAgLy8gTWF5YmUgMHgzNyB3YXMgdGhlIGtpY2tzdGFydGVyIHZlcnNpb24gb2YgTFVNST8gSG93IGRvIHdlIHF1ZXJ5IHRoZSBkZXZpY2UgSUQ/XG4gICAgLy8gMHgwMCAgICA9PiBXb3JrcyAxMDAlIGZvciByb255ZWgncyBMVU1JLlxuICAgIC8vIDB4MDcgICAgPT4gV29ya3MgMTAwJSBmb3Igcm9ueWVoJ3MgTFVNSS5cbiAgICAvLyAweDM3ICAgID0+IFdvcmtzIGZvciBiZW5vYidzIExVTUksIGJ1dCBOT1QgZm9yIHJvbnllaCdzIExVTUkuXG4gICAgLy9cbiAgICAvLyBUaGlzIG1pZ2h0IGhhdmUgc29tZXRoaW5nIHRvIGRvIHdpdGggdG9wb2xvZ3kuXG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vanVjZS1mcmFtZXdvcmsvSlVDRS9ibG9iL21hc3Rlci9tb2R1bGVzL2p1Y2VfYmxvY2tzX2Jhc2ljcy9wcm90b2NvbC9qdWNlX0JpdFBhY2tpbmdVdGlsaXRpZXMuaCNMMzRcbiAgICAvL1xuICAgIC8vIFdoZW4gTFVNSSBLZXlzIHJlc3BvbmRzIHdpdGggYSBTeXNFeCwgdGhlIGRldmljZUlEIChvciB0b3BvbG9neSBJRD8pIGlzIDQ3LlxuICAgIC8vXG4gICAgLy8gbGV0IGRldmljZUlEID0gMHgwNztcbiAgICBsZXQgZGV2aWNlSUQgPSAweDAwO1xuICAgIGZ1bmN0aW9uIHNldERldmljZUlEKGRldklEKSB7XG4gICAgICAgIGRldmljZUlEID0gZGV2SUQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMVU1JS2V5cyhpbzogSW5wdXQgfCBPdXRwdXQpIHtcbiAgICAgICAgcmV0dXJuIGlvLm1hbnVmYWN0dXJlci50b1VwcGVyQ2FzZSgpLnN0YXJ0c1dpdGgoXCJST0xJXCIpICYmIGlvLm5hbWUudG9VcHBlckNhc2UoKS5zdGFydHNXaXRoKFwiTFVNSVwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXNzYWdlTWF0Y2hlcyhtc2dEYXRhOiBVaW50OEFycmF5LCBtc2dTdHJpbmc6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gZ2V0RGF0YUFzSGV4U3RyaW5nKG1zZ0RhdGEpID09PSBtc2dTdHJpbmc7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIE1JREkgZGF0YSBhcyBhbiB1cHBlcmNhc2Ugc3RyaW5nIG9mIGhleCBudW1iZXJzLCBzcGFjZSBkZWxpbWl0ZWQuXG4gICAgLy8gV2UgZG8gbm90IGluY2x1ZGUgdGhlIHByZWZpeCAweC5cbiAgICAvLyBFeGFtcGxlOlxuICAgIC8vICAgICBcIkYwIDAwIDIxIDEwIDc3IDQ3IDAwIDAwIDAwIDAwIDAwIDA0IDAwIDAwIDJDIEY3XCJcbiAgICBmdW5jdGlvbiBnZXREYXRhQXNIZXhTdHJpbmcobXNnRGF0YTogVWludDhBcnJheSkge1xuICAgICAgICBpZiAoIW1zZ0RhdGEgfHwgbXNnRGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhleFN0cmluZ3MgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBieXRlIG9mIG1zZ0RhdGEpIHtcbiAgICAgICAgICAgIGhleFN0cmluZ3MucHVzaChieXRlLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIikudG9VcHBlckNhc2UoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhleFN0cmluZ3Muam9pbihcIiBcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9nTWVzc2FnZUFzSGV4KG1zZ0RhdGE6IFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgbG9nT3V0cHV0KGdldERhdGFBc0hleFN0cmluZyhtc2dEYXRhKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9nTWVzc2FnZUFzVVRGOChtc2dEYXRhOiBVaW50OEFycmF5KSB7XG4gICAgICAgIGNvbnN0IGRhdGFTdHJpbmcgPSBuZXcgVGV4dERlY29kZXIoXCJ1dGYtOFwiKS5kZWNvZGUobXNnRGF0YSk7XG4gICAgICAgIGxvZ091dHB1dChkYXRhU3RyaW5nKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gY29ubmVjdCgpIHtcbiAgICAgICAgZm9yIChjb25zdCBpIG9mIFdlYk1pZGkuaW5wdXRzKSB7XG4gICAgICAgICAgICBpZiAoaXNMVU1JS2V5cyhpKSkge1xuICAgICAgICAgICAgICAgIGlucHV0cy5wdXNoKGkpO1xuXG4gICAgICAgICAgICAgICAgaS5hZGRMaXN0ZW5lcihcIm1pZGltZXNzYWdlXCIsIFwiYWxsXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ01lc3NhZ2VBc0hleChlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAvLyBsb2dNZXNzYWdlQXNVVEY4KGUuZGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VNYXRjaGVzKGUuZGF0YSwgXCJGMCAwMCAyMSAxMCA3NyA0NyAwMCAwMCAwMCAwMCAwMCAwNCAwMCAwMCAyQyBGN1wiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nT3V0cHV0KFwiUE9XRVIgQlVUVE9OIFBSRVNTRURcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VNYXRjaGVzKGUuZGF0YSwgXCJGMCAwMCAyMSAxMCA3NyA0NyAwMCAwMCAwMCAwMCAwMCAwNCAwNCAwMCAzOCBGN1wiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nT3V0cHV0KFwiT0NUQVZFIERPV04gUFJFU1NFRFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZU1hdGNoZXMoZS5kYXRhLCBcIkYwIDAwIDIxIDEwIDc3IDQ3IDAwIDAwIDAwIDAwIDAwIDA0IDA4IDAwIDQ0IEY3XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dPdXRwdXQoXCJPQ1RBVkUgVVAgUFJFU1NFRFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBvIG9mIFdlYk1pZGkub3V0cHV0cykge1xuICAgICAgICAgICAgaWYgKGlzTFVNSUtleXMobykpIHtcbiAgICAgICAgICAgICAgICBsb2dPdXRwdXQoXCJGb3VuZCBMVU1JIEtleXMgd2l0aCBvdXRwdXQgcG9ydCBJRDogXCIgKyBvLmlkKTtcbiAgICAgICAgICAgICAgICBvdXRwdXRzLnB1c2gobyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZW5kU3lzRXhUb0FsbERldmljZXMoc3lzZXhDTUQpIHtcbiAgICAgICAgZm9yIChjb25zdCBvdXRwdXQgb2Ygb3V0cHV0cykge1xuICAgICAgICAgICAgb3V0cHV0LnNlbmRTeXNleChST0xJX01BTlVGQUNUVVJFUl9JRCwgc3lzZXhDTUQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ29udmVydCB0byBoZXggZm9yIGNvbnNvbGUubG9nKClcbiAgICAvLyBjb25zb2xlLmxvZyhudW0udG9TdHJpbmcoMTYpKTtcbiAgICBmdW5jdGlvbiBzZW5kQ29tbWFuZFRvQWxsRGV2aWNlcyhjb21tYW5kKSB7XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IFsweDc3LCBkZXZpY2VJRF07XG4gICAgICAgIGNvbnN0IGNvbW1hbmRXaXRoSGVhZGVyID0gaGVhZGVyLmNvbmNhdChjb21tYW5kKTtcbiAgICAgICAgY29uc3QgY2hlY2tzdW0gPSBjcmVhdGVDaGVja3N1bShjb21tYW5kKTtcbiAgICAgICAgY29uc3QgY29tbWFuZFdpdGhIZWFkZXJBbmRDaGVja1N1bSA9IGNvbW1hbmRXaXRoSGVhZGVyLmNvbmNhdChjaGVja3N1bSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBzZW5kQ29tbWFuZFRvQWxsRGV2aWNlczogJHtoZWFkZXJ9IC0tICR7Y29tbWFuZH0gLS0gJHtjaGVja3N1bX1gKTtcbiAgICAgICAgc2VuZFN5c0V4VG9BbGxEZXZpY2VzKGNvbW1hbmRXaXRoSGVhZGVyQW5kQ2hlY2tTdW0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoZWNrc3VtKHZhbHVlcykge1xuICAgICAgICBsZXQgc3VtID0gdmFsdWVzLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHN1bSA9IChzdW0gKiAzICsgdmFsdWVzW2ldKSAmIDB4ZmY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1bSAmIDB4N2Y7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldENsaWNrSGFuZGxlcl9TZXRTY2FsZVJvb3Qocm9vdE5vdGUpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGxldCBjb21tYW5kID0gWzB4MTAsIDB4MzBdO1xuICAgICAgICAgICAgc3dpdGNoIChyb290Tm90ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJDXCI6XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgLy8gWzB4MTAsIDB4MzAsIDB4MDMsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwMywgMHgwMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiQyMvRGJcIjpcbiAgICAgICAgICAgICAgICAgICAgLy8gWzB4MTAsIDB4MzAsIDB4MjMsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdO1xuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MjMsIDB4MDBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIkRcIjpcbiAgICAgICAgICAgICAgICAgICAgLy8gWzB4MTAsIDB4MzAsIDB4NDMsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdO1xuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NDMsIDB4MDBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIkQjXCI6XG4gICAgICAgICAgICAgICAgICAgIC8vIFsweDEwLCAweDMwLCAweDYzLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwXTtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDYzLCAweDAwXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJFXCI6XG4gICAgICAgICAgICAgICAgICAgIC8vIFsweDEwLCAweDMwLCAweDAzLCAweDAxLCAweDAwLCAweDAwLCAweDAwLCAweDAwXTtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDAzLCAweDAxXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJGXCI6XG4gICAgICAgICAgICAgICAgICAgIC8vIFsweDEwLCAweDMwLCAweDIzLCAweDAxLCAweDAwLCAweDAwLCAweDAwLCAweDAwXTtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDIzLCAweDAxXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJGI1wiOlxuICAgICAgICAgICAgICAgICAgICAvLyBbMHgxMCwgMHgzMCwgMHg0MywgMHgwMSwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF07XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg0MywgMHgwMV0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiR1wiOlxuICAgICAgICAgICAgICAgICAgICAvLyBbMHgxMCwgMHgzMCwgMHg2MywgMHgwMSwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF07XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg2MywgMHgwMV0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiRyNcIjpcbiAgICAgICAgICAgICAgICAgICAgLy8gWzB4MTAsIDB4MzAsIDB4MDMsIDB4MDIsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdO1xuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDMsIDB4MDJdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIkFcIjpcbiAgICAgICAgICAgICAgICAgICAgLy8gWzB4MTAsIDB4MzAsIDB4MjMsIDB4MDIsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdO1xuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MjMsIDB4MDJdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIkEjXCI6XG4gICAgICAgICAgICAgICAgICAgIC8vIFsweDEwLCAweDMwLCAweDQzLCAweDAyLCAweDAwLCAweDAwLCAweDAwLCAweDAwXTtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDQzLCAweDAyXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJCXCI6XG4gICAgICAgICAgICAgICAgICAgIC8vIFsweDEwLCAweDMwLCAweDYzLCAweDAyLCAweDAwLCAweDAwLCAweDAwLCAweDAwXTtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDYzLCAweDAyXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDAwLCAweDAwLCAweDAwLCAweDAwXSk7XG4gICAgICAgICAgICBzZW5kQ29tbWFuZFRvQWxsRGV2aWNlcyhjb21tYW5kKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gZ2V0Q2xpY2tIYW5kbGVyX1NldEJyaWdodG5lc3MoYnJpZ2h0bmVzc1ZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2V0IEJyaWdodG5lc3MgTGV2ZWwgdG8gXCIgKyBicmlnaHRuZXNzVmFsdWUgKyBcIiVcIik7XG4gICAgICAgICAgICBjb25zdCBjb21tYW5kID0gWzB4MTAsIDB4NDBdO1xuICAgICAgICAgICAgc3dpdGNoIChicmlnaHRuZXNzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwNCwgMHgwMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgyNCwgMHgwMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NDQsIDB4MDJdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyMDpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDA0LCAweDA1XSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjU6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgyNCwgMHgwNl0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDUwOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NDQsIDB4MGNdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA3NTpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDY0LCAweDEyXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTAwOlxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwNCwgMHgxOV0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoY29tbWFuZCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldENsaWNrSGFuZGxlcl9SZXNldFRvRmFjdG9yeVNldHRpbmdzKCkge1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgbG9nT3V0cHV0KFwiRmFjdG9yeSBSZXNldCFcIik7XG5cbiAgICAgICAgICAgIC8vIFJPTEkgRGFzaGJvYXJkIHNlbmRzIHRoZSBmb2xsb3dpbmc6XG4gICAgICAgICAgICAvLyBGMCAwMCAyMSAxMCA3NyAwNyAxMSAxNCBGN1xuICAgICAgICAgICAgLy8gRjAgMDAgMjEgMTAgNDkgRjdcbiAgICAgICAgICAgIC8vIEYwIDAwIDIxIDEwIDc4IDNGIEY3XG4gICAgICAgICAgICAvLyBGMCAwMCAyMSAxMCA3OCAzRiBGN1xuXG4gICAgICAgICAgICBzZW5kQ29tbWFuZFRvQWxsRGV2aWNlcyhbMHgxMV0pO1xuXG4gICAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qdWNlLWZyYW1ld29yay9KVUNFL2Jsb2IvbWFzdGVyL21vZHVsZXMvanVjZV9ibG9ja3NfYmFzaWNzL3Byb3RvY29sL2p1Y2VfQmxvY2tzUHJvdG9jb2xEZWZpbml0aW9ucy5oXG4gICAgICAgICAgICAvLyBjb25zdGV4cHIgdWludDggcmVzZXRNYXN0ZXJbNl0gPSB7IDB4ZjAsIDB4MDAsIDB4MjEsIDB4MTAsIDB4NDksIDB4ZjcgfTtcbiAgICAgICAgICAgIHNlbmRTeXNFeFRvQWxsRGV2aWNlcyhbMHg0OV0pO1xuXG4gICAgICAgICAgICAvLyBXaG8ga25vd3Mgd2hhdCB0aGlzIGRvZXM/XG4gICAgICAgICAgICBzZW5kU3lzRXhUb0FsbERldmljZXMoWzB4NzgsIDB4M2ZdKTtcbiAgICAgICAgICAgIHNlbmRTeXNFeFRvQWxsRGV2aWNlcyhbMHg3OCwgMHgzZl0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRDbGlja0hhbmRsZXJfU3dpdGNoVG9Nb2RlKG1vZGVOdW1iZXIpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGxvZ091dHB1dChcIlN3aXRjaCB0byBNb2RlIFwiICsgbW9kZU51bWJlcik7XG4gICAgICAgICAgICBjb25zdCBjb21tYW5kID0gWzB4MTAsIDB4NDBdO1xuICAgICAgICAgICAgc3dpdGNoIChtb2RlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCgweDAyKTsgLy8gQWN0aXZhdGUgTW9kZSAxXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKDB4MjIpOyAvLyBBY3RpdmF0ZSBNb2RlIDJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goMHg0Mik7IC8vIEFjdGl2YXRlIE1vZGUgM1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCgweDYyKTsgLy8gQWN0aXZhdGUgTW9kZSA0XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwXSk7XG4gICAgICAgICAgICBzZW5kQ29tbWFuZFRvQWxsRGV2aWNlcyhjb21tYW5kKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBQUk9cbiAgICAvLyAxMCA0MCAwQyAwMCAwMCAwMCAwMCAwMCA1QyBGN1xuICAgIC8vIFVTRVJcbiAgICAvLyAxMCA0MCAyQyAwMCAwMCAwMCAwMCAwMCAzQyBGN1xuICAgIC8vIFBJQU5PXG4gICAgLy8gMTAgNDAgNEMgMDAgMDAgMDAgMDAgMDAgMUMgRjdcbiAgICAvLyBTVEFHRVxuICAgIC8vIDEwIDQwIDZDIDAwIDAwIDAwIDAwIDAwIDdDIEY3XG4gICAgLy8gUkFJTkJPV1xuICAgIC8vIDEwIDQwIDBDIDAxIDAwIDAwIDAwIDAwIDJEIEY3XG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldENsaWNrSGFuZGxlcl9TZXRDb2xvck1vZGUobW9kZU51bWJlciwgbW9kZVR5cGUpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGxvZ091dHB1dChcIlNldCBjb2xvciBvZiBtb2RlOiBcIiArIG1vZGVOdW1iZXIgKyBcIiB0byBcIiArIG1vZGVUeXBlKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSBbMHgxMF07XG4gICAgICAgICAgICBzd2l0Y2ggKG1vZGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInByb1wiOlxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG1vZGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDQwLCAweDBjLCAweDAwXSk7IC8vIE1vZGUgMSA9PiBwcm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MzAsIDB4MGQsIDB4MDBdKTsgLy8gTW9kZSAyID0+IHByb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgyMCwgMHgwZSwgMHgwMF0pOyAvLyBNb2RlIDMgPT4gcHJvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDEwLCAweDBmLCAweDAwXSk7IC8vIE1vZGUgNCA9PiBwcm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwidXNlclwiOlxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG1vZGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDQwLCAweDJjLCAweDAwXSk7IC8vIE1vZGUgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgzMCwgMHgyZCwgMHgwMF0pOyAvLyBNb2RlIDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MjAsIDB4MmUsIDB4MDBdKTsgLy8gTW9kZSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDEwLCAweDJmLCAweDAwXSk7IC8vIE1vZGUgNFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJwaWFub1wiOlxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG1vZGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDQwLCAweDRjLCAweDAwXSk7IC8vIE1vZGUgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgzMCwgMHg0ZCwgMHgwMF0pOyAvLyBNb2RlIDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MjAsIDB4NGUsIDB4MDBdKTsgLy8gTW9kZSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDEwLCAweDRmLCAweDAwXSk7IC8vIE1vZGUgNFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzdGFnZVwiOlxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG1vZGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDQwLCAweDZjLCAweDAwXSk7IC8vIE1vZGUgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgzMCwgMHg2ZCwgMHgwMF0pOyAvLyBNb2RlIDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MjAsIDB4NmUsIDB4MDBdKTsgLy8gTW9kZSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDEwLCAweDZmLCAweDAwXSk7IC8vIE1vZGUgNFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyYWluYm93XCI6XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChtb2RlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg0MCwgMHgwYywgMHgwMV0pOyAvLyBNb2RlIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MzAsIDB4MGQsIDB4MDFdKTsgLy8gTW9kZSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDIwLCAweDBlLCAweDAxXSk7IC8vIE1vZGUgM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgxMCwgMHgwZiwgMHgwMV0pOyAvLyBNb2RlIDRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoY29tbWFuZCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldENsaWNrSGFuZGxlcl9TZXRTY2FsZVR5cGUocm9vdE5vdGUpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSBbMHgxMCwgMHg2MF07XG4gICAgICAgICAgICBzd2l0Y2ggKHJvb3ROb3RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNocm9tYXRpY1wiOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NDIsIDB4MDRdKTsgLy8gY2hyb21hdGljXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJtYWpvclwiOlxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwMiwgMHgwMF0pOyAvLyBtYWpvclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibWlub3JcIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDIyLCAweDAwXSk7IC8vIG1pbm9yXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJuZXV0cmFsLXBlbnRhdG9uaWNcIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDYyLCAweDAwXSk7IC8vIG5ldXRyYWwgcGVudGF0b25pY1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibWFqb3ItcGVudGF0b25pY1wiOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDIsIDB4MDFdKTsgLy8gbWFqb3IgcGVudGF0b25pY1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibWlub3ItcGVudGF0b25pY1wiOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MjIsIDB4MDFdKTsgLy8gbWlub3IgcGVudGF0b25pY1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYmx1ZXNcIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDQyLCAweDAxXSk7IC8vIGJsdWVzXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJoYXJtb25pYy1taW5vclwiOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NDIsIDB4MDBdKTsgLy8gaGFybW9uaWMgbWlub3JcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImRvcmlhblwiOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NjIsIDB4MDFdKTsgLy8gZG9yaWFuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJwaHJ5Z2lhblwiOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDIsIDB4MDJdKTsgLy8gcGhyeWdpYW5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImx5ZGlhblwiOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MjIsIDB4MDJdKTsgLy8gbHlkaWFuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJtaXhvbHlkaWFuXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg0MiwgMHgwMl0pOyAvLyBtaXhvbHlkaWFuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJsb2NyaWFuXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg2MiwgMHgwMl0pOyAvLyBsb2NyaWFuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ3aG9sZS10b25lXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwMiwgMHgwM10pOyAvLyB3aG9sZSB0b25lXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJhcmFiaWMtYVwiOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MjIsIDB4MDJdKTsgLy8gYXJhYmljIChhKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYXJhYmljLWJcIjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDQyLCAweDAzXSk7IC8vIGFyYWJpYyAoYilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImphcGFuZXNlXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg2MiwgMHgwM10pOyAvLyBqYXBhbmVzZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwicnl1a3l1XCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwMiwgMHgwNF0pOyAvLyByeXVreXVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIjgtdG9uZS1zcGFuaXNoXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgyMiwgMHgwNF0pOyAvLyA4LXRvbmUgc3BhbmlzaFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoY29tbWFuZCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gUVVFUlkgU0VSSUFMIE5VTUJFUiA9PiBMS0JEODRDV0E5NUtLSjdUXG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vanVjZS1mcmFtZXdvcmsvSlVDRS9ibG9iL21hc3Rlci9tb2R1bGVzL2p1Y2VfYmxvY2tzX2Jhc2ljcy9wcm90b2NvbC9qdWNlX0Jsb2Nrc1Byb3RvY29sRGVmaW5pdGlvbnMuaCNMMTk3XG4gICAgLy8gYm9vbCBpc0x1bWlLZXlzQmxvY2soKSBjb25zdCBub2V4Y2VwdCAgICAgICB7IHJldHVybiBoYXNQcmVmaXggKFwiTEtCXCIpOyB9XG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldENsaWNrSGFuZGxlcl9HZXRTZXJpYWxOdW1iZXIoKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzZW5kU3lzRXhUb0FsbERldmljZXMoWzB4NzgsIDB4M2ZdKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBTZW5kcyBhIE5vdGVPbiBhbmQgdGhlbiBhIE5vdGVPZmYgYWZ0ZXIgMS4yIHNlY29uZHMuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldENsaWNrSGFuZGxlcl9IaWdobGlnaHQobm90ZU5hbWU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJIaWdobGlnaHQgXCIgKyBub3RlTmFtZSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG91dHB1dCBvZiBvdXRwdXRzKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0LnBsYXlOb3RlKG5vdGVOYW1lLCBcImFsbFwiLCB7IGR1cmF0aW9uOiAxMjAwIC8qIG1zICovIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Jlbm9iL0xVTUktbGlnaHRzL2Jsb2IvbWFzdGVyL1NZU0VYLnR4dFxuICAgIC8vIGV4YW1wbGVzIG9mIGNvbG9yIGNoYW5nZXNcbiAgICAvLyAxMCAyMCA2NCAzRiAwMCAwMCA3RSAwMyAvLyBibHVlXG4gICAgLy8gMTAgMjAgMDQgNDAgN0YgMDAgN0UgMDMgLy8gZ3JlZW5cbiAgICAvLyAxMCAyMCAwNCAwMCAwMCA3RiA3RiAwMyAvLyByZWRcbiAgICAvLyAxMCAyMCAwNCA0MCA3RiA3RiA3RiAwMyAvLyB5ZWxsb3dcbiAgICAvLyAxMCAyMCA2NCAzRiAwMCA3RiA3RiAwMyAvLyBtYWdlbnRhXG4gICAgLy8gMTAgMjAgNjQgN0YgN0YgMDAgN0UgMDMgLy8gY3lhblxuXG4gICAgLy8gYml0IGVuY29kaW5nIG9mIGNvbG9yczpcbiAgICAvLyAwMDEwMCBCTFVFXzhfQklUUyBHUkVFTl84X0JJVFMgUkVEXzhfQklUUyAxMTExMTFcbiAgICAvLyBibHVlICAgIDExMDAxMDAgMDExMTExMSAwMDAwMDAwIDAwMDAwMDAgMTExMTExMFxuICAgIC8vIGdyZWVuICAgMDAwMDEwMCAxMDAwMDAwIDExMTExMTEgMDAwMDAwMCAxMTExMTEwXG4gICAgLy8gcmVkICAgICAwMDAwMTAwIDAwMDAwMDAgMDAwMDAwMCAxMTExMTExIDExMTExMTFcbiAgICAvLyB5ZWxsb3cgIDAwMDAxMDAgMTAwMDAwMCAxMTExMTExIDExMTExMTEgMTExMTExMVxuICAgIC8vIG1hZ2VudGEgMTEwMDEwMCAwMTExMTExIDAwMDAwMDAgMTExMTExMSAxMTExMTExXG4gICAgLy8gY3lhbiAgICAxMTAwMTAwIDExMTExMTEgMTExMTExMSAwMDAwMDAwIDExMTExMTBcbiAgICAvLyBibGFjayAgIDAwMDAxMDAgMDAwMDAwMCAwMDAwMDAwIDAwMDAwMDAgMTExMTExMFxuICAgIC8vIHdoaXRlICAgMTEwMDEwMCAxMTExMTExIDExMTExMTEgMTExMTExMSAxMTExMTExXG5cbiAgICAvKlxuICAgIHYxID0gKChiICYgMHgzKSA8PCA1KSB8IDB4NCxcbiAgICB2MiA9ICgoYiA+PiAyKSAmIDB4M2YpIHwgKGcgJiAxKSxcbiAgICB2MyA9IGcgPj4gMSxcbiAgICB2NCA9IHIgJiAweDdmLFxuICAgIHY1ID0gKHIgPj4gNykgfCAweDdlLFxuICAgICovXG4gICAgLy8gUmVtZW1iZXIgaW4gdGhlIE1JREkgd29ybGQgMHg3ZiBpcyB0aGUgc2FtZSBhcyBhIHJvdyBvZiBhbGwgMXMuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldENsaWNrSGFuZGxlcl9TZXRDb2xvckdsb2JhbEtleShjb2xvcjogc3RyaW5nLCByZWQ/OiBudW1iZXIsIGdyZWVuPzogbnVtYmVyLCBibHVlPzogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzZXRDb2xvckdsb2JhbEtleShjb2xvciwgcmVkLCBncmVlbiwgYmx1ZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNldENvbG9yR2xvYmFsS2V5KGNvbG9yOiBzdHJpbmcsIHJlZD86IG51bWJlciwgZ3JlZW4/OiBudW1iZXIsIGJsdWU/OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IFsweDEwLCAweDIwXTtcbiAgICAgICAgc3dpdGNoIChjb2xvcikge1xuICAgICAgICAgICAgY2FzZSBcInJnYlwiOlxuICAgICAgICAgICAgICAgIGxldCB2MSA9ICgoYmx1ZSAmIDB4MykgPDwgNSkgfCAweDQ7XG4gICAgICAgICAgICAgICAgbGV0IHYyID0gKChibHVlID4+IDIpICYgMHgzZikgfCAoZ3JlZW4gJiAxKTtcbiAgICAgICAgICAgICAgICBsZXQgdjMgPSBncmVlbiA+PiAxO1xuICAgICAgICAgICAgICAgIGxldCB2NCA9IHJlZCAmIDB4N2Y7XG4gICAgICAgICAgICAgICAgbGV0IHY1ID0gKHJlZCA+PiA3KSB8IDB4N2U7XG4gICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlt2MSwgdjIsIHYzLCB2NCwgdjVdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJibHVlXCI6XG4gICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDY0LCAweDNmLCAweDAwLCAweDAwLCAweDdlXSk7IC8vIGJsdWVcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJncmVlblwiOlxuICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwNCwgMHg0MCwgMHg3ZiwgMHgwMCwgMHg3ZV0pOyAvLyBncmVlblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJlZFwiOlxuICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwNCwgMHgwMCwgMHgwMCwgMHg3ZiwgMHg3Zl0pOyAvLyByZWRcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ5ZWxsb3dcIjpcbiAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDQsIDB4NDAsIDB4N2YsIDB4N2YsIDB4N2ZdKTsgLy8geWVsbG93XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibWFnZW50YVwiOlxuICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg2NCwgMHgzZiwgMHgwMCwgMHg3ZiwgMHg3Zl0pOyAvLyBtYWdlbnRhXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY3lhblwiOlxuICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg2NCwgMHg3ZiwgMHg3ZiwgMHgwMCwgMHg3ZV0pOyAvLyBjeWFuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYmxhY2tcIjpcbiAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDQsIDB4MDAsIDB4MDAsIDB4MDAsIDB4N2VdKTsgLy8gYmxhY2tcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ3aGl0ZVwiOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NjQsIDB4N2YsIDB4N2YsIDB4N2YsIDB4N2ZdKTsgLy8gd2hpdGVcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb21tYW5kLnB1c2goMHgwMyk7XG4gICAgICAgIHNlbmRDb21tYW5kVG9BbGxEZXZpY2VzKGNvbW1hbmQpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRDbGlja0hhbmRsZXJfU2V0Q29sb3JSb290S2V5KGNvbG9yOiBzdHJpbmcsIHJlZD86IG51bWJlciwgZ3JlZW4/OiBudW1iZXIsIGJsdWU/OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHNldENvbG9yUm9vdEtleShjb2xvciwgcmVkLCBncmVlbiwgYmx1ZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNldENvbG9yUm9vdEtleShjb2xvcjogc3RyaW5nLCByZWQ/OiBudW1iZXIsIGdyZWVuPzogbnVtYmVyLCBibHVlPzogbnVtYmVyKSB7XG4gICAgICAgIGxldCBjb21tYW5kID0gWzB4MTAsIDB4MzBdO1xuICAgICAgICBzd2l0Y2ggKGNvbG9yKSB7XG4gICAgICAgICAgICBjYXNlIFwicmdiXCI6XG4gICAgICAgICAgICAgICAgbGV0IHYxID0gKChibHVlICYgMHgzKSA8PCA1KSB8IDB4NDtcbiAgICAgICAgICAgICAgICBsZXQgdjIgPSAoKGJsdWUgPj4gMikgJiAweDNmKSB8IChncmVlbiAmIDEpO1xuICAgICAgICAgICAgICAgIGxldCB2MyA9IGdyZWVuID4+IDE7XG4gICAgICAgICAgICAgICAgbGV0IHY0ID0gcmVkICYgMHg3ZjtcbiAgICAgICAgICAgICAgICBsZXQgdjUgPSAocmVkID4+IDcpIHwgMHg3ZTtcbiAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uW3YxLCB2MiwgdjMsIHY0LCB2NV0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImJsdWVcIjpcbiAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NjQsIDB4M2YsIDB4MDAsIDB4MDAsIDB4N2VdKTsgLy8gYmx1ZVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImdyZWVuXCI6XG4gICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDA0LCAweDQwLCAweDdmLCAweDAwLCAweDdlXSk7IC8vIGdyZWVuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicmVkXCI6XG4gICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDA0LCAweDAwLCAweDAwLCAweDdmLCAweDdmXSk7IC8vIHJlZFxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInllbGxvd1wiOlxuICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwNCwgMHg0MCwgMHg3ZiwgMHg3ZiwgMHg3Zl0pOyAvLyB5ZWxsb3dcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtYWdlbnRhXCI6XG4gICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDY0LCAweDNmLCAweDAwLCAweDdmLCAweDdmXSk7IC8vIG1hZ2VudGFcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjeWFuXCI6XG4gICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDY0LCAweDdmLCAweDdmLCAweDAwLCAweDdlXSk7IC8vIGN5YW5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJibGFja1wiOlxuICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwNCwgMHgwMCwgMHgwMCwgMHgwMCwgMHg3ZV0pOyAvLyBibGFja1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIndoaXRlXCI6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg2NCwgMHg3ZiwgMHg3ZiwgMHg3ZiwgMHg3Zl0pOyAvLyB3aGl0ZVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbW1hbmQucHVzaCgweDAzKTtcbiAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoY29tbWFuZCk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgICAgTm90ZSB0aGF0IDB4N0YgaXMgMDExMV8xMTExIGluIGJpbmFyeS5cbiAgICAgICAgTUlESSBTeXNFeCBtZXNzYWdlcyBoYXZlIGEgYmVnaW5uaW5nIHN0YXR1cyBieXRlIGFuZCBhIGVuZGluZyBzdGF0dXMgYnl0ZS5cbiAgICAgICAgSW4gYmV0d2VlbiB0aGUgdHdvIHN0YXR1cyBieXRlcywgYW55IG51bWJlciBvZiBkYXRhIGJ5dGVzIG1heSBiZSBzZW50LiBcbiAgICAgICAgVGhlc2UgZGF0YSBieXRlcyBhbGwgcmFuZ2UgZnJvbSAwIHRvIDEyNy4gVGhlIGxlZnQgbW9zdCBiaXQgaXMgYWx3YXlzIDAuXG4gICAgICAgIFxuICAgICAgICAxMCA0MCAwMCA3RiA3RiA3RiA3RiAwMyAvLyAtNFxuICAgICAgICAxMCA0MCAyMCA3RiA3RiA3RiA3RiAwMyAvLyAtM1xuICAgICAgICAxMCA0MCA0MCA3RiA3RiA3RiA3RiAwMyAvLyAtMlxuICAgICAgICAxMCA0MCA2MCA3RiA3RiA3RiA3RiAwMyAvLyAtMVxuICAgICAgICAxMCA0MCAwMCAwMCAwMCAwMCAwMCAwMCAvLyAwXG4gICAgICAgIDEwIDQwIDIwIDAwIDAwIDAwIDAwIDAwIC8vIDFcbiAgICAgICAgMTAgNDAgNDAgMDAgMDAgMDAgMDAgMDAgLy8gMlxuICAgICAgICAxMCA0MCA2MCAwMSAwMCAwMCAwMCAwMCAvLyAzXG4gICAgICAgIDEwIDQwIDAwIDAxIDAwIDAwIDAwIDAwIC8vIDRcbiAgICAgICAgMTAgNDAgMjAgMDEgMDAgMDAgMDAgMDAgLy8gNVxuICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldENsaWNrSGFuZGxlcl9TZXRPY3RhdmUob2N0YXZlTnVtYmVyOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2V0IE9jdGF2ZSBPZmZzZXQgdG8gXCIgKyBvY3RhdmVOdW1iZXIpO1xuICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IFsweDEwLCAweDQwXTtcbiAgICAgICAgICAgIHN3aXRjaCAob2N0YXZlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgyMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg0MCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg2MCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgyMCwgMHgwMSwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC0xOlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NjAsIDB4N2YsIDB4N2YsIDB4N2YsIDB4N2YsIDB4MDNdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAtMjpcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKC4uLlsweDQwLCAweDdmLCAweDdmLCAweDdmLCAweDdmLCAweDAzXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLTM6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgyMCwgMHg3ZiwgMHg3ZiwgMHg3ZiwgMHg3ZiwgMHgwM10pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC00OlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MDAsIDB4N2YsIDB4N2YsIDB4N2YsIDB4N2YsIDB4MDNdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZW5kQ29tbWFuZFRvQWxsRGV2aWNlcyhjb21tYW5kKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gZ2V0Q2xpY2tIYW5kbGVyX1BpdGNoQmVuZChtb2RlTnVtYmVyLCBlbmFibGVGbGFnKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNldCBQaXRjaCBCZW5kIGZvciBNb2RlIFwiICsgbW9kZU51bWJlciArIFwiIHRvIFwiICsgZW5hYmxlRmxhZyk7XG4gICAgICAgICAgICBjb25zdCBjb21tYW5kID0gWzB4MTBdO1xuICAgICAgICAgICAgc3dpdGNoIChtb2RlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVGbGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NjAsIDB4MmNdKTsgLy8gTW9kZSAxIFBpdGNoIEJlbmQgT05cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg2MCwgMHgwY10pOyAvLyBNb2RlIDEgUGl0Y2ggQmVuZCBPRkZcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVGbGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NTAsIDB4MmRdKTsgLy8gTW9kZSAxIFBpdGNoIEJlbmQgT05cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg1MCwgMHgwZF0pOyAvLyBNb2RlIDEgUGl0Y2ggQmVuZCBPRkZcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVGbGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4NDAsIDB4MmVdKTsgLy8gTW9kZSAxIFBpdGNoIEJlbmQgT05cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHg0MCwgMHgwZV0pOyAvLyBNb2RlIDEgUGl0Y2ggQmVuZCBPRkZcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVGbGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnB1c2goLi4uWzB4MzAsIDB4MmZdKTsgLy8gTW9kZSAxIFBpdGNoIEJlbmQgT05cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgzMCwgMHgwZl0pOyAvLyBNb2RlIDEgUGl0Y2ggQmVuZCBPRkZcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbW1hbmQucHVzaCguLi5bMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoY29tbWFuZCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gUk9MSSBEYXNoYm9hcmQga2VlcHMgc2VuZGluZyB0aGlzIG1lc3NhZ2UgZXZlcnkgfjQwMG1zLlxuICAgIC8vIE1heWJlIGl0J3MganVzdCBhIHBpbmcgdG8gc2VlIHRoYXQgaXQncyBzdGlsbCBjb25uZWN0ZWQuXG4gICAgLy8gSXQncyBERUZJTklURUxZIE5PVCBCQVRURVJZIExFVkVMLCBiZWNhdXNlIExVTUkgS2V5cyByZXNwb25kcyB3aXRoIHRoZSBzYW1lIG1lc3NhZ2UgZGVzcGl0ZSB2YXJ5aW5nIGJhdHRlcnkgbGV2ZWxzLlxuICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2p1Y2UtZnJhbWV3b3JrL0pVQ0UvYmxvYi9tYXN0ZXIvbW9kdWxlcy9qdWNlX2Jsb2Nrc19iYXNpY3MvcHJvdG9jb2wvanVjZV9CbG9ja3NQcm90b2NvbERlZmluaXRpb25zLmhcbiAgICAvL1xuICAgIC8vICAgICBkZXZpY2VDb21tYW5kTWVzc2FnZSAgICA9IDB4MDEsXG4gICAgLy8gICAgIHBpbmcgICAgICAgICAgICAgICAgICAgID0gMHgwMyxcbiAgICAvL1xuICAgIC8vIExVTUkgcmVzcG9uZHMgOCB0aW1lcyB3aXRoOlxuICAgIC8vICAgRjAgMDAgMjEgMTAgNzcgNDcgMDAgMDAgMDAgMDAgMjAgMDAgMDAgNkQgRjdcbiAgICBleHBvcnQgZnVuY3Rpb24gZ2V0Q2xpY2tIYW5kbGVyX1BpbmdEZXZpY2UoKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb21tYW5kID0gWzB4MDEsIDB4MDMsIDB4MDBdO1xuICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoY29tbWFuZCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJ1bkNvbW1hbmRfMDAxKCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIC8vIEhpZ2hsaWdodCBHIC4uLiBEXG4gICAgICAgICAgICAvLyBUaGUgYmVsb3cgd29ya3MgT05MWSBXSEVOIFJPTEkgU1RVRElPIElTIFRIRSBGUk9OVCBBUFAgT04gTUFDT1MuXG4gICAgICAgICAgICAvLyBUaHVzLCB3ZSBhZGQgYSA1IHNlY29uZCBkZWxheSBhZnRlciBjbGlja2luZyB0aGlzIGJ1dHRvbiBzbyB3ZSBoYXZlIHRpbWUgdG8gc3dpdGNoIGFwcHMhIDotfVxuICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoWzB4MDMsIDB4MDIsIDB4MDAsIDB4MDAsIDB4MDAsIDB4NzAsIDB4MDksIDB4MDAsIDB4MDAsIDB4MDAsIDB4N2UsIDB4N2YsIDB4N2YsIDB4MGYsIDB4MDBdKTtcbiAgICAgICAgICAgIHNlbmRDb21tYW5kVG9BbGxEZXZpY2VzKFsweDAzLCAweDAyLCAweDAwLCAweDAwLCAweDAwLCAweDYwLCAweDBhLCAweDAwLCAweDAwLCAweDAwLCAweDQwLCAweDQzLCAweDY4LCAweDBiLCAweDAwXSk7XG4gICAgICAgICAgICBzZW5kQ29tbWFuZFRvQWxsRGV2aWNlcyhbMHgwMywgMHgwNCwgMHgwMCwgMHgwMCwgMHgwMCwgMHg3MCwgMHgwOSwgMHgwMCwgMHgwMCwgMHgwMCwgMHg3ZSwgMHg3ZiwgMHg3ZiwgMHgwZiwgMHgwMF0pO1xuICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoWzB4MDMsIDB4MDQsIDB4MDAsIDB4MDAsIDB4MDAsIDB4NjAsIDB4MGEsIDB4MDAsIDB4MDAsIDB4MDAsIDB4NDAsIDB4NDMsIDB4NjgsIDB4MGIsIDB4MDBdKTtcbiAgICAgICAgfSwgNTAwMCk7XG5cbiAgICAgICAgLypcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIEhpZ2hsaWdodCBDIEUgRyAuLi4gRlxuICAgICAgICAgICAgICAgIC8vIFRoZSBiZWxvdyB3b3JrcyBPTkxZIFdIRU4gUk9MSSBTVFVESU8gSVMgVEhFIEZST05UIEFQUCBPTiBNQUNPUy5cbiAgICAgICAgICAgICAgICAvLyBUaHVzLCB3ZSBhZGQgYSA1IHNlY29uZCBkZWxheSBhZnRlciBjbGlja2luZyB0aGlzIGJ1dHRvbiBzbyB3ZSBoYXZlIHRpbWUgdG8gc3dpdGNoIGFwcHMhIDotfVxuICAgICAgICAgICAgICAgIHNlbmRDb21tYW5kVG9BbGxEZXZpY2VzKFsweDAzLCAweDAyLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDA5LCAweDAwLCAweDAwLCAweDAwLCAweDdlLCAweDdmLCAweDdmLCAweDBmLCAweDAwXSk7XG4gICAgICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoWzB4MDMsIDB4MDIsIDB4MDAsIDB4MDAsIDB4MDAsIDB4NDAsIDB4MDksIDB4MDAsIDB4MDAsIDB4MDAsIDB4NDAsIDB4NDMsIDB4NjgsIDB4MGIsIDB4MDBdKTtcbiAgICAgICAgICAgICAgICBzZW5kQ29tbWFuZFRvQWxsRGV2aWNlcyhbMHgwMywgMHgwMiwgMHgwMCwgMHgwMCwgMHgwMCwgMHg3MCwgMHgwOSwgMHgwMCwgMHgwMCwgMHgwMCwgMHg0MCwgMHg0MywgMHg2OCwgMHgwYiwgMHgwMF0pO1xuICAgICAgICAgICAgICAgIHNlbmRDb21tYW5kVG9BbGxEZXZpY2VzKFsweDAzLCAweDAyLCAweDAwLCAweDAwLCAweDAwLCAweDEwLCAweDBiLCAweDAwLCAweDAwLCAweDAwLCAweDQwLCAweDQzLCAweDY4LCAweDBiLCAweDAwXSk7XG4gICAgICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoWzB4MDMsIDB4MDQsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDksIDB4MDAsIDB4MDAsIDB4MDAsIDB4N2UsIDB4N2YsIDB4N2YsIDB4MGYsIDB4MDBdKTtcbiAgICAgICAgICAgICAgICBzZW5kQ29tbWFuZFRvQWxsRGV2aWNlcyhbMHgwMywgMHgwNCwgMHgwMCwgMHgwMCwgMHgwMCwgMHg0MCwgMHgwOSwgMHgwMCwgMHgwMCwgMHgwMCwgMHg0MCwgMHg0MywgMHg2OCwgMHgwYiwgMHgwMF0pO1xuICAgICAgICAgICAgICAgIHNlbmRDb21tYW5kVG9BbGxEZXZpY2VzKFsweDAzLCAweDA0LCAweDAwLCAweDAwLCAweDAwLCAweDcwLCAweDA5LCAweDAwLCAweDAwLCAweDAwLCAweDQwLCAweDQzLCAweDY4LCAweDBiLCAweDAwXSk7XG4gICAgICAgICAgICAgICAgc2VuZENvbW1hbmRUb0FsbERldmljZXMoWzB4MDMsIDB4MDQsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MTAsIDB4MGIsIDB4MDAsIDB4MDAsIDB4MDAsIDB4NDAsIDB4NDMsIDB4NjgsIDB4MGIsIDB4MDBdKTtcbiAgICAgICAgICAgIH0sIDUwMDApO1xuICAgICAgICAgICAgKi9cbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gcnVuQ29tbWFuZF8wMDIoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicnVuQ29tbWFuZF8wMDJcIik7XG5cbiAgICAgICAgLy8gY29uc3QgY29tbWFuZCA9IFsweDc3LCAweDAwLCAweDAxLCAweDAxLCAweDAwLCAweDVkXTtcbiAgICAgICAgLy8gPz8gTFVNSSByZXNwb25kcyB3aXRoOiBmMDAwIDIxMTAgNzc0NyAwMDAwIDAwMDAgMTAxMCAyMDAwIDAwNjYgMjUyMSAyMjFjIDVhNjEgNmI2MCA1YzVhIDY1MjUgNjUxYiA2YTAzIDRjNjEgNDEyMSA0YzZiIDRjMmIgMGM2MCA2MTIxIDAwMDAgNzRmN1xuXG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBbMHg3NywgMHgwNywgMHgxMCwgMHgwMiwgMHg0NF07XG4gICAgICAgIC8vID8/IExVTUkgcmVzcG9uZHMgd2l0aCA3IG1lc3NhZ2VzISEhXG4gICAgICAgIC8qXG4gICAgICAgICAgICBST0xJIDk3IGJ5dGVzXHRGMCAwMCAyMSAxMCA3NyA0NyAwMCAwMCAwMCAwMCAwMCAxMyAzMSA0OCA0MCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMiAwMCAwMCAwMCAwMCA0MyAwNiA0MOKAplxuICAgICAgICAgICAgUk9MSSA5NSBieXRlc1x0RjAgMDAgMjEgMTAgNzcgNDcgMDAgMDAgMDAgMDAgMDAgNDMgNTAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDggMDAgMDAgMDAgMDAgMTggMjQgMDEgMTAgMDDigKZcbiAgICAgICAgICAgIFJPTEkgOTUgYnl0ZXNcdEYwIDAwIDIxIDEwIDc3IDQ3IDAwIDAwIDAwIDAwIDAwIDQzIDFFIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDA4IDAwIDAwIDAwIDAwIDE4IDA0IDYyIDFGIDAw4oCmXG4gICAgICAgICAgICBST0xJIDk1IGJ5dGVzXHRGMCAwMCAyMSAxMCA3NyA0NyAwMCAwMCAwMCAwMCAwMCA0MyA0NCAwMCAwMCA3MCA3RiAzRiAwMCAwMCAwMCAwMCA3QyA3RiA3RiA3RiAzRiAxOCAzNCA2NCAzRiAwMOKAplxuICAgICAgICAgICAgUk9MSSA5NSBieXRlc1x0RjAgMDAgMjEgMTAgNzcgNDcgMDAgMDAgMDAgMDAgMDAgNDMgNDggMDUgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMjAgMDAgMDAgMDAgMDAgMTggNjQgMkMgMDAgMDDigKZcbiAgICAgICAgICAgIFJPTEkgOTUgYnl0ZXNcdEYwIDAwIDIxIDEwIDc3IDQ3IDAwIDAwIDAwIDAwIDAwIDQzIDVDIDA1IDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDA4IDAwIDAwIDAwIDAwIDE4IDI0IDRFIDAwIDAw4oCmXG4gICAgICAgICAgICBST0xJIDQ2IGJ5dGVzXHRGMCAwMCAyMSAxMCA3NyA0NyAwMCAwMCAwMCAwMCAwMCA0MyA3NiAwNSAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwOCAwMCAwMCAwMCAwMCAxOCA0NCAwRiAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCA0MCAwMCAgMDAgMDAgMDAgMDAgNUIgRjdcbiAgICAgICAgKi9cbiAgICAgICAgc2VuZFN5c0V4VG9BbGxEZXZpY2VzKGNvbW1hbmQpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBhdHRhY2hMb2dPdXRwdXQobG9nSGFuZGxlcikge1xuICAgICAgICBsb2dPdXRwdXQgPSBsb2dIYW5kbGVyO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBzdGFydEZha2VEZXZpY2UoKSB7XG4gICAgICAgIC8vIFNlbmQgb3V0IFN5c0V4IG1lc3NhZ2VzIHRvIGZha2Ugb3V0IFJPTEkgQ29ubmVjdCAvIERhc2hib2FyZCAvIFN0dWRpbz8/P1xuICAgICAgICAvLyAjVE9ETzogSXMgdGhpcyBwb3NzaWJsZT8/Pz9cbiAgICAgICAgLy8gVEhJUyBQUk9CQUJMWSBXT04nVCBXT1JLIFdJVEhPVVQgQSBOQVRJVkUgTUFDT1MgQVBQIFRIQVQgUFJFVEVORFMgVE8gQkUgQSBMVU1JIEtFWVMuXG4gICAgICAgIC8vIHNlbmRTeXNFeFRvQWxsRGV2aWNlcyhbIC4uLiBdKTtcbiAgICAgICAgLy8gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAvLyAgICAgc2VuZFN5c0V4VG9BbGxEZXZpY2VzKFsweDc3LCAweDQ3LCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDIwLCAweDAwLCAweDAwLCAweDZkXSk7IC8vIEFja25vd2xlZGdlIHRoZSBQSU5HXG4gICAgICAgIC8vIH0sIDQwMCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMVU1JS2V5cztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./apps/shared/midi/LUMIKeys.ts\n");

/***/ })

})