webpackHotUpdate_N_E("pages/piano/v2",{

/***/ "./apps/author/piano/v2/App.ts":
/*!*************************************!*\
  !*** ./apps/author/piano/v2/App.ts ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var apps_author_piano_shared_SharpsAndFlatsManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! apps/author/piano/shared/SharpsAndFlatsManager */ \"./apps/author/piano/shared/SharpsAndFlatsManager.ts\");\n/* harmony import */ var apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! apps/author/piano/v2/Highlight */ \"./apps/author/piano/v2/Highlight.ts\");\n/* harmony import */ var apps_author_piano_v2_Music__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! apps/author/piano/v2/Music */ \"./apps/author/piano/v2/Music.ts\");\n/* harmony import */ var apps_shared_Constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! apps/shared/Constants */ \"./apps/shared/Constants.ts\");\n/* harmony import */ var apps_shared_midi_MIDIFileIO__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! apps/shared/midi/MIDIFileIO */ \"./apps/shared/midi/MIDIFileIO.ts\");\n/* harmony import */ var apps_shared_midi_MIDIUtils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! apps/shared/midi/MIDIUtils */ \"./apps/shared/midi/MIDIUtils.ts\");\n/* harmony import */ var apps_shared_redux_Actions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! apps/shared/redux/Actions */ \"./apps/shared/redux/Actions.ts\");\n/* harmony import */ var apps_shared_sound_Instrument__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! apps/shared/sound/Instrument */ \"./apps/shared/sound/Instrument.ts\");\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash.throttle */ \"./node_modules/lodash.throttle/index.js\");\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_11__);\n\n\n\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\nvar MIDIEvents = __webpack_require__(/*! midievents */ \"./node_modules/midievents/src/MIDIEvents.js\");\n\nvar Keys = apps_shared_Constants__WEBPACK_IMPORTED_MODULE_6__[\"default\"].StoreKeys;\nvar TIME_THRESHOLD_FOR_GROUPING_NEARBY_NOTES = 0; // Adjust this for parsing MIDI recordings of piano performances by humans (i.e., imprecise timing).\n// Dispatch events and send data to the global store.\n\nvar dispatch = null; /////////////////////////////////////////////////////////////////////////////////\n// declare types that are defined in 3rd party libraries\n// TODO\n/////////////////////////////////////////////////////////////////////////////////\n\nvar TIME_BETWEEN_NOTEGROUPS = 250;\nvar octaveOffset = 0; // piano key numbers % 12\n\nvar blackKeys = [2, -1, 5, 7, -1, 10, 0]; // -1 is for the spaces where there are no black keys\n\nvar whiteKeys = [1, 3, 4, 6, 8, 9, 11];\nvar noteLabels = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"];\nvar sharpOrFlatModifier = 0;\nvar piano = null;\nvar Keyboard;\n\n(function (_Keyboard) {\n  var labels = _Keyboard.labels = [\"z\", \"x\", // G A B\n  \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", // C D E F G A B\n  \"/\", \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", // C D E F G A B\n  \"j\", \"k\", \"l\", \";\", \"q\", \"w\", \"e\", // C D E F G A B\n  \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", // C D E F G A B\n  \"[\", \"]\", \"\\\\\", \"1\", \"2\", \"3\", \"4\", // C D E F G A B\n  \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"-\", // C D E F G A B\n  \"=\" // C\n  ];\n  // TODO: Extract \"z\" and \"keyCodeToPianoKeyNumber\" give it a better name!\n  // #TODO: #XKWIALDZA FIGURE THIS OUT\n  // The goal is to match the Apple GarageBand Musical Typing key mapping.\n  // Type A and K should invoke the piano key \"C\".\n  // Z should be one octave lower than A. Comma should be the same as A.\n  // Q should be the same as K. I should be one octave higher than K.\n  // Allowing for a customizable offset means that when we change key signatures, we can change the offset by a couple of semitones.\n  // Anyways... figure this out yo!\n  var z = -2;\n  var keyCodeToPianoKeyNumber = _Keyboard.keyCodeToPianoKeyNumber = {\n    90: 13 + z,\n    // z => A\n    88: 15 + z,\n    // x => B\n    //\n    67: 16 + z,\n    // c => C2\n    86: 18 + z,\n    // v => D\n    66: 20 + z,\n    // b => E\n    78: 21 + z,\n    // n => F\n    77: 23 + z,\n    // m => G\n    188: 25 + z,\n    // , => A\n    190: 27 + z,\n    // . => B\n    //\n    191: 28 + z,\n    // / => C3\n    65: 30 + z,\n    // a => D\n    83: 32 + z,\n    // s => E\n    68: 33 + z,\n    // d => F\n    70: 35 + z,\n    // f => G\n    71: 37 + z,\n    // g => A\n    72: 39 + z,\n    // h => B\n    //\n    74: 40 + z,\n    // j => C4 (Middle C)\n    75: 42 + z,\n    // k => D\n    76: 44 + z,\n    // l => E\n    186: 45 + z,\n    // ; => F in Chrome\n    59: 45 + z,\n    // ; => F in Firefox\n    222: 47 + z,\n    // ' => G\n    81: 47 + z,\n    // q => G\n    87: 49 + z,\n    // w => A\n    69: 51 + z,\n    // e => B\n    //\n    82: 52 + z,\n    // r => C5\n    84: 54 + z,\n    // t => D\n    89: 56 + z,\n    // y => E\n    85: 57 + z,\n    // u => F\n    73: 59 + z,\n    // i => G\n    79: 61 + z,\n    // o => A\n    80: 63 + z,\n    // p => B\n    //\n    219: 64 + z,\n    // [ => C6\n    221: 66 + z,\n    // ] => D\n    220: 68 + z,\n    // \\ => E\n    49: 69 + z,\n    // 1 => F\n    50: 71 + z,\n    // 2 => G\n    51: 73 + z,\n    // 3 => A\n    52: 75 + z,\n    // 4 => B\n    //\n    53: 76 + z,\n    // 5 => C7\n    54: 78 + z,\n    // 6 => D\n    55: 80 + z,\n    // 7 => E\n    56: 81 + z,\n    // 8 => F\n    57: 83 + z,\n    // 9 => G\n    48: 85 + z,\n    // 0 => A\n    189: 87 + z,\n    // - => B\n    //\n    187: 88 + z // = => C8\n\n  };\n})(Keyboard || (Keyboard = {})); // #TODO Use the webmidi module instead!\n// #MIDIAWEIIZAI\n\n\nvar MIDIPianoInput;\n\n(function (_MIDIPianoInput) {\n  var numNotesPressed = 0;\n\n  function setup() {\n    if (navigator[\"requestMIDIAccess\"]) {\n      navigator[\"requestMIDIAccess\"]({\n        sysex: true\n      }).then(onMIDISuccess, onMIDIFailure);\n    } else {\n      alert(\"No MIDI support in your browser.\");\n    }\n  }\n\n  _MIDIPianoInput.setup = setup;\n\n  function onMIDISuccess(midiAccess) {\n    console.log(\"MIDI SUCCESS\");\n    var midi = midiAccess;\n    console.dir(midi);\n    var inputs = midi.inputs.values();\n    var outputs = midi.outputs.values();\n\n    var _iterator = _createForOfIteratorHelper(inputs),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var input = _step.value;\n        console.log(input);\n        input.onmidimessage = onMIDIMessage;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  function onMIDIFailure(error) {\n    console.log(\"No access to MIDI devices or your browser doesn't support WebMIDI API.\" + error);\n  }\n\n  function onMIDIMessage(message) {\n    console.log(\"onMIDIMessage\");\n    var data = message.data; // this gives us our [command/channel, note, velocity] data.\n\n    var cmd = data[0] >> 4;\n    var channel = data[0] & 0xf; // Rightmost 4 bits.\n\n    var type = data[0] & 0xf0; // 4 bits in the second right-most position.\n\n    var note = data[1];\n    var velocity = data[2];\n    var pianoKey = note - 20;\n\n    switch (type) {\n      case 144:\n        // note on\n        console.log(\"piano key down: \" + pianoKey + \" velocity: \" + velocity);\n        App.playOneNote(pianoKey, false); // the second parameter (set to false) will bypass any sharp/flat modifiers.\n\n        numNotesPressed++;\n\n        if (numNotesPressed > 1) {\n          Song.mergeLastTwoGroups();\n        } // #TODO: #RESETACQWIEIFK If we press down the B, C, C# at the same time, we reset the text field to empty!!!!\n\n\n        break;\n\n      case 128:\n        // note off\n        // console.log(\"piano key up: \" + pianoKey);\n        numNotesPressed--;\n        break;\n\n      case 224:\n        // pitch wheel\n        console.log(\"pitch wheel\"); // data[1] and data[2] indicate the amount of pitch bend.\n\n        break;\n\n      default:\n        // ignore for now\n        console.log(\"MIDI data\", data);\n        console.log(\"cmd: \".concat(cmd, \"  channel: \").concat(channel, \"  type: \").concat(type, \"  note: \").concat(note, \"  velocity: \").concat(velocity));\n        break;\n    }\n  }\n})(MIDIPianoInput || (MIDIPianoInput = {})); //////////////////////////////////////////////////////////////////////\n// resets the key offset\n\n\nfunction resetOffset() {\n  console.log(\"Reset Offsets\");\n  octaveOffset = 0;\n  UI.drawPiano();\n}\n\nfunction resetEverything() {\n  console.log(\"Reset Everything!\");\n  octaveOffset = 0;\n  UI.Tracks.setup(1);\n  saveAndShowData();\n  Playback.stop();\n}\n\nfunction saveAndShowData() {\n  LocalStorage.saveCheckBoxes();\n  LocalStorage.saveTracks();\n  UI.showNoteGroupsForTracks();\n  UI.drawPiano();\n} ////////////////////////////////////////////////////////////\n\n\nvar LocalStorage;\n\n(function (_LocalStorage) {\n  function load() {\n    loadTracks();\n    loadVersionToggle();\n  }\n\n  _LocalStorage.load = load;\n\n  function loadVersionToggle() {\n    if (!localStorage.getItem(\"song_version\")) {\n      localStorage.setItem(\"song_version\", \"1\");\n    }\n\n    var songVersion = parseInt(localStorage.getItem(\"song_version\"));\n\n    if (songVersion < apps_shared_Constants__WEBPACK_IMPORTED_MODULE_6__[\"default\"].MIN_SONG_VERSION || songVersion > apps_shared_Constants__WEBPACK_IMPORTED_MODULE_6__[\"default\"].MAX_SONG_VERSION) {\n      songVersion = 1;\n    }\n\n    var payload = {};\n    payload[Keys.SONG_VERSION] = songVersion;\n    dispatch({\n      type: apps_shared_redux_Actions__WEBPACK_IMPORTED_MODULE_9__[\"default\"].Toggle.onSongVersionFormatChanged,\n      payload: payload\n    });\n  }\n\n  function loadTracks() {\n    try {\n      var savedTracks = JSON.parse(localStorage.getItem(\"tracks\")); // can throw a SyntaxError\n\n      var numTracks = savedTracks.length;\n      UI.Tracks.setup(numTracks);\n\n      for (var t = 0; t < numTracks; t++) {\n        var savedTrack = savedTracks[t];\n\n        var _iterator2 = _createForOfIteratorHelper(savedTrack),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var noteGroupString = _step2.value;\n            var noteGroup = new apps_author_piano_v2_Music__WEBPACK_IMPORTED_MODULE_5__[\"NoteGroup\"](noteGroupString);\n            Song.addNoteGroupToTrack(noteGroup, t);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    } catch (e) {\n      UI.Tracks.setup(1);\n    }\n  }\n\n  function loadCheckboxes() {\n    try {\n      var savedCheckboxState = JSON.parse(localStorage.getItem(\"checkboxes\")); // can throw a SyntaxError\n\n      if (Array.isArray(savedCheckboxState) && savedCheckboxState.length === Song.getNumTracks()) {\n        UI.Tracks.setCheckedStateForAllTracks(savedCheckboxState);\n      } else {\n        throw \"OOPS\";\n      }\n    } catch (e) {\n      UI.Tracks.checkAllNonEmptyTracks();\n      LocalStorage.saveCheckBoxes();\n    }\n  }\n\n  function saveCheckBoxes() {\n    localStorage.setItem(\"checkboxes\", JSON.stringify(UI.Tracks.getCheckedStateForAllTracks()));\n  }\n\n  _LocalStorage.saveCheckBoxes = saveCheckBoxes;\n\n  function saveTracks() {\n    var tracksJSON = Song.getTracksAsJSON();\n    localStorage.setItem(\"tracks\", tracksJSON);\n  }\n\n  _LocalStorage.saveTracks = saveTracks;\n\n  function saveVersionToggle(songVersion) {\n    localStorage.setItem(\"song_version\", songVersion + \"\");\n  }\n\n  _LocalStorage.saveVersionToggle = saveVersionToggle;\n})(LocalStorage || (LocalStorage = {})); /////////////////////////////////////////////////////////////////////////////////\n\n\nvar FakeWorkerClock = /*#__PURE__*/function () {\n  function FakeWorkerClock() {\n    Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, FakeWorkerClock);\n\n    Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"isRunning\", false);\n\n    Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"interval\", null);\n\n    Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"delay\", 10);\n\n    Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"onmessage\", void 0);\n  }\n\n  Object(_Users_ronyeh_Code_S_Web_squarepoet_github_io_src_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(FakeWorkerClock, [{\n    key: \"postMessage\",\n    value: function postMessage(msg) {\n      var self = this;\n      console.log(self);\n\n      switch (msg) {\n        case \"start\":\n          console.log(\"Piano Clock Worker Started\");\n\n          if (!self.isRunning) {\n            self.isRunning = true;\n            self.interval = setInterval(function () {\n              if (self.onmessage) {\n                self.onmessage(\"tick\");\n              }\n            }, self.delay);\n          }\n\n          break;\n\n        case \"stop\":\n        default:\n          console.log(\"Piano Clock Worker Stopped\");\n          clearInterval(self.interval);\n          self.isRunning = false;\n          break;\n      }\n    }\n  }]);\n\n  return FakeWorkerClock;\n}(); ///////////////////////////////////////////////////////////////////////////\n\n\nvar Playback;\n\n(function (_Playback) {\n  // All times are in milliseconds.\n  var currSongTime = 0; // What time is our playhead pointing to?\n\n  var baseSongTime = 0; // What time did our playhead point to when we started or resumed the song?\n\n  var clockStartTime = 0;\n  var clock = new FakeWorkerClock(); // let clock = new Worker(\"./clock.worker.js\", { type: \"module\" });\n\n  var clockIsTicking = false;\n\n  clock.onmessage = function (e) {\n    playNextEvents(performance.now());\n  };\n\n  var currNoteGroupNumber = 0;\n  var isPaused = false;\n  var nextEventPlayTime = 0;\n\n  function isPlaying() {\n    return clockIsTicking;\n  }\n\n  _Playback.isPlaying = isPlaying;\n\n  function play() {\n    console.log(\"PLAY\");\n\n    if (isPaused) {\n      baseSongTime = currSongTime;\n    } else {\n      if (isPlaying()) {\n        stop();\n      } // Start the MIDI playback.\n\n\n      var _noteGroupsToPlay = Song.getNoteGroupsFromTracks();\n\n      if (_noteGroupsToPlay.length === 0) {\n        Playback.stop();\n        return; // DONE!\n      }\n\n      currNoteGroupNumber = 0;\n      currSongTime = 0;\n      baseSongTime = 0;\n      determinePlayTimeForNextEvent();\n    }\n\n    isPaused = false;\n    clockStartTime = performance.now();\n    clock.postMessage(\"start\");\n    clockIsTicking = true;\n  }\n\n  _Playback.play = play;\n\n  function pause() {\n    stopTheClock();\n    isPaused = true; // Next time, continue from where we left off.\n  }\n\n  _Playback.pause = pause;\n\n  function togglePlayPause() {\n    if (isPlaying()) {\n      pause();\n    } else {\n      play();\n    }\n  }\n\n  _Playback.togglePlayPause = togglePlayPause;\n\n  function stop() {\n    stopTheClock();\n    currNoteGroupNumber = 0;\n  }\n\n  _Playback.stop = stop;\n\n  function stopTheClock() {\n    if (isPlaying()) {\n      clock.postMessage(\"stop\");\n      clockIsTicking = false;\n    }\n  } // Will be called every ~16.67ms if your display runs at 60 FPS.\n\n\n  function playNextEvents(currTime) {\n    var noteGroupsToPlay = Song.getNoteGroupsFromTracks(); // Have we reached the end of the song?\n\n    if (currNoteGroupNumber >= noteGroupsToPlay.length) {\n      Playback.stop();\n      return; // DONE!\n    }\n\n    currSongTime = currTime - clockStartTime + baseSongTime;\n\n    while (currSongTime >= nextEventPlayTime) {\n      // Inspect the next event\n      var _noteGroup = noteGroupsToPlay[currNoteGroupNumber];\n      apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].setTrackAndNoteGroup(_noteGroup.trackNumber, _noteGroup.noteNumber);\n      playCurrentNoteGroup();\n      currNoteGroupNumber++; // advance\n      // Have we reached the end of the song?\n\n      if (currNoteGroupNumber >= noteGroupsToPlay.length) {\n        Playback.stop();\n        return; // DONE!\n      } else {\n        determinePlayTimeForNextEvent();\n      }\n    }\n  }\n\n  function determinePlayTimeForNextEvent() {\n    var noteGroupsToPlay = Song.getNoteGroupsFromTracks();\n    nextEventPlayTime = noteGroupsToPlay[currNoteGroupNumber].playTimeMillis;\n\n    if (nextEventPlayTime === -1) {\n      nextEventPlayTime = currSongTime + TIME_BETWEEN_NOTEGROUPS; // If the playTime isn't specified, we play the next note every 200ms!\n    }\n  } /////////////////////////////////////////////////////////////////////////////////\n  // Manual Playback of the song or individual tracks.\n\n\n  function validateCurrNoteGroupNumber() {\n    var noteGroupsToPlay = Song.getNoteGroupsFromTracks();\n\n    if (currNoteGroupNumber >= noteGroupsToPlay.length) {\n      currNoteGroupNumber = noteGroupsToPlay.length - 1;\n    } else if (currNoteGroupNumber < 0) {\n      currNoteGroupNumber = 0;\n    }\n  }\n\n  var playNoteAndGoBackwardInTheSong = _Playback.playNoteAndGoBackwardInTheSong = lodash_throttle__WEBPACK_IMPORTED_MODULE_11___default()(function () {\n    playNoteAndAdvanceInDirection(-1);\n  }, 150\n  /* ms */\n  );\n  var playNoteAndGoForwardInTheSong = _Playback.playNoteAndGoForwardInTheSong = lodash_throttle__WEBPACK_IMPORTED_MODULE_11___default()(function () {\n    playNoteAndAdvanceInDirection(+1);\n  }, 150\n  /* ms */\n  );\n\n  function playNoteAndAdvanceInDirection(direction) {\n    var noteGroupsToPlay = Song.getNoteGroupsFromTracks();\n\n    if (noteGroupsToPlay.length === 0) {\n      return;\n    }\n\n    validateCurrNoteGroupNumber();\n    var noteGroup = noteGroupsToPlay[currNoteGroupNumber];\n    apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].setTrackAndNoteGroup(noteGroup.trackNumber, noteGroup.noteNumber);\n    playCurrentNoteGroup();\n    currNoteGroupNumber += direction;\n    validateCurrNoteGroupNumber();\n  }\n\n  function playCurrentNoteGroup() {\n    var t = apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getCurrentTrackNumber();\n    var n = apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getCurrentNoteGroupNumber();\n    var noteGroup = Song.getNoteGroupFromTrack(n, t);\n\n    if (!noteGroup) {\n      return;\n    }\n\n    var _iterator3 = _createForOfIteratorHelper(noteGroup.notes),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _note = _step3.value;\n        App.playPianoNote(apps_shared_midi_MIDIUtils__WEBPACK_IMPORTED_MODULE_8__[\"default\"].m2p(_note.midiNote), _note.velocity);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    var payload = {};\n    payload[Keys.PLAYED_NOTEGROUP_ID] = Song.getNoteGroupID(t, n);\n    dispatch({\n      type: apps_shared_redux_Actions__WEBPACK_IMPORTED_MODULE_9__[\"default\"].Song.onPlayNoteGroup,\n      payload: payload\n    });\n  }\n\n  var playAndGoBackwardOnCurrentTrack = _Playback.playAndGoBackwardOnCurrentTrack = lodash_throttle__WEBPACK_IMPORTED_MODULE_11___default()(function () {\n    playCurrentNoteGroup();\n    apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].prevNoteGroup();\n  }, 150\n  /* ms */\n  );\n  var playAndGoForwardOnCurrentTrack = _Playback.playAndGoForwardOnCurrentTrack = lodash_throttle__WEBPACK_IMPORTED_MODULE_11___default()(function () {\n    playCurrentNoteGroup();\n    apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].nextNoteGroup();\n  }, 150\n  /* ms */\n  );\n})(Playback || (Playback = {}));\n\nvar UI;\n\n(function (_UI) {\n  function setupCopyHandler() {\n    document.querySelector(\"html\").addEventListener(\"copy\", function (e) {\n      e.preventDefault();\n      console.log(\"COPY\");\n\n      if (e.clipboardData) {\n        var text = UI.Tracks.getTextFileFromTracks();\n        e.clipboardData.setData(\"text/plain\", text);\n      }\n    });\n    document.querySelector(\"html\").addEventListener(\"cut\", function (e) {\n      e.preventDefault();\n      console.log(\"CUT\");\n\n      if (e.clipboardData) {\n        var text = UI.Tracks.getTextFileFromTracks();\n        e.clipboardData.setData(\"text/plain\", text);\n      }\n\n      resetEverything(); // Set the text fields to empty strings.\n    });\n  }\n\n  _UI.setupCopyHandler = setupCopyHandler;\n\n  function showNoteGroupsForTracks() {\n    UI.Tracks.checkAllNonEmptyTracks();\n    apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].update();\n    var payload = {};\n    payload[Keys.UPDATED_TRACKS_LIST] = Song.getRecentlyUpdatedTrackNumbersAsArray();\n    dispatch({\n      type: apps_shared_redux_Actions__WEBPACK_IMPORTED_MODULE_9__[\"default\"].Song.onTracksUpdated,\n      payload: payload\n    });\n    Song.resetRecentlyUpdatedTrackNumbers();\n  }\n\n  _UI.showNoteGroupsForTracks = showNoteGroupsForTracks;\n\n  function scrollNoteGroupIntoView(trackNumber, noteGroupNumber) {\n    var noteGroupID = Song.getNoteGroupID(trackNumber, noteGroupNumber); // Scroll the divs all the way to the right to make sure the most recent NoteGroups are visible.\n\n    var element = document.querySelector(\"#\".concat(noteGroupID));\n\n    if (element) {\n      element.scrollIntoView();\n    }\n  }\n\n  _UI.scrollNoteGroupIntoView = scrollNoteGroupIntoView;\n\n  function onKeyDown(e) {\n    if (!piano) {\n      console.log(\"UI.onKeyDown: Piano has not been initialized.\");\n      return;\n    }\n\n    var keyCode = e.keyCode;\n    var metaKeyIsDown = e.metaKey; // e.metaKey => CMD (91 is LEFT CMD & 93 is RIGHT CMD)\n\n    var ctrlKeyIsDown = e.ctrlKey;\n    var shiftKeyIsDown = e.shiftKey;\n\n    if (metaKeyIsDown) {\n      if (keyCode == 37 || keyCode == 39) {// DO NOTHING. Fall through so that we can do CMD + LEFT ARROW and CMD + RIGHT ARROW.\n      } else {\n        // Ignore when we have the CMD pressed down, so that we can use the browser's hotkeys.\n        return;\n      }\n    } // CTRL => FLAT and SHIFT => SHARP\n\n\n    sharpOrFlatModifier = 0;\n\n    if (ctrlKeyIsDown) {\n      sharpOrFlatModifier = -1;\n    }\n\n    if (shiftKeyIsDown) {\n      sharpOrFlatModifier = +1;\n    }\n\n    e.preventDefault();\n\n    switch (keyCode) {\n      case 13:\n        // ENTER\n        Playback.togglePlayPause();\n        break;\n\n      case 33:\n        // PAGE UP | fn + UP_ARROW\n        // Up an octave.\n        octaveOffset++;\n\n        if (octaveOffset > 0) {\n          octaveOffset = 0;\n        }\n\n        UI.drawPiano();\n        break;\n\n      case 34:\n        // PAGE DOWN | fn + DOWN_ARROW\n        console.log(\"fn + DOWN\"); // Down an octave.\n\n        octaveOffset--;\n\n        if (octaveOffset < -1) {\n          octaveOffset = -1;\n        }\n\n        UI.drawPiano();\n        break;\n\n      case 36:\n        // HOME | fn + LEFT_ARROW\n        Playback.playNoteAndGoBackwardInTheSong(); // Find the previous note to play via round robin.\n\n        break;\n\n      case 35:\n        // END | fn + RIGHT_ARROW\n        Playback.playNoteAndGoForwardInTheSong(); // Find the next note to play via round robin.\n\n        break;\n\n      case 112:\n        console.log(\"F1\");\n        break;\n\n      case 113:\n        console.log(\"F2\");\n        break;\n\n      case 114:\n        console.log(\"F3\");\n        break;\n\n      case 115:\n        console.log(\"F4\");\n        break;\n\n      case 116:\n        console.log(\"F5\");\n        break;\n\n      case 192:\n        // ~ == SHIFT + `\n        console.log(\"SHIFT + `\");\n        resetEverything();\n        break;\n\n      case 32:\n        // SPACE BAR\n        console.log(\"SPACE\"); // xxx\n\n        break;\n\n      case 27:\n        // ESC\n        console.log(\"ESC\");\n\n        if (shiftKeyIsDown) {\n          // SHIFT + ESC\n          resetEverything();\n        } else {\n          // ESC resets the octave offsets\n          resetOffset();\n        }\n\n        break;\n\n      case 8:\n        // BACKSPACE/DEL\n        Song.deleteLastGroup();\n        break;\n\n      case 9:\n        // TAB\n        Song.mergeLastTwoGroups();\n        break;\n\n      case 38:\n        // UP\n        apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].prevTrack();\n        break;\n\n      case 40:\n        // DOWN\n        apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].nextTrack();\n        break;\n\n      case 37:\n        // LEFT\n        if (metaKeyIsDown) {\n          // CMD + LEFT jumps to the first notegroup of the currently highlighted track.\n          apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].firstNoteGroup();\n        } else if (shiftKeyIsDown) {\n          // SHIFT + LEFT\n          Playback.playAndGoBackwardOnCurrentTrack();\n        } else {\n          apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].prevNoteGroup();\n        }\n\n        break;\n\n      case 39:\n        // RIGHT\n        if (metaKeyIsDown) {\n          // CMD + RIGHT jumps to the last notegroup of the currently highlighted track.\n          apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].lastNoteGroup();\n        } else if (shiftKeyIsDown) {\n          // SHIFT + RIGHT\n          Playback.playAndGoForwardOnCurrentTrack();\n        } else {\n          apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].nextNoteGroup();\n        }\n\n        break;\n\n      default:\n        if (Keyboard.keyCodeToPianoKeyNumber.hasOwnProperty(keyCode)) {\n          App.playOneNote(Keyboard.keyCodeToPianoKeyNumber[keyCode]);\n        }\n\n        break;\n    }\n  }\n\n  _UI.onKeyDown = onKeyDown;\n\n  function onKeyUp(e) {\n    // Released CTRL or SHIFT\n    if (e.ctrlKey) {\n      sharpOrFlatModifier = 0;\n    } else if (e.shiftKey) {\n      sharpOrFlatModifier = 0;\n    }\n  }\n\n  _UI.onKeyUp = onKeyUp;\n  var WHITE_KEY_WIDTH = _UI.WHITE_KEY_WIDTH = 20;\n  var WHITE_KEY_HEIGHT = _UI.WHITE_KEY_HEIGHT = 120;\n  var BLACK_KEY_WIDTH = _UI.BLACK_KEY_WIDTH = 16;\n  var BLACK_KEY_HEIGHT = _UI.BLACK_KEY_HEIGHT = 72;\n  var context2d = null;\n  var context2dWidth = 0;\n  var context2dHeight = 0;\n\n  function setCanvasContext(c2d, c2dWidth, c2dHeight) {\n    context2d = c2d;\n    context2dWidth = c2dWidth;\n    context2dHeight = c2dHeight;\n  }\n\n  _UI.setCanvasContext = setCanvasContext;\n\n  function drawPiano() {\n    if (!context2d) {\n      return;\n    }\n\n    var c = context2d; // clear the background\n\n    c.fillStyle = \"#333\";\n    c.fillRect(0, 0, context2dWidth, context2dHeight);\n    drawWhiteKeys(c);\n    drawBlackKeys(c);\n    drawKeyLabels(c);\n    drawMostRecentGroup(c);\n  }\n\n  _UI.drawPiano = drawPiano;\n\n  function drawWhiteKeys(c) {\n    c.strokeStyle = \"#000\";\n    c.lineWidth = 0.2;\n    c.fillStyle = \"#FFF\";\n\n    for (var k = 0; k < 52; k++) {\n      c.fillRect(k * WHITE_KEY_WIDTH, 0, WHITE_KEY_WIDTH, WHITE_KEY_HEIGHT);\n      c.strokeRect(k * WHITE_KEY_WIDTH, 0, WHITE_KEY_WIDTH, WHITE_KEY_HEIGHT);\n    } // Highlight Middle C in faint red.\n\n\n    c.fillStyle = \"#FCC\";\n    c.fillRect(23 * WHITE_KEY_WIDTH, 0, WHITE_KEY_WIDTH, WHITE_KEY_HEIGHT);\n  }\n\n  function drawBlackKeys(c) {\n    c.fillStyle = \"#323232\";\n\n    for (var octave = 0; octave < 7; octave++) {\n      for (var key = 0; key < 7; key++) {\n        // A# = key 0; C# = key 2; G# = key 6\n        if (key == 1 || key == 4) {\n          continue; // skip B# and E#\n        }\n\n        c.fillRect(12 + 20 * (key + octave * 7), 0, BLACK_KEY_WIDTH, BLACK_KEY_HEIGHT);\n      }\n    } // highest black key\n\n\n    c.fillRect(12 + 7 * 7 * 20, 0, 16, 72);\n  }\n\n  function drawKeyLabels(c) {\n    c.textAlign = \"center\"; // draw the piano key numbers for the white keys\n    // also draw the note name\n\n    for (var k = 1; k <= 88; k++) {\n      var remainder = k % 12;\n\n      if (whiteKeys.includes(remainder)) {\n        var octave = Math.floor(k / 12);\n        var whiteKeyNoteIndex = whiteKeys.indexOf(remainder);\n        var whiteKeyIndex = octave * 7 + whiteKeyNoteIndex;\n        var noteLabel = noteLabels[whiteKeyNoteIndex];\n\n        if (noteLabel == \"c\") {\n          c.font = \"bold 13px Tahoma\";\n        } else {\n          c.font = \"13px Tahoma\";\n        }\n\n        c.fillStyle = \"#777\";\n        c.fillText(noteLabel, whiteKeyIndex * 20 + 10, 100);\n        c.font = \"12px Consolas\";\n        c.fillStyle = \"#999\";\n        c.fillText(k, whiteKeyIndex * 20 + 10, 115);\n      }\n    }\n\n    c.font = \"15px Consolas\";\n    c.fillStyle = \"#FFF\";\n    c.textAlign = \"center\"; // draw the current character to press, under the correct key!\n\n    var offset = (octaveOffset + 1) * 7; // start on A (key 13)\n\n    var len = Keyboard.labels.length;\n\n    for (var i = 0; i < len; i++) {\n      c.fillText(Keyboard.labels[i], (i + offset) * 20 + 10, 140);\n    }\n  } // draw the highlighted group?\n\n\n  function drawMostRecentGroup(c) {\n    var trackNumber = apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getCurrentTrackNumber();\n    var noteGroupNumber = apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getCurrentNoteGroupNumber();\n    var lastGroup = Song.getNoteGroupFromTrack(noteGroupNumber, trackNumber);\n\n    if (!lastGroup) {\n      return;\n    }\n\n    var notes = lastGroup.notes;\n\n    var _iterator4 = _createForOfIteratorHelper(notes),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var n = _step4.value;\n        var remainder = n.pianoNote % 12;\n        var octaveIndex = Math.floor((n.pianoNote - 1) / 12);\n        c.beginPath();\n\n        if (blackKeys.includes(remainder)) {\n          // is it a black key?\n          var blackKeyIndex = octaveIndex * 7 + blackKeys.indexOf(remainder); // black keys are 16px wide\n\n          c.arc(blackKeyIndex * 20 + 20, 60, 6, 0, 2 * Math.PI, false);\n        } else {\n          // if white, we map it to one of the 52 white keys\n          var whiteKeyIndex = octaveIndex * 7 + whiteKeys.indexOf(remainder); // white keys are 20px wide\n\n          c.arc(whiteKeyIndex * 20 + 10, 96, 7, 0, 2 * Math.PI, false);\n        }\n\n        c.fillStyle = \"rgba(220,220,10,.82)\"; // fill the yellow circle\n\n        c.fill();\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  } ////////////////////////////////////////////////////////////\n\n\n  var Tracks;\n\n  (function (_Tracks) {\n    // Bindings to our React component state.\n    // We can query whether a track's checkbox isChecked.\n    // We can call setChecked to change the track's checked state.\n    var isCheckedCallbacks = null;\n    var setCheckedCallbacks = null;\n\n    var defaultIsCheckedCB = function defaultIsCheckedCB() {\n      console.log(\"DEFAULT IS-CHECKED. RETURN TRUE.\");\n      return true;\n    };\n\n    var defaultSetCheckedCB = function defaultSetCheckedCB(checked) {\n      console.log(\"DEFAULT SET CHECKED: \" + checked);\n      /* NO-OP */\n    };\n\n    function setup(numTracks) {\n      isCheckedCallbacks = new Array(numTracks);\n      setCheckedCallbacks = new Array(numTracks);\n      isCheckedCallbacks.fill(defaultIsCheckedCB);\n      setCheckedCallbacks.fill(defaultSetCheckedCB);\n      Song.reset();\n\n      for (var t = 0; t < numTracks; t++) {\n        Song.addTrack();\n      }\n\n      apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].setupIndexes(numTracks);\n    }\n\n    _Tracks.setup = setup;\n\n    function addNewTrack() {}\n\n    _Tracks.addNewTrack = addNewTrack;\n\n    function getTextFileFromTracks() {\n      console.log(\"getTextFileFromTracks Song Version: \" + App.getSongVersion());\n      var noteGroups = Song.getNoteGroupsFromTracks();\n\n      if (App.getSongVersion() === 1) {\n        var noteGroupV1Strings = [];\n        noteGroups.forEach(function (noteGroup) {\n          noteGroupV1Strings.push(noteGroup.toStringV1());\n        });\n        return noteGroupV1Strings.join(\" \");\n      } else {\n        // songVersion === 2\n        return noteGroups.join(\" \");\n      }\n    }\n\n    _Tracks.getTextFileFromTracks = getTextFileFromTracks;\n\n    function getTrackNumbersToIncludeInMIDIFile() {\n      var trackNumbersToInclude = [];\n      var numTracks = Song.getNumTracks();\n\n      for (var trackNumber = 0; trackNumber < numTracks; trackNumber++) {\n        if (Tracks.isChecked(trackNumber)) {\n          trackNumbersToInclude.push(trackNumber);\n        }\n      }\n\n      return trackNumbersToInclude;\n    }\n\n    _Tracks.getTrackNumbersToIncludeInMIDIFile = getTrackNumbersToIncludeInMIDIFile;\n\n    function setTrackCheckedCallbacks(trackNumber, isTrackChecked, setTrackChecked) {\n      console.log(\"setTrackCheckedCallbacks \" + trackNumber + \" \" + typeof isTrackChecked + \" \" + typeof setTrackChecked);\n\n      if (!isCheckedCallbacks) {\n        isCheckedCallbacks = [];\n      }\n\n      isCheckedCallbacks[trackNumber] = isTrackChecked;\n\n      if (!setCheckedCallbacks) {\n        setCheckedCallbacks = [];\n      }\n\n      setCheckedCallbacks[trackNumber] = setTrackChecked;\n    }\n\n    _Tracks.setTrackCheckedCallbacks = setTrackCheckedCallbacks;\n\n    function setChecked(trackNumber, checked) {\n      console.log(\"setChecked \" + trackNumber + \" => \" + checked);\n      var setCheckedCB = setCheckedCallbacks[trackNumber];\n\n      if (!setCheckedCB) {\n        console.log(\"NULL SETCHECKED CALLBACK\"); // DO NOTHING\n      } else {\n        // #TODO: If the value has not changed, do nothing.\n        setCheckedCB(checked);\n        LocalStorage.saveCheckBoxes();\n        Song.resetCache();\n      }\n    }\n\n    _Tracks.setChecked = setChecked;\n\n    function isChecked(trackNumber) {\n      var isCheckedCB = isCheckedCallbacks[trackNumber];\n\n      if (!isCheckedCB) {\n        // null or undefined\n        return false;\n      } else {\n        return isCheckedCB();\n      }\n    }\n\n    _Tracks.isChecked = isChecked;\n\n    function checkAllNonEmptyTracks() {\n      var numTracks = Song.getNumTracks();\n\n      for (var trackNumber = 0; trackNumber < numTracks; trackNumber++) {\n        if (Song.getNumNoteGroupsInTrack(trackNumber) > 0) {\n          Tracks.setChecked(trackNumber, true);\n        } else {\n          Tracks.setChecked(trackNumber, false);\n        }\n      }\n    }\n\n    _Tracks.checkAllNonEmptyTracks = checkAllNonEmptyTracks;\n\n    function getCheckedStateForAllTracks() {\n      return isCheckedCallbacks.map(function (isCheckedCB) {\n        if (!isCheckedCB) {\n          return false; // If the callback is undefined or null, we consider that track \"NOT CHECKED\".\n        } else {\n          var checked = isCheckedCB();\n          console.log(checked);\n          return checked; // Otherwise, we call the callback to determine the current checked state.\n        }\n      });\n    }\n\n    _Tracks.getCheckedStateForAllTracks = getCheckedStateForAllTracks;\n\n    function setCheckedStateForAllTracks(checkedStateForAllTracks) {\n      for (var trackNumber = 0; trackNumber < checkedStateForAllTracks.length; trackNumber++) {\n        var checkedState = checkedStateForAllTracks[trackNumber];\n        Tracks.setChecked(trackNumber, checkedState);\n      }\n    }\n\n    _Tracks.setCheckedStateForAllTracks = setCheckedStateForAllTracks;\n  })(Tracks || (Tracks = _UI.Tracks || (_UI.Tracks = {})));\n})(UI || (UI = {})); ///////////////////////////////////////////////////////////////////////////\n\n\nvar Song;\n\n(function (_Song) {\n  // Support multi track MIDI songs.\n  // When we compose by hand, stick everything in track 0.\n  var tracks = [];\n  var cachedNoteGroups = null;\n  var recentlyUpdatedTrackNumbers = new Set();\n\n  function reset() {\n    tracks.length = 0;\n    Song.resetRecentlyUpdatedTrackNumbers();\n    Song.resetCache();\n  }\n\n  _Song.reset = reset;\n\n  function resetCache() {\n    cachedNoteGroups = null;\n  }\n\n  _Song.resetCache = resetCache;\n\n  function addTrack() {\n    var track = new apps_author_piano_v2_Music__WEBPACK_IMPORTED_MODULE_5__[\"Track\"]();\n    track.trackNumber = tracks.length;\n    tracks.push(track);\n    recentlyUpdatedTrackNumbers.add(track.trackNumber);\n  }\n\n  _Song.addTrack = addTrack;\n\n  function addNoteGroupToTrack(noteGroup, trackNumber) {\n    Song.resetCache(); // Every time we modify the tracks, we need to invalidate the cache.\n\n    var track = tracks[trackNumber];\n    noteGroup.trackNumber = trackNumber;\n    noteGroup.noteNumber = track.length;\n    track.push(noteGroup);\n    recentlyUpdatedTrackNumbers.add(trackNumber);\n    return tracks[trackNumber].length; // We call saveAndShowData() elsewhere!\n  }\n\n  _Song.addNoteGroupToTrack = addNoteGroupToTrack;\n\n  function getNumTracks() {\n    return tracks.length;\n  }\n\n  _Song.getNumTracks = getNumTracks;\n\n  function getNumNoteGroupsInTrack(trackNumber) {\n    if (trackNumber < 0 || trackNumber >= tracks.length) {\n      return 0;\n    } else {\n      return tracks[trackNumber].length;\n    }\n  }\n\n  _Song.getNumNoteGroupsInTrack = getNumNoteGroupsInTrack;\n\n  function isTrackEmpty(trackNumber) {\n    return getNumNoteGroupsInTrack(trackNumber) === 0;\n  }\n\n  _Song.isTrackEmpty = isTrackEmpty;\n\n  function getTracksAsJSON() {\n    return JSON.stringify(tracks);\n  }\n\n  _Song.getTracksAsJSON = getTracksAsJSON;\n\n  function mergeLastTwoGroups() {\n    var trackNumber = apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getCurrentTrackNumber();\n    var currTrack = tracks[trackNumber];\n\n    if (currTrack.length >= 2) {\n      var mergedNoteGroup = apps_author_piano_v2_Music__WEBPACK_IMPORTED_MODULE_5__[\"NoteGroup\"].merge(currTrack.pop(), currTrack.pop());\n      Song.addNoteGroupToTrack(mergedNoteGroup, trackNumber);\n      apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].setTrackAndNoteGroup(trackNumber, currTrack.length - 1);\n      recentlyUpdatedTrackNumbers.add(trackNumber);\n      saveAndShowData();\n    }\n  }\n\n  _Song.mergeLastTwoGroups = mergeLastTwoGroups;\n\n  function deleteLastGroup() {\n    var trackNumber = apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getCurrentTrackNumber();\n    tracks[trackNumber].pop();\n    apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].setTrackAndNoteGroup(trackNumber, tracks[trackNumber].length - 1);\n    recentlyUpdatedTrackNumbers.add(trackNumber);\n    saveAndShowData();\n  }\n\n  _Song.deleteLastGroup = deleteLastGroup;\n\n  function getNoteGroupFromTrack(noteGroupNumber, trackNumber) {\n    if (trackNumber < 0 || trackNumber >= tracks.length) {\n      return null;\n    }\n\n    var track = tracks[trackNumber];\n\n    if (noteGroupNumber < 0 || noteGroupNumber >= track.length) {\n      return null;\n    }\n\n    return track[noteGroupNumber];\n  }\n\n  _Song.getNoteGroupFromTrack = getNoteGroupFromTrack;\n\n  function getNoteGroupsFromTracks() {\n    if (cachedNoteGroups !== null) {\n      return cachedNoteGroups;\n    }\n\n    console.log(\"Recompute Cached NoteGroups!!!\");\n    var noteGroups = [];\n    var currTimeMillis = 0; // Used when our NoteGroups don't have valid timing information (i.e., manual entry).\n\n    var noteGroupPointerForTrack = []; // Keep pointers to the current NoteGroups we are looking at. One pointer/cursor per track.\n\n    var numTracks = tracks.length;\n\n    for (var trackNumber = 0; trackNumber < numTracks; trackNumber++) {\n      noteGroupPointerForTrack.push(0); // Start a index 0 (the first NoteGroup of each track).\n    } // Round robin between the tracks until we insert all the NoteGroups properly. Always choose the NoteGroup with the minimum playTime.\n\n\n    while (true) {\n      var minPlayTime = Number.MAX_VALUE;\n      var nextNoteGroup = null;\n      var nextNoteGroupTrack = null; // Which track contains the next note group to play?\n      // Loop through all the tracks to find the next NoteGroup to play.\n\n      for (var _trackNumber = 0; _trackNumber < numTracks; _trackNumber++) {\n        var currTrack = tracks[_trackNumber];\n        var currTrackLength = currTrack.length;\n        var currNoteGroupPointer = noteGroupPointerForTrack[_trackNumber];\n\n        if (currTrackLength === 0 || !UI.Tracks.isChecked(_trackNumber) || currNoteGroupPointer >= currTrackLength) {\n          // Ignore this track if:\n          //   it is empty\n          //   it is not checked\n          //   we have already finished looking at it\n          continue;\n        } else {\n          var _noteGroup2 = currTrack[currNoteGroupPointer];\n\n          if (_noteGroup2.playTimeMillis < minPlayTime) {\n            minPlayTime = _noteGroup2.playTimeMillis;\n            nextNoteGroup = _noteGroup2;\n            nextNoteGroupTrack = currTrack;\n          }\n        }\n      } // If we did not find any NoteGroups, we're done!\n\n\n      if (!nextNoteGroup) {\n        break; // break out of the while(true) loop.\n      } else {\n        var ng = nextNoteGroup.copy();\n\n        if (ng.playTimeMillis === -1) {\n          ng.playTimeMillis = currTimeMillis;\n        }\n\n        var t = nextNoteGroupTrack.trackNumber;\n        var noteNumber = noteGroupPointerForTrack[t];\n        ng.noteNumber = noteNumber;\n        noteGroupPointerForTrack[t]++;\n        noteGroups.push(ng);\n        currTimeMillis = ng.playTimeMillis + TIME_BETWEEN_NOTEGROUPS;\n      }\n    }\n\n    cachedNoteGroups = noteGroups;\n    return noteGroups;\n  }\n\n  _Song.getNoteGroupsFromTracks = getNoteGroupsFromTracks;\n\n  function getNoteGroupID(trackNumber, noteGroupNumber) {\n    return \"t\".concat(trackNumber, \"_n\").concat(noteGroupNumber);\n  }\n\n  _Song.getNoteGroupID = getNoteGroupID;\n\n  function getRecentlyUpdatedTrackNumbersAsArray() {\n    return Array.from(recentlyUpdatedTrackNumbers);\n  }\n\n  _Song.getRecentlyUpdatedTrackNumbersAsArray = getRecentlyUpdatedTrackNumbersAsArray;\n\n  function resetRecentlyUpdatedTrackNumbers() {\n    recentlyUpdatedTrackNumbers.clear();\n  }\n\n  _Song.resetRecentlyUpdatedTrackNumbers = resetRecentlyUpdatedTrackNumbers;\n})(Song || (Song = {}));\n\nvar _Playback_NS = Playback;\nvar _Song_NS = Song;\nvar _UI_NS = UI;\nvar _Tracks_NS = UI.Tracks;\nvar App;\n\n(function (_App) {\n  var Playback = _App.Playback = _Playback_NS;\n  var Song = _App.Song = _Song_NS;\n  var UI = _App.UI = _UI_NS;\n  var Tracks = _App.Tracks = _Tracks_NS;\n  var songVersion = apps_shared_Constants__WEBPACK_IMPORTED_MODULE_6__[\"default\"].MIN_SONG_VERSION; // We need to update this every time the redux store changes!\n\n  function getSongVersion() {\n    return songVersion;\n  }\n\n  _App.getSongVersion = getSongVersion;\n\n  function setSongVersion(v) {\n    songVersion = v;\n  }\n\n  _App.setSongVersion = setSongVersion;\n\n  function setDispatchFunction(d) {\n    dispatch = d;\n  }\n\n  _App.setDispatchFunction = setDispatchFunction;\n\n  function start() {\n    console.log(\"App.start()\");\n    MIDIPianoInput.setup();\n    LocalStorage.load();\n    UI.showNoteGroupsForTracks();\n    UI.setupCopyHandler();\n    UI.drawPiano();\n  }\n\n  _App.start = start;\n\n  function startAudio() {\n    piano = new apps_shared_sound_Instrument__WEBPACK_IMPORTED_MODULE_10__[\"default\"]();\n  }\n\n  _App.startAudio = startAudio;\n\n  function saveSongVersionToLocalStorage(ver) {\n    App.setSongVersion(ver);\n    console.log(\"saveSongVersionToLocalStorage \" + ver);\n    LocalStorage.saveVersionToggle(ver);\n  }\n\n  _App.saveSongVersionToLocalStorage = saveSongVersionToLocalStorage;\n\n  function fillTracksWithNoteGroupsExtractedFromMIDIEvents(midiFile, midiEvents) {\n    console.log(\"MIDI File Passed In: \" + midiFile);\n\n    if (!midiFile) {\n      return;\n    }\n\n    UI.Tracks.setup(midiFile.tracks.length); // Remember the most recently processed event so that we can merge notes that are played at the same time and on the same track.\n\n    var lastNoteGroup = null;\n    var lastPlayTime = -1;\n    var lastTrackNumber = -1; // Convert from MIDI events to NoteGroups\n\n    var _iterator5 = _createForOfIteratorHelper(midiEvents),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var event = _step5.value;\n        var _type = event.type;\n        var subtype = event.subtype; // let status = (event.subtype << 4) + event.channel;\n        // let statusCodeHexString = '0x' + status.toString(16).toUpperCase();\n\n        var playTime = event.playTime; // time in milliseconds\n\n        playTime = Math.round(playTime * 1000) / 1000; // round it to the nearest 0.001\n\n        var midiNoteNum = event.param1;\n        var _velocity = event.param2;\n        var pianoNoteNum = apps_shared_midi_MIDIUtils__WEBPACK_IMPORTED_MODULE_8__[\"default\"].m2p(midiNoteNum);\n        var noteToPlay = new apps_author_piano_v2_Music__WEBPACK_IMPORTED_MODULE_5__[\"Note\"](pianoNoteNum, 1.0\n        /* duration */\n        , _velocity); // TODO: Support duration someday?\n\n        console.log(\"VELOCITY \" + _velocity);\n        var trackNumber = event.track; // possibly undefined!\n\n        if (!trackNumber) {\n          trackNumber = 0; // We will assign events with undefined trackNumbers to track 0.\n        }\n\n        if (subtype === MIDIEvents.EVENT_MIDI_NOTE_ON) {\n          if (playTime <= lastPlayTime + TIME_THRESHOLD_FOR_GROUPING_NEARBY_NOTES && trackNumber === lastTrackNumber) {\n            // Merge all notes starting at the same time and on the same track into a single NoteGroup.\n            lastNoteGroup.addNote(noteToPlay);\n          } else {\n            var _noteGroup3 = new apps_author_piano_v2_Music__WEBPACK_IMPORTED_MODULE_5__[\"NoteGroup\"](noteToPlay, playTime, trackNumber);\n\n            Song.addNoteGroupToTrack(_noteGroup3, trackNumber);\n            lastNoteGroup = _noteGroup3;\n            lastTrackNumber = trackNumber;\n            lastPlayTime = playTime;\n          }\n        } else {\n          // OTHER EVENTS\n          console.log(\"Unhandled Event:\");\n          apps_shared_midi_MIDIFileIO__WEBPACK_IMPORTED_MODULE_7__[\"default\"].printTypeAndSubtype(_type, subtype);\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    saveAndShowData();\n  }\n\n  _App.fillTracksWithNoteGroupsExtractedFromMIDIEvents = fillTracksWithNoteGroupsExtractedFromMIDIEvents;\n\n  function getDownloadData_TEXT() {\n    // GENERATE THE TEXT FILE FROM OUR TRACKS. BASE 64 ENCODE IT.\n    // A textual representation of the song:\n    //   V1 => e.g., 40 42 44 45 40.47\n    //   V2 => e.g., [24.36 @ 0] [17.29 @ 2730] [36 @ 2904] [41 @ 3029] [44 @ 3152]\n    var text = Tracks.getTextFileFromTracks();\n    var base64Text = btoa(text); // base 64 encoding\n\n    return base64Text;\n  }\n\n  _App.getDownloadData_TEXT = getDownloadData_TEXT;\n\n  function getDownloadData_MIDI() {\n    // GENERATE THE MIDI FILE FROM OUR TRACKS. BASE 64 ENCODE IT.\n    var trackNumbersToInclude = Tracks.getTrackNumbersToIncludeInMIDIFile();\n    var midiFile = apps_shared_midi_MIDIFileIO__WEBPACK_IMPORTED_MODULE_7__[\"default\"].createFileFromTracks(trackNumbersToInclude, Song.getNoteGroupsFromTracks());\n    var base64Text = btoa(midiFile); // base 64 encoding\n\n    return base64Text;\n  }\n\n  _App.getDownloadData_MIDI = getDownloadData_MIDI;\n\n  function playOneNote(pianoKeyBeforeModifiers) {\n    var applyModifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    // get the name of the note we are about to play\n    var remainder = pianoKeyBeforeModifiers % 12;\n    var whiteKeyNoteIndex = whiteKeys.indexOf(remainder);\n    var noteLabel = noteLabels[whiteKeyNoteIndex];\n    var modifier = 0;\n\n    if (applyModifiers) {\n      modifier = sharpOrFlatModifier; // The user is holding down SHIFT or CTRL\n      // is this note auto-sharped, due to the key signature?\n\n      if (apps_author_piano_shared_SharpsAndFlatsManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isNoteSharp(noteLabel)) {\n        modifier++; // raise the sharp a half-step!\n      } // is this note auto-flatted, due to the key signature?\n\n\n      if (apps_author_piano_shared_SharpsAndFlatsManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isNoteFlat(noteLabel)) {\n        modifier--; // lower the note a half-step!\n      }\n    }\n\n    var pianoKeyNumber = pianoKeyBeforeModifiers + modifier + octaveOffset * 12;\n\n    if (pianoKeyNumber < 1 || pianoKeyNumber > 88) {\n      return;\n    }\n\n    var trackNumber = apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getCurrentTrackNumber();\n    var trackLength = Song.addNoteGroupToTrack(new apps_author_piano_v2_Music__WEBPACK_IMPORTED_MODULE_5__[\"NoteGroup\"](new apps_author_piano_v2_Music__WEBPACK_IMPORTED_MODULE_5__[\"Note\"](pianoKeyNumber)), trackNumber);\n    Tracks.setChecked(trackNumber, true);\n    App.playPianoNote(pianoKeyNumber);\n    apps_author_piano_v2_Highlight__WEBPACK_IMPORTED_MODULE_4__[\"default\"].setTrackAndNoteGroup(trackNumber, trackLength - 1);\n    saveAndShowData();\n  }\n\n  _App.playOneNote = playOneNote;\n\n  function playPianoNote(pianoKeyNumber) {\n    var velocity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 127.0;\n\n    if (piano === null) {\n      console.log(\"playPianoNote: Piano has not been initialized.\");\n      return;\n    }\n\n    var duration = 1.0; // 0.125, 0.25, 0.5, 1.0, 2.0;\n\n    piano.play(pianoKeyNumber, duration, velocity / 127.0);\n  }\n\n  _App.playPianoNote = playPianoNote;\n\n  function loadFirstFile(fileList) {\n    if (fileList.length > 0) {\n      var file = fileList[0]; // Read the first file.\n\n      apps_shared_midi_MIDIFileIO__WEBPACK_IMPORTED_MODULE_7__[\"default\"].readFileAsync(file).then(function (fileName) {\n        dispatch({\n          type: apps_shared_redux_Actions__WEBPACK_IMPORTED_MODULE_9__[\"default\"].FileChooser.onFileLoaded\n        });\n      });\n    }\n  }\n\n  _App.loadFirstFile = loadFirstFile;\n})(App || (App = {}));\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (App);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./apps/author/piano/v2/App.ts\n");

/***/ })

})